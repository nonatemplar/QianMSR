#pragma warning( disable : 4100 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4355 )
#pragma warning( disable : 4503 )
#pragma warning( disable : 4512 )
#pragma warning( disable : 4691 )
#pragma warning( disable : 4723 )
#if defined(COMPILE_NATIVE)
#include "ScopeOperators.h"
#endif
#if defined(COMPILE_MANAGED)
#using <mscorlib.dll>
[assembly: System::Runtime::Versioning::TargetFrameworkAttribute(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework, Version 4.5")];
#include "ScopeManaged.h"
#endif
using namespace ScopeEngine;
enum OperatorUID
{
UID_GetSStream_0 = 1,
UID_GetSStream_0_Data0 = 2,
UID_Process_1 = 3,
UID_Process_1_Data0 = 4,
UID_GetSStream_2 = 5,
UID_GetSStream_2_Data0 = 6,
UID_Process_3 = 7,
UID_Process_3_Data0 = 8,
UID_GetSStream_4 = 9,
UID_GetSStream_4_Data0 = 10,
UID_Process_5 = 11,
UID_Process_5_Data0 = 12,
UID_GetSStream_6 = 13,
UID_GetSStream_6_Data0 = 14,
UID_Process_7 = 15,
UID_Process_7_Data0 = 16,
UID_GetSStream_8 = 17,
UID_GetSStream_8_Data0 = 18,
UID_Process_9 = 19,
UID_Process_9_Data0 = 20,
UID_GetSStream_10 = 21,
UID_GetSStream_10_Data0 = 22,
UID_Process_11 = 23,
UID_Process_11_Data0 = 24,
UID_GetSStream_12 = 25,
UID_GetSStream_12_Data0 = 26,
UID_Process_13 = 27,
UID_Process_13_Data0 = 28,
UID_GetSStream_14 = 29,
UID_GetSStream_14_Data0 = 30,
UID_Process_15 = 31,
UID_Process_15_Data0 = 32,
UID_GetSStream_16 = 33,
UID_GetSStream_16_Data0 = 34,
UID_Process_17 = 35,
UID_Process_17_Data0 = 36,
UID_GetSStream_18 = 37,
UID_GetSStream_18_Data0 = 38,
UID_Process_19 = 39,
UID_Process_19_Data0 = 40,
UID_GetSStream_20 = 41,
UID_GetSStream_20_Data0 = 42,
UID_Process_21 = 43,
UID_Process_21_Data0 = 44,
UID_GetSStream_22 = 45,
UID_GetSStream_22_Data0 = 46,
UID_Process_23 = 47,
UID_Process_23_Data0 = 48,
UID_GetSStream_24 = 49,
UID_GetSStream_24_Data0 = 50,
UID_Process_25 = 51,
UID_Process_25_Data0 = 52,
UID_GetSStream_26 = 53,
UID_GetSStream_26_Data0 = 54,
UID_Process_27 = 55,
UID_Process_27_Data0 = 56,
UID_GetSStream_28 = 57,
UID_GetSStream_28_Data0 = 58,
UID_Process_29 = 59,
UID_Process_29_Data0 = 60,
UID_GetSStream_30 = 61,
UID_GetSStream_30_Data0 = 62,
UID_Process_31 = 63,
UID_Process_31_Data0 = 64,
UID_GetSStream_32 = 65,
UID_GetSStream_32_Data0 = 66,
UID_Process_33 = 67,
UID_Process_33_Data0 = 68,
UID_GetSStream_34 = 69,
UID_GetSStream_34_Data0 = 70,
UID_Process_35 = 71,
UID_Process_35_Data0 = 72,
UID_GetSStream_36 = 73,
UID_GetSStream_36_Data0 = 74,
UID_Process_37 = 75,
UID_Process_37_Data0 = 76,
UID_GetSStream_38 = 77,
UID_GetSStream_38_Data0 = 78,
UID_Process_39 = 79,
UID_Process_39_Data0 = 80,
UID_GetSStream_40 = 81,
UID_GetSStream_40_Data0 = 82,
UID_Process_41 = 83,
UID_Process_41_Data0 = 84,
UID_GetSStream_42 = 85,
UID_GetSStream_42_Data0 = 86,
UID_Process_43 = 87,
UID_Process_43_Data0 = 88,
UID_GetSStream_44 = 89,
UID_GetSStream_44_Data0 = 90,
UID_Process_45 = 91,
UID_Process_45_Data0 = 92,
UID_GetSStream_46 = 93,
UID_GetSStream_46_Data0 = 94,
UID_Process_47 = 95,
UID_Process_47_Data0 = 96,
UID_Aggregate_48 = 97,
UID_Aggregate_48_Data0 = 98,
UID_SV1_Extract_Combine_out0 = 99,
UID_ParallelUnionAll_Aggregate_48
};

//namespace ScopeGeneratedClasses
//{
    // ColumnTypeID for UDT (IDs represent offsets into UDT type table)
    enum UDTColumnTypeID
    {
        
    };

#if defined(COMPILE_MANAGED)
// Explicit instantiations for templated functions that are defined in managed code
#endif // defined(COMPILE_MANAGED)


    class PartitionSchema_GetSStream_0
    {
    public:
        FString m_DeploymentGUID;
        FString m_SubscriptionGUID;
        FString m_endpoint;
        PartitionSchema_GetSStream_0();
        PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);


        static string GetDefinition()
        {
            return MakeBigString("DeploymentGUID:string,SubscriptionGUID:string,endpoint:string");
        }

        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, PartitionSchema_GetSStream_0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, PartitionSchema_GetSStream_0 & row)
    {
        os << "\tDeploymentGUID:\t" << row.m_DeploymentGUID << endl;
        os << "\tSubscriptionGUID:\t" << row.m_SubscriptionGUID << endl;
        os << "\tendpoint:\t" << row.m_endpoint << endl;
        return os;
    }
#endif // defined(SCOPE_DEBUG)


    class GetSStream_0_Data0
    {
    public:
        FString m_SubscriptionGUID;
        FString m_DeploymentGUID;
        FString m_DeploymentName;
        NativeNullable<ScopeDateTime> m_DeploymentCreateTimestamp;
        FString m_HostedServiceName;
        FString m_FabricGeoId;
        FString m_DeploymentType;
        NativeNullable<int> m_IsSystemDeployment;
        NativeNullable<ScopeDateTime> m_DeploymentCSSInfoLastUpdated;
        NativeNullable<int> m_DeploymentCurrentUpdateDomain;
        NativeNullable<int> m_DeploymentCurrentUpgradeDomain;
        NativeNullable<int> m_DeploymentCurrentUpgradeDomainState;
        FString m_DeploymentDescription;
        FString m_DeploymentDNSGuid;
        FString m_DeploymentDNSName;
        FString m_DeploymentFabricTenantStatus;
        FString m_DeploymentGroup;
        FString m_DeploymentHost;
        FString m_DeploymentInputEndpoints;
        FString m_DeploymentKind;
        FString m_DeploymentLabel;
        FString m_DeploymentLastChangingOperationId;
        NativeNullable<ScopeDateTime> m_DeploymentLastChangingOperationStarted;
        NativeNullable<ScopeDateTime> m_DeploymentLastServiceHealingTime;
        NativeNullable<ScopeDateTime> m_DeploymentLastUpdated;
        NativeNullable<bool> m_DeploymentLastVipSwapFailed;
        NativeNullable<ScopeDateTime> m_DeploymentLastVipSwapFailedTime;
        NativeNullable<int> m_DeploymentNumUpgradeDomains;
        FString m_DeploymentOsUpgradePolicy;
        FString m_DeploymentOsVersion;
        FString m_DeploymentProgressStatus;
        FString m_DeploymentRoleInstanceDetails;
        FString m_DeploymentRoleObjects;
        FString m_DeploymentRoles;
        NativeNullable<ScopeDateTime> m_DeploymentRolesCSSInfoLastUpdated;
        NativeNullable<ScopeDateTime> m_DeploymentRolesLastUpdated;
        NativeNullable<ScopeDateTime> m_DeploymentRolesSupportInfoLastUpdated;
        FString m_DeploymentRoleToUpgrade;
        NativeNullable<bool> m_DeploymentServiceHealingEnabled;
        NativeNullable<int> m_DeploymentServiceInstanceCount;
        FString m_DeploymentSettings;
        FString m_DeploymentStatus;
        NativeNullable<ScopeDateTime> m_DeploymentSupportInfoLastUpdated;
        FString m_DeploymentTransitionStatus;
        NativeNullable<bool> m_DeploymentUpdateInProgress;
        FString m_DeploymentUpdateType;
        FString m_DeploymentVIP;
        FString m_DeploymentVIPIPv6;
        NativeNullable<int> m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
        NativeNullable<int> m_DeploymentWeightedNumberOfRoleInstances;
        FString m_FqdnSuffix;
        NativeNullable<bool> m_IS_Current;
        FString m_MigratedFrom;
        FString m_PackageRequiredFeatures;
        FString m_PersistentVMs;
        FString m_RoleOsMap;
        NativeNullable<ScopeDateTime> m_SCD_EndDate;
        NativeNullable<ScopeDateTime> m_SCD_StartDate;
        FString m_SdkVersion;
        NativeNullable<ScopeDateTime> m_TimeMigrated;
        FString m_endpoint;
        FString m_SourceTableName;
        FString m_AuditCreateDate;
        FString m_AuditUpdateDate;
        GetSStream_0_Data0();
        GetSStream_0_Data0(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        GetSStream_0_Data0(const GetSStream_0_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);



        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, GetSStream_0_Data0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, GetSStream_0_Data0 & row)
    {
        os << "\tSubscriptionGUID:\t" << row.m_SubscriptionGUID << endl;
        os << "\tDeploymentGUID:\t" << row.m_DeploymentGUID << endl;
        os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
        os << "\tDeploymentCreateTimestamp:\t" << row.m_DeploymentCreateTimestamp << endl;
        os << "\tHostedServiceName:\t" << row.m_HostedServiceName << endl;
        os << "\tFabricGeoId:\t" << row.m_FabricGeoId << endl;
        os << "\tDeploymentType:\t" << row.m_DeploymentType << endl;
        os << "\tIsSystemDeployment:\t" << row.m_IsSystemDeployment << endl;
        os << "\tDeploymentCSSInfoLastUpdated:\t" << row.m_DeploymentCSSInfoLastUpdated << endl;
        os << "\tDeploymentCurrentUpdateDomain:\t" << row.m_DeploymentCurrentUpdateDomain << endl;
        os << "\tDeploymentCurrentUpgradeDomain:\t" << row.m_DeploymentCurrentUpgradeDomain << endl;
        os << "\tDeploymentCurrentUpgradeDomainState:\t" << row.m_DeploymentCurrentUpgradeDomainState << endl;
        os << "\tDeploymentDescription:\t" << row.m_DeploymentDescription << endl;
        os << "\tDeploymentDNSGuid:\t" << row.m_DeploymentDNSGuid << endl;
        os << "\tDeploymentDNSName:\t" << row.m_DeploymentDNSName << endl;
        os << "\tDeploymentFabricTenantStatus:\t" << row.m_DeploymentFabricTenantStatus << endl;
        os << "\tDeploymentGroup:\t" << row.m_DeploymentGroup << endl;
        os << "\tDeploymentHost:\t" << row.m_DeploymentHost << endl;
        os << "\tDeploymentInputEndpoints:\t" << row.m_DeploymentInputEndpoints << endl;
        os << "\tDeploymentKind:\t" << row.m_DeploymentKind << endl;
        os << "\tDeploymentLabel:\t" << row.m_DeploymentLabel << endl;
        os << "\tDeploymentLastChangingOperationId:\t" << row.m_DeploymentLastChangingOperationId << endl;
        os << "\tDeploymentLastChangingOperationStarted:\t" << row.m_DeploymentLastChangingOperationStarted << endl;
        os << "\tDeploymentLastServiceHealingTime:\t" << row.m_DeploymentLastServiceHealingTime << endl;
        os << "\tDeploymentLastUpdated:\t" << row.m_DeploymentLastUpdated << endl;
        os << "\tDeploymentLastVipSwapFailed:\t" << row.m_DeploymentLastVipSwapFailed << endl;
        os << "\tDeploymentLastVipSwapFailedTime:\t" << row.m_DeploymentLastVipSwapFailedTime << endl;
        os << "\tDeploymentNumUpgradeDomains:\t" << row.m_DeploymentNumUpgradeDomains << endl;
        os << "\tDeploymentOsUpgradePolicy:\t" << row.m_DeploymentOsUpgradePolicy << endl;
        os << "\tDeploymentOsVersion:\t" << row.m_DeploymentOsVersion << endl;
        os << "\tDeploymentProgressStatus:\t" << row.m_DeploymentProgressStatus << endl;
        os << "\tDeploymentRoleInstanceDetails:\t" << row.m_DeploymentRoleInstanceDetails << endl;
        os << "\tDeploymentRoleObjects:\t" << row.m_DeploymentRoleObjects << endl;
        os << "\tDeploymentRoles:\t" << row.m_DeploymentRoles << endl;
        os << "\tDeploymentRolesCSSInfoLastUpdated:\t" << row.m_DeploymentRolesCSSInfoLastUpdated << endl;
        os << "\tDeploymentRolesLastUpdated:\t" << row.m_DeploymentRolesLastUpdated << endl;
        os << "\tDeploymentRolesSupportInfoLastUpdated:\t" << row.m_DeploymentRolesSupportInfoLastUpdated << endl;
        os << "\tDeploymentRoleToUpgrade:\t" << row.m_DeploymentRoleToUpgrade << endl;
        os << "\tDeploymentServiceHealingEnabled:\t" << row.m_DeploymentServiceHealingEnabled << endl;
        os << "\tDeploymentServiceInstanceCount:\t" << row.m_DeploymentServiceInstanceCount << endl;
        os << "\tDeploymentSettings:\t" << row.m_DeploymentSettings << endl;
        os << "\tDeploymentStatus:\t" << row.m_DeploymentStatus << endl;
        os << "\tDeploymentSupportInfoLastUpdated:\t" << row.m_DeploymentSupportInfoLastUpdated << endl;
        os << "\tDeploymentTransitionStatus:\t" << row.m_DeploymentTransitionStatus << endl;
        os << "\tDeploymentUpdateInProgress:\t" << row.m_DeploymentUpdateInProgress << endl;
        os << "\tDeploymentUpdateType:\t" << row.m_DeploymentUpdateType << endl;
        os << "\tDeploymentVIP:\t" << row.m_DeploymentVIP << endl;
        os << "\tDeploymentVIPIPv6:\t" << row.m_DeploymentVIPIPv6 << endl;
        os << "\tDeploymentWeightedNumberOfExtraSmallRoleInstances:\t" << row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances << endl;
        os << "\tDeploymentWeightedNumberOfRoleInstances:\t" << row.m_DeploymentWeightedNumberOfRoleInstances << endl;
        os << "\tFqdnSuffix:\t" << row.m_FqdnSuffix << endl;
        os << "\tIS_Current:\t" << row.m_IS_Current << endl;
        os << "\tMigratedFrom:\t" << row.m_MigratedFrom << endl;
        os << "\tPackageRequiredFeatures:\t" << row.m_PackageRequiredFeatures << endl;
        os << "\tPersistentVMs:\t" << row.m_PersistentVMs << endl;
        os << "\tRoleOsMap:\t" << row.m_RoleOsMap << endl;
        os << "\tSCD_EndDate:\t" << row.m_SCD_EndDate << endl;
        os << "\tSCD_StartDate:\t" << row.m_SCD_StartDate << endl;
        os << "\tSdkVersion:\t" << row.m_SdkVersion << endl;
        os << "\tTimeMigrated:\t" << row.m_TimeMigrated << endl;
        os << "\tendpoint:\t" << row.m_endpoint << endl;
        os << "\tSourceTableName:\t" << row.m_SourceTableName << endl;
        os << "\tAuditCreateDate:\t" << row.m_AuditCreateDate << endl;
        os << "\tAuditUpdateDate:\t" << row.m_AuditUpdateDate << endl;
        return os;
    }
#endif // defined(SCOPE_DEBUG)


    class Process_1_Data0
    {
    public:
        FString m_SubscriptionGUID;
        FString m_DeploymentGUID;
        FString m_DeploymentName;
        NativeNullable<ScopeDateTime> m_DeploymentCreateTimestamp;
        FString m_HostedServiceName;
        FString m_FabricGeoId;
        FString m_DeploymentType;
        NativeNullable<int> m_IsSystemDeployment;
        NativeNullable<ScopeDateTime> m_DeploymentCSSInfoLastUpdated;
        NativeNullable<int> m_DeploymentCurrentUpdateDomain;
        NativeNullable<int> m_DeploymentCurrentUpgradeDomain;
        NativeNullable<int> m_DeploymentCurrentUpgradeDomainState;
        FString m_DeploymentDescription;
        FString m_DeploymentDNSGuid;
        FString m_DeploymentDNSName;
        FString m_DeploymentFabricTenantStatus;
        FString m_DeploymentGroup;
        FString m_DeploymentHost;
        FString m_DeploymentInputEndpoints;
        FString m_DeploymentKind;
        FString m_DeploymentLabel;
        FString m_DeploymentLastChangingOperationId;
        NativeNullable<ScopeDateTime> m_DeploymentLastChangingOperationStarted;
        NativeNullable<ScopeDateTime> m_DeploymentLastServiceHealingTime;
        NativeNullable<ScopeDateTime> m_DeploymentLastUpdated;
        NativeNullable<bool> m_DeploymentLastVipSwapFailed;
        NativeNullable<ScopeDateTime> m_DeploymentLastVipSwapFailedTime;
        NativeNullable<int> m_DeploymentNumUpgradeDomains;
        FString m_DeploymentOsUpgradePolicy;
        FString m_DeploymentOsVersion;
        FString m_DeploymentProgressStatus;
        FString m_DeploymentRoleInstanceDetails;
        FString m_DeploymentRoleObjects;
        FString m_DeploymentRoles;
        NativeNullable<ScopeDateTime> m_DeploymentRolesCSSInfoLastUpdated;
        NativeNullable<ScopeDateTime> m_DeploymentRolesLastUpdated;
        NativeNullable<ScopeDateTime> m_DeploymentRolesSupportInfoLastUpdated;
        FString m_DeploymentRoleToUpgrade;
        NativeNullable<bool> m_DeploymentServiceHealingEnabled;
        NativeNullable<int> m_DeploymentServiceInstanceCount;
        FString m_DeploymentSettings;
        FString m_DeploymentStatus;
        NativeNullable<ScopeDateTime> m_DeploymentSupportInfoLastUpdated;
        FString m_DeploymentTransitionStatus;
        NativeNullable<bool> m_DeploymentUpdateInProgress;
        FString m_DeploymentUpdateType;
        FString m_DeploymentVIP;
        FString m_DeploymentVIPIPv6;
        NativeNullable<int> m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
        NativeNullable<int> m_DeploymentWeightedNumberOfRoleInstances;
        FString m_FqdnSuffix;
        NativeNullable<bool> m_IS_Current;
        FString m_MigratedFrom;
        FString m_PackageRequiredFeatures;
        FString m_PersistentVMs;
        FString m_RoleOsMap;
        NativeNullable<ScopeDateTime> m_SCD_EndDate;
        NativeNullable<ScopeDateTime> m_SCD_StartDate;
        FString m_SdkVersion;
        NativeNullable<ScopeDateTime> m_TimeMigrated;
        FString m_endpoint;
        FString m_SourceTableName;
        FString m_AuditCreateDate;
        FString m_AuditUpdateDate;
        ScopeDateTime m___date;
        Process_1_Data0();
        Process_1_Data0(const Process_1_Data0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        Process_1_Data0(const Process_1_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);



        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, Process_1_Data0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, Process_1_Data0 & row)
    {
        os << "\tSubscriptionGUID:\t" << row.m_SubscriptionGUID << endl;
        os << "\tDeploymentGUID:\t" << row.m_DeploymentGUID << endl;
        os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
        os << "\tDeploymentCreateTimestamp:\t" << row.m_DeploymentCreateTimestamp << endl;
        os << "\tHostedServiceName:\t" << row.m_HostedServiceName << endl;
        os << "\tFabricGeoId:\t" << row.m_FabricGeoId << endl;
        os << "\tDeploymentType:\t" << row.m_DeploymentType << endl;
        os << "\tIsSystemDeployment:\t" << row.m_IsSystemDeployment << endl;
        os << "\tDeploymentCSSInfoLastUpdated:\t" << row.m_DeploymentCSSInfoLastUpdated << endl;
        os << "\tDeploymentCurrentUpdateDomain:\t" << row.m_DeploymentCurrentUpdateDomain << endl;
        os << "\tDeploymentCurrentUpgradeDomain:\t" << row.m_DeploymentCurrentUpgradeDomain << endl;
        os << "\tDeploymentCurrentUpgradeDomainState:\t" << row.m_DeploymentCurrentUpgradeDomainState << endl;
        os << "\tDeploymentDescription:\t" << row.m_DeploymentDescription << endl;
        os << "\tDeploymentDNSGuid:\t" << row.m_DeploymentDNSGuid << endl;
        os << "\tDeploymentDNSName:\t" << row.m_DeploymentDNSName << endl;
        os << "\tDeploymentFabricTenantStatus:\t" << row.m_DeploymentFabricTenantStatus << endl;
        os << "\tDeploymentGroup:\t" << row.m_DeploymentGroup << endl;
        os << "\tDeploymentHost:\t" << row.m_DeploymentHost << endl;
        os << "\tDeploymentInputEndpoints:\t" << row.m_DeploymentInputEndpoints << endl;
        os << "\tDeploymentKind:\t" << row.m_DeploymentKind << endl;
        os << "\tDeploymentLabel:\t" << row.m_DeploymentLabel << endl;
        os << "\tDeploymentLastChangingOperationId:\t" << row.m_DeploymentLastChangingOperationId << endl;
        os << "\tDeploymentLastChangingOperationStarted:\t" << row.m_DeploymentLastChangingOperationStarted << endl;
        os << "\tDeploymentLastServiceHealingTime:\t" << row.m_DeploymentLastServiceHealingTime << endl;
        os << "\tDeploymentLastUpdated:\t" << row.m_DeploymentLastUpdated << endl;
        os << "\tDeploymentLastVipSwapFailed:\t" << row.m_DeploymentLastVipSwapFailed << endl;
        os << "\tDeploymentLastVipSwapFailedTime:\t" << row.m_DeploymentLastVipSwapFailedTime << endl;
        os << "\tDeploymentNumUpgradeDomains:\t" << row.m_DeploymentNumUpgradeDomains << endl;
        os << "\tDeploymentOsUpgradePolicy:\t" << row.m_DeploymentOsUpgradePolicy << endl;
        os << "\tDeploymentOsVersion:\t" << row.m_DeploymentOsVersion << endl;
        os << "\tDeploymentProgressStatus:\t" << row.m_DeploymentProgressStatus << endl;
        os << "\tDeploymentRoleInstanceDetails:\t" << row.m_DeploymentRoleInstanceDetails << endl;
        os << "\tDeploymentRoleObjects:\t" << row.m_DeploymentRoleObjects << endl;
        os << "\tDeploymentRoles:\t" << row.m_DeploymentRoles << endl;
        os << "\tDeploymentRolesCSSInfoLastUpdated:\t" << row.m_DeploymentRolesCSSInfoLastUpdated << endl;
        os << "\tDeploymentRolesLastUpdated:\t" << row.m_DeploymentRolesLastUpdated << endl;
        os << "\tDeploymentRolesSupportInfoLastUpdated:\t" << row.m_DeploymentRolesSupportInfoLastUpdated << endl;
        os << "\tDeploymentRoleToUpgrade:\t" << row.m_DeploymentRoleToUpgrade << endl;
        os << "\tDeploymentServiceHealingEnabled:\t" << row.m_DeploymentServiceHealingEnabled << endl;
        os << "\tDeploymentServiceInstanceCount:\t" << row.m_DeploymentServiceInstanceCount << endl;
        os << "\tDeploymentSettings:\t" << row.m_DeploymentSettings << endl;
        os << "\tDeploymentStatus:\t" << row.m_DeploymentStatus << endl;
        os << "\tDeploymentSupportInfoLastUpdated:\t" << row.m_DeploymentSupportInfoLastUpdated << endl;
        os << "\tDeploymentTransitionStatus:\t" << row.m_DeploymentTransitionStatus << endl;
        os << "\tDeploymentUpdateInProgress:\t" << row.m_DeploymentUpdateInProgress << endl;
        os << "\tDeploymentUpdateType:\t" << row.m_DeploymentUpdateType << endl;
        os << "\tDeploymentVIP:\t" << row.m_DeploymentVIP << endl;
        os << "\tDeploymentVIPIPv6:\t" << row.m_DeploymentVIPIPv6 << endl;
        os << "\tDeploymentWeightedNumberOfExtraSmallRoleInstances:\t" << row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances << endl;
        os << "\tDeploymentWeightedNumberOfRoleInstances:\t" << row.m_DeploymentWeightedNumberOfRoleInstances << endl;
        os << "\tFqdnSuffix:\t" << row.m_FqdnSuffix << endl;
        os << "\tIS_Current:\t" << row.m_IS_Current << endl;
        os << "\tMigratedFrom:\t" << row.m_MigratedFrom << endl;
        os << "\tPackageRequiredFeatures:\t" << row.m_PackageRequiredFeatures << endl;
        os << "\tPersistentVMs:\t" << row.m_PersistentVMs << endl;
        os << "\tRoleOsMap:\t" << row.m_RoleOsMap << endl;
        os << "\tSCD_EndDate:\t" << row.m_SCD_EndDate << endl;
        os << "\tSCD_StartDate:\t" << row.m_SCD_StartDate << endl;
        os << "\tSdkVersion:\t" << row.m_SdkVersion << endl;
        os << "\tTimeMigrated:\t" << row.m_TimeMigrated << endl;
        os << "\tendpoint:\t" << row.m_endpoint << endl;
        os << "\tSourceTableName:\t" << row.m_SourceTableName << endl;
        os << "\tAuditCreateDate:\t" << row.m_AuditCreateDate << endl;
        os << "\tAuditUpdateDate:\t" << row.m_AuditUpdateDate << endl;
        os << "\t__date:\t" << row.m___date << endl;
        return os;
    }
#endif // defined(SCOPE_DEBUG)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

//}

#if defined(COMPILE_NATIVE)
    template<> 
    class BinaryExtractPolicy<PartitionSchema_GetSStream_0>
    {
    public:
        static bool Deserialize(BinaryInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
                if (b==0)
                {
                    input->Read(row.m_DeploymentGUID);
                    input->Read(row.m_SubscriptionGUID);
                    input->Read(row.m_endpoint);
                }
                else
                {
                    char ___masking___[1];
                    ___masking___[0] = b;
                    if ((___masking___[0] & 2 ) != 2)
                    {
                        input->Read(row.m_DeploymentGUID);
                    }
                    else
                    {
                        row.m_DeploymentGUID.SetNull();
                    }
                    if ((___masking___[0] & 4 ) != 4)
                    {
                        input->Read(row.m_SubscriptionGUID);
                    }
                    else
                    {
                        row.m_SubscriptionGUID.SetNull();
                    }
                    if ((___masking___[0] & 8 ) != 8)
                    {
                        input->Read(row.m_endpoint);
                    }
                    else
                    {
                        row.m_endpoint.SetNull();
                    }
                }
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
        static bool DeserializeKeyForSS(MemoryInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
                if (b==0)
                {
                    input->Read(row.m_DeploymentGUID);
                    input->Read(row.m_SubscriptionGUID);
                    input->Read(row.m_endpoint);
                }
                else
                {
                    char ___masking___[1];
                    input->Read(___masking___[0]); 
                    if ((___masking___[0] & 1 ) != 1)
                    {
                        input->Read(row.m_DeploymentGUID);
                    }
                    else
                    {
                        row.m_DeploymentGUID.SetNull();
                    }
                    if ((___masking___[0] & 2 ) != 2)
                    {
                        input->Read(row.m_SubscriptionGUID);
                    }
                    else
                    {
                        row.m_SubscriptionGUID.SetNull();
                    }
                    if ((___masking___[0] & 4 ) != 4)
                    {
                        input->Read(row.m_endpoint);
                    }
                    else
                    {
                        row.m_endpoint.SetNull();
                    }
                }
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
        static void DeserializeKey(ResourceInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            char type = 0, null = 0;
                input->Read(type);
                SCOPE_ASSERT(type != 34 && type != 35);
                input->Read(null);
                if (null)
                {
                    row.m_DeploymentGUID.SetNull();
                }
                else
                {
                    input->Read(row.m_DeploymentGUID);
                }
                input->Read(type);
                SCOPE_ASSERT(type != 34 && type != 35);
                input->Read(null);
                if (null)
                {
                    row.m_SubscriptionGUID.SetNull();
                }
                else
                {
                    input->Read(row.m_SubscriptionGUID);
                }
                input->Read(type);
                SCOPE_ASSERT(type != 34 && type != 35);
                input->Read(null);
                if (null)
                {
                    row.m_endpoint.SetNull();
                }
                else
                {
                    input->Read(row.m_endpoint);
                }
        }
        static void DeserializePartitionSpec(ResourceInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            char ___masking___[1];
            input->Read(___masking___); 
            if ((___masking___[0] & 1 ) != 1)
            {
                input->Read(row.m_DeploymentGUID);
            }
            else
            {
                row.m_DeploymentGUID.SetNull();
            }
            if ((___masking___[0] & 2 ) != 2)
            {
                input->Read(row.m_SubscriptionGUID);
            }
            else
            {
                row.m_SubscriptionGUID.SetNull();
            }
            if ((___masking___[0] & 4 ) != 4)
            {
                input->Read(row.m_endpoint);
            }
            else
            {
                row.m_endpoint.SetNull();
            }
        }

    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class BinaryOutputPolicy<PartitionSchema_GetSStream_0>
    {
    public:
        static void Serialize(BinaryOutputStream * output, PartitionSchema_GetSStream_0 & row)
        {
            char b = 0;
            char ___masking___[1];
            ___masking___[0] = 1;
            bool hasNull = false;
            if (row.m_DeploymentGUID.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 2;
            }
            if (row.m_SubscriptionGUID.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 4;
            }
            if (row.m_endpoint.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 8;
            }
            if (hasNull)
            {
                output->Write(___masking___[0]);
            }
            else
            {
                output->Write(b);
            }
            if (!row.m_DeploymentGUID.IsNull())
            {
                output->Write(row.m_DeploymentGUID);
            }
            if (!row.m_SubscriptionGUID.IsNull())
            {
                output->Write(row.m_SubscriptionGUID);
            }
            if (!row.m_endpoint.IsNull())
            {
                output->Write(row.m_endpoint);
            }
        }
        static void SerializeKeyForSS(MemoryOutputStream* output, const PartitionSchema_GetSStream_0 & row)        
        {
            char weight = 0; // KeyWeight.Normal
            output->Write(weight);

            char b = 0;
            char ___masking___[1];
            memset(___masking___, 0, sizeof(___masking___));

            bool hasNull = false;
            if (row.m_DeploymentGUID.IsNull())
            {
                hasNull = true;
                b = 1;
                ___masking___[0] |= 1;
            }
            if (row.m_SubscriptionGUID.IsNull())
            {
                hasNull = true;
                b = 1;
                ___masking___[0] |= 2;
            }
            if (row.m_endpoint.IsNull())
            {
                hasNull = true;
                b = 1;
                ___masking___[0] |= 4;
            }
            output->Write(b);

            if (hasNull)
            {
                output->Write(___masking___, sizeof(___masking___));
            }
            if (!row.m_DeploymentGUID.IsNull())
            {
                output->Write(row.m_DeploymentGUID);
            }
            if (!row.m_SubscriptionGUID.IsNull())
            {
                output->Write(row.m_SubscriptionGUID);
            }
            if (!row.m_endpoint.IsNull())
            {
                output->Write(row.m_endpoint);
            }
        }
    };

#pragma region Schema Constructors

    INLINE PartitionSchema_GetSStream_0::PartitionSchema_GetSStream_0()
    {
    }
    INLINE PartitionSchema_GetSStream_0::PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, IncrementalAllocator * alloc) :
            m_DeploymentGUID(c.m_DeploymentGUID, alloc),
            m_SubscriptionGUID(c.m_SubscriptionGUID, alloc),
            m_endpoint(c.m_endpoint, alloc)
    {
    }


    INLINE GetSStream_0_Data0::GetSStream_0_Data0()
    {
    }


    INLINE Process_1_Data0::Process_1_Data0()
    {
    }
    INLINE Process_1_Data0::Process_1_Data0(const Process_1_Data0 & c, IncrementalAllocator * alloc) :
            m_SubscriptionGUID(c.m_SubscriptionGUID, alloc),
            m_DeploymentGUID(c.m_DeploymentGUID, alloc),
            m_DeploymentName(c.m_DeploymentName, alloc),
            m_DeploymentCreateTimestamp(c.m_DeploymentCreateTimestamp),
            m_HostedServiceName(c.m_HostedServiceName, alloc),
            m_FabricGeoId(c.m_FabricGeoId, alloc),
            m_DeploymentType(c.m_DeploymentType, alloc),
            m_IsSystemDeployment(c.m_IsSystemDeployment),
            m_DeploymentCSSInfoLastUpdated(c.m_DeploymentCSSInfoLastUpdated),
            m_DeploymentCurrentUpdateDomain(c.m_DeploymentCurrentUpdateDomain),
            m_DeploymentCurrentUpgradeDomain(c.m_DeploymentCurrentUpgradeDomain),
            m_DeploymentCurrentUpgradeDomainState(c.m_DeploymentCurrentUpgradeDomainState),
            m_DeploymentDescription(c.m_DeploymentDescription, alloc),
            m_DeploymentDNSGuid(c.m_DeploymentDNSGuid, alloc),
            m_DeploymentDNSName(c.m_DeploymentDNSName, alloc),
            m_DeploymentFabricTenantStatus(c.m_DeploymentFabricTenantStatus, alloc),
            m_DeploymentGroup(c.m_DeploymentGroup, alloc),
            m_DeploymentHost(c.m_DeploymentHost, alloc),
            m_DeploymentInputEndpoints(c.m_DeploymentInputEndpoints, alloc),
            m_DeploymentKind(c.m_DeploymentKind, alloc),
            m_DeploymentLabel(c.m_DeploymentLabel, alloc),
            m_DeploymentLastChangingOperationId(c.m_DeploymentLastChangingOperationId, alloc),
            m_DeploymentLastChangingOperationStarted(c.m_DeploymentLastChangingOperationStarted),
            m_DeploymentLastServiceHealingTime(c.m_DeploymentLastServiceHealingTime),
            m_DeploymentLastUpdated(c.m_DeploymentLastUpdated),
            m_DeploymentLastVipSwapFailed(c.m_DeploymentLastVipSwapFailed),
            m_DeploymentLastVipSwapFailedTime(c.m_DeploymentLastVipSwapFailedTime),
            m_DeploymentNumUpgradeDomains(c.m_DeploymentNumUpgradeDomains),
            m_DeploymentOsUpgradePolicy(c.m_DeploymentOsUpgradePolicy, alloc),
            m_DeploymentOsVersion(c.m_DeploymentOsVersion, alloc),
            m_DeploymentProgressStatus(c.m_DeploymentProgressStatus, alloc),
            m_DeploymentRoleInstanceDetails(c.m_DeploymentRoleInstanceDetails, alloc),
            m_DeploymentRoleObjects(c.m_DeploymentRoleObjects, alloc),
            m_DeploymentRoles(c.m_DeploymentRoles, alloc),
            m_DeploymentRolesCSSInfoLastUpdated(c.m_DeploymentRolesCSSInfoLastUpdated),
            m_DeploymentRolesLastUpdated(c.m_DeploymentRolesLastUpdated),
            m_DeploymentRolesSupportInfoLastUpdated(c.m_DeploymentRolesSupportInfoLastUpdated),
            m_DeploymentRoleToUpgrade(c.m_DeploymentRoleToUpgrade, alloc),
            m_DeploymentServiceHealingEnabled(c.m_DeploymentServiceHealingEnabled),
            m_DeploymentServiceInstanceCount(c.m_DeploymentServiceInstanceCount),
            m_DeploymentSettings(c.m_DeploymentSettings, alloc),
            m_DeploymentStatus(c.m_DeploymentStatus, alloc),
            m_DeploymentSupportInfoLastUpdated(c.m_DeploymentSupportInfoLastUpdated),
            m_DeploymentTransitionStatus(c.m_DeploymentTransitionStatus, alloc),
            m_DeploymentUpdateInProgress(c.m_DeploymentUpdateInProgress),
            m_DeploymentUpdateType(c.m_DeploymentUpdateType, alloc),
            m_DeploymentVIP(c.m_DeploymentVIP, alloc),
            m_DeploymentVIPIPv6(c.m_DeploymentVIPIPv6, alloc),
            m_DeploymentWeightedNumberOfExtraSmallRoleInstances(c.m_DeploymentWeightedNumberOfExtraSmallRoleInstances),
            m_DeploymentWeightedNumberOfRoleInstances(c.m_DeploymentWeightedNumberOfRoleInstances),
            m_FqdnSuffix(c.m_FqdnSuffix, alloc),
            m_IS_Current(c.m_IS_Current),
            m_MigratedFrom(c.m_MigratedFrom, alloc),
            m_PackageRequiredFeatures(c.m_PackageRequiredFeatures, alloc),
            m_PersistentVMs(c.m_PersistentVMs, alloc),
            m_RoleOsMap(c.m_RoleOsMap, alloc),
            m_SCD_EndDate(c.m_SCD_EndDate),
            m_SCD_StartDate(c.m_SCD_StartDate),
            m_SdkVersion(c.m_SdkVersion, alloc),
            m_TimeMigrated(c.m_TimeMigrated),
            m_endpoint(c.m_endpoint, alloc),
            m_SourceTableName(c.m_SourceTableName, alloc),
            m_AuditCreateDate(c.m_AuditCreateDate, alloc),
            m_AuditUpdateDate(c.m_AuditUpdateDate, alloc),
            m___date(c.m___date)
    {
    }

#pragma endregion Schema Constructors
#pragma hdrstop
#if defined(COMPILE_INIT_SHUTDOWN)
#if defined(COMPILE_MANAGED)
extern "C" __declspec(dllexport) void __stdcall InitVertexManaged(std::string * argv, int argc)
{
#if defined(FORCEMANAGEDDATETIMESER)
    ScopeEngine::ScopeDateTime::ForceManagedSerialization = true;
#endif
    ScopeEngine::InitializeScopeRuntime(argv, argc);
}
extern "C" __declspec(dllexport) void __stdcall ShutdownVertexManaged(UINT64& peakManagedMemory)
{
    ScopeEngine::FinalizeScopeRuntime(peakManagedMemory);
}
#endif
#if defined(COMPILE_NATIVE)
ScopeEngine::ScopeCEPCheckpointManager* g_scopeCEPCheckpointManager = NULL;
extern "C" __declspec(dllexport) void __stdcall InitVertexNative(VertexExecutionInfo * vertexExecutionInfo)
{
#if defined(FORCEMANAGEDDATETIMESER)
    ScopeEngine::ScopeDateTime::ForceManagedSerialization = true;
#endif
}
extern "C" __declspec(dllexport) void __stdcall SV_CopyThrough_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
{
    SCOPE_ASSERT(inputCnt == 1 && outputCnt == 1);
    IOManager::CopyStream(IOManager::GetGlobal()->GetDevice(inputs[0].inputFileName), IOManager::GetGlobal()->GetDevice(outputFileNames[0]));
}
#endif
#endif
#pragma region SV1_Extract_Combine
#if defined(COMPILE_SV1_EXTRACT_COMBINE) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_0, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_2, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_4, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_6, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_8, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_10, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_12, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_14, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_16, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_18, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_20, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_22, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_24, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_26, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_28, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_30, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_32, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_34, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_36, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_38, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_40, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_42, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_44, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_46, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RangePartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 64;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                0,
                0,
                0,
                // Hi Key
                0,
                0,
                0,
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 3 + 3;

        static UINT* SortKeys()
        {
            static UINT keys[] = 
                {
                1,
                0,
                60,
                };
            return keys;
        }
        static const UINT m_sortKeysCnt = 3;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[0].IsNull())
                {
                    row.m_SubscriptionGUID.SetNull();
                    iters[0].IncrementNull();
                }
                else
                {
                    row.m_SubscriptionGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    row.m_DeploymentGUID.SetNull();
                    iters[1].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[1].DataRaw(), (int)iters[1].Length(), alloc);
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                row.m_DeploymentCreateTimestamp.SetNull();
                iters[3].IncrementNull();
                }
                else
                {
                row.m_DeploymentCreateTimestamp = iters[3].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    row.m_HostedServiceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_HostedServiceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_FabricGeoId.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_FabricGeoId.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_DeploymentType.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_DeploymentType.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                row.m_IsSystemDeployment.SetNull();
                iters[7].IncrementNull();
                }
                else
                {
                row.m_IsSystemDeployment = iters[7].Data<NativeNullable<int>::ValueType>();
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                row.m_DeploymentCSSInfoLastUpdated.SetNull();
                iters[8].IncrementNull();
                }
                else
                {
                row.m_DeploymentCSSInfoLastUpdated = iters[8].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                row.m_DeploymentCurrentUpdateDomain.SetNull();
                iters[9].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpdateDomain = iters[9].Data<NativeNullable<int>::ValueType>();
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomain.SetNull();
                iters[10].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomain = iters[10].Data<NativeNullable<int>::ValueType>();
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                row.m_DeploymentCurrentUpgradeDomainState.SetNull();
                iters[11].IncrementNull();
                }
                else
                {
                row.m_DeploymentCurrentUpgradeDomainState = iters[11].Data<NativeNullable<int>::ValueType>();
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    row.m_DeploymentDescription.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDescription.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_DeploymentDNSGuid.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSGuid.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_DeploymentDNSName.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_DeploymentDNSName.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_DeploymentFabricTenantStatus.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_DeploymentFabricTenantStatus.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_DeploymentGroup.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_DeploymentGroup.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_DeploymentHost.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_DeploymentHost.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    row.m_DeploymentInputEndpoints.SetNull();
                    iters[18].IncrementNull();
                }
                else
                {
                    row.m_DeploymentInputEndpoints.CopyFromNotNull((FString::PointerType)iters[18].DataRaw(), (int)iters[18].Length(), alloc);
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    row.m_DeploymentKind.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_DeploymentKind.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_DeploymentLabel.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLabel.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    row.m_DeploymentLastChangingOperationId.SetNull();
                    iters[21].IncrementNull();
                }
                else
                {
                    row.m_DeploymentLastChangingOperationId.CopyFromNotNull((FString::PointerType)iters[21].DataRaw(), (int)iters[21].Length(), alloc);
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                row.m_DeploymentLastChangingOperationStarted.SetNull();
                iters[22].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastChangingOperationStarted = iters[22].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                row.m_DeploymentLastServiceHealingTime.SetNull();
                iters[23].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastServiceHealingTime = iters[23].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                row.m_DeploymentLastUpdated.SetNull();
                iters[24].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastUpdated = iters[24].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                row.m_DeploymentLastVipSwapFailed.SetNull();
                iters[25].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailed = iters[25].Data<NativeNullable<bool>::ValueType>();
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                row.m_DeploymentLastVipSwapFailedTime.SetNull();
                iters[26].IncrementNull();
                }
                else
                {
                row.m_DeploymentLastVipSwapFailedTime = iters[26].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                row.m_DeploymentNumUpgradeDomains.SetNull();
                iters[27].IncrementNull();
                }
                else
                {
                row.m_DeploymentNumUpgradeDomains = iters[27].Data<NativeNullable<int>::ValueType>();
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    row.m_DeploymentOsUpgradePolicy.SetNull();
                    iters[28].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsUpgradePolicy.CopyFromNotNull((FString::PointerType)iters[28].DataRaw(), (int)iters[28].Length(), alloc);
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    row.m_DeploymentOsVersion.SetNull();
                    iters[29].IncrementNull();
                }
                else
                {
                    row.m_DeploymentOsVersion.CopyFromNotNull((FString::PointerType)iters[29].DataRaw(), (int)iters[29].Length(), alloc);
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    row.m_DeploymentProgressStatus.SetNull();
                    iters[30].IncrementNull();
                }
                else
                {
                    row.m_DeploymentProgressStatus.CopyFromNotNull((FString::PointerType)iters[30].DataRaw(), (int)iters[30].Length(), alloc);
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    row.m_DeploymentRoleInstanceDetails.SetNull();
                    iters[31].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleInstanceDetails.CopyFromNotNull((FString::PointerType)iters[31].DataRaw(), (int)iters[31].Length(), alloc);
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    row.m_DeploymentRoleObjects.SetNull();
                    iters[32].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleObjects.CopyFromNotNull((FString::PointerType)iters[32].DataRaw(), (int)iters[32].Length(), alloc);
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    row.m_DeploymentRoles.SetNull();
                    iters[33].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoles.CopyFromNotNull((FString::PointerType)iters[33].DataRaw(), (int)iters[33].Length(), alloc);
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                row.m_DeploymentRolesCSSInfoLastUpdated.SetNull();
                iters[34].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesCSSInfoLastUpdated = iters[34].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                row.m_DeploymentRolesLastUpdated.SetNull();
                iters[35].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesLastUpdated = iters[35].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                row.m_DeploymentRolesSupportInfoLastUpdated.SetNull();
                iters[36].IncrementNull();
                }
                else
                {
                row.m_DeploymentRolesSupportInfoLastUpdated = iters[36].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    row.m_DeploymentRoleToUpgrade.SetNull();
                    iters[37].IncrementNull();
                }
                else
                {
                    row.m_DeploymentRoleToUpgrade.CopyFromNotNull((FString::PointerType)iters[37].DataRaw(), (int)iters[37].Length(), alloc);
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                row.m_DeploymentServiceHealingEnabled.SetNull();
                iters[38].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceHealingEnabled = iters[38].Data<NativeNullable<bool>::ValueType>();
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                row.m_DeploymentServiceInstanceCount.SetNull();
                iters[39].IncrementNull();
                }
                else
                {
                row.m_DeploymentServiceInstanceCount = iters[39].Data<NativeNullable<int>::ValueType>();
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    row.m_DeploymentSettings.SetNull();
                    iters[40].IncrementNull();
                }
                else
                {
                    row.m_DeploymentSettings.CopyFromNotNull((FString::PointerType)iters[40].DataRaw(), (int)iters[40].Length(), alloc);
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    row.m_DeploymentStatus.SetNull();
                    iters[41].IncrementNull();
                }
                else
                {
                    row.m_DeploymentStatus.CopyFromNotNull((FString::PointerType)iters[41].DataRaw(), (int)iters[41].Length(), alloc);
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                row.m_DeploymentSupportInfoLastUpdated.SetNull();
                iters[42].IncrementNull();
                }
                else
                {
                row.m_DeploymentSupportInfoLastUpdated = iters[42].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    row.m_DeploymentTransitionStatus.SetNull();
                    iters[43].IncrementNull();
                }
                else
                {
                    row.m_DeploymentTransitionStatus.CopyFromNotNull((FString::PointerType)iters[43].DataRaw(), (int)iters[43].Length(), alloc);
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                row.m_DeploymentUpdateInProgress.SetNull();
                iters[44].IncrementNull();
                }
                else
                {
                row.m_DeploymentUpdateInProgress = iters[44].Data<NativeNullable<bool>::ValueType>();
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    row.m_DeploymentUpdateType.SetNull();
                    iters[45].IncrementNull();
                }
                else
                {
                    row.m_DeploymentUpdateType.CopyFromNotNull((FString::PointerType)iters[45].DataRaw(), (int)iters[45].Length(), alloc);
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    row.m_DeploymentVIP.SetNull();
                    iters[46].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIP.CopyFromNotNull((FString::PointerType)iters[46].DataRaw(), (int)iters[46].Length(), alloc);
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    row.m_DeploymentVIPIPv6.SetNull();
                    iters[47].IncrementNull();
                }
                else
                {
                    row.m_DeploymentVIPIPv6.CopyFromNotNull((FString::PointerType)iters[47].DataRaw(), (int)iters[47].Length(), alloc);
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.SetNull();
                iters[48].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = iters[48].Data<NativeNullable<int>::ValueType>();
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                row.m_DeploymentWeightedNumberOfRoleInstances.SetNull();
                iters[49].IncrementNull();
                }
                else
                {
                row.m_DeploymentWeightedNumberOfRoleInstances = iters[49].Data<NativeNullable<int>::ValueType>();
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    row.m_FqdnSuffix.SetNull();
                    iters[50].IncrementNull();
                }
                else
                {
                    row.m_FqdnSuffix.CopyFromNotNull((FString::PointerType)iters[50].DataRaw(), (int)iters[50].Length(), alloc);
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                row.m_IS_Current.SetNull();
                iters[51].IncrementNull();
                }
                else
                {
                row.m_IS_Current = iters[51].Data<NativeNullable<bool>::ValueType>();
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    row.m_MigratedFrom.SetNull();
                    iters[52].IncrementNull();
                }
                else
                {
                    row.m_MigratedFrom.CopyFromNotNull((FString::PointerType)iters[52].DataRaw(), (int)iters[52].Length(), alloc);
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    row.m_PackageRequiredFeatures.SetNull();
                    iters[53].IncrementNull();
                }
                else
                {
                    row.m_PackageRequiredFeatures.CopyFromNotNull((FString::PointerType)iters[53].DataRaw(), (int)iters[53].Length(), alloc);
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    row.m_PersistentVMs.SetNull();
                    iters[54].IncrementNull();
                }
                else
                {
                    row.m_PersistentVMs.CopyFromNotNull((FString::PointerType)iters[54].DataRaw(), (int)iters[54].Length(), alloc);
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    row.m_RoleOsMap.SetNull();
                    iters[55].IncrementNull();
                }
                else
                {
                    row.m_RoleOsMap.CopyFromNotNull((FString::PointerType)iters[55].DataRaw(), (int)iters[55].Length(), alloc);
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                row.m_SCD_EndDate.SetNull();
                iters[56].IncrementNull();
                }
                else
                {
                row.m_SCD_EndDate = iters[56].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                row.m_SCD_StartDate.SetNull();
                iters[57].IncrementNull();
                }
                else
                {
                row.m_SCD_StartDate = iters[57].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    row.m_SdkVersion.SetNull();
                    iters[58].IncrementNull();
                }
                else
                {
                    row.m_SdkVersion.CopyFromNotNull((FString::PointerType)iters[58].DataRaw(), (int)iters[58].Length(), alloc);
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                row.m_TimeMigrated.SetNull();
                iters[59].IncrementNull();
                }
                else
                {
                row.m_TimeMigrated = iters[59].Data<NativeNullable<ScopeDateTime>::ValueType>();
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    row.m_endpoint.SetNull();
                    iters[60].IncrementNull();
                }
                else
                {
                    row.m_endpoint.CopyFromNotNull((FString::PointerType)iters[60].DataRaw(), (int)iters[60].Length(), alloc);
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    row.m_SourceTableName.SetNull();
                    iters[61].IncrementNull();
                }
                else
                {
                    row.m_SourceTableName.CopyFromNotNull((FString::PointerType)iters[61].DataRaw(), (int)iters[61].Length(), alloc);
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    row.m_AuditCreateDate.SetNull();
                    iters[62].IncrementNull();
                }
                else
                {
                    row.m_AuditCreateDate.CopyFromNotNull((FString::PointerType)iters[62].DataRaw(), (int)iters[62].Length(), alloc);
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    row.m_AuditUpdateDate.SetNull();
                    iters[63].IncrementNull();
                }
                else
                {
                    row.m_AuditUpdateDate.CopyFromNotNull((FString::PointerType)iters[63].DataRaw(), (int)iters[63].Length(), alloc);
                    iters[63].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[0].IsNull())
                {
                    iters[0].IncrementNull();
                }
                else
                {
                    iters[0].IncrementVariable();
                }
                if (iters[1].IsNull())
                {
                    iters[1].IncrementNull();
                }
                else
                {
                    iters[1].IncrementVariable();
                }
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
                if (iters[3].IsNull())
                {
                iters[3].IncrementNull();
                }
                else
                {
                iters[3].IncrementFixed<8>();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                iters[7].IncrementNull();
                }
                else
                {
                iters[7].IncrementFixed<4>();
                }
                if (iters[8].IsNull())
                {
                iters[8].IncrementNull();
                }
                else
                {
                iters[8].IncrementFixed<8>();
                }
                if (iters[9].IsNull())
                {
                iters[9].IncrementNull();
                }
                else
                {
                iters[9].IncrementFixed<4>();
                }
                if (iters[10].IsNull())
                {
                iters[10].IncrementNull();
                }
                else
                {
                iters[10].IncrementFixed<4>();
                }
                if (iters[11].IsNull())
                {
                iters[11].IncrementNull();
                }
                else
                {
                iters[11].IncrementFixed<4>();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                if (iters[18].IsNull())
                {
                    iters[18].IncrementNull();
                }
                else
                {
                    iters[18].IncrementVariable();
                }
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
                if (iters[21].IsNull())
                {
                    iters[21].IncrementNull();
                }
                else
                {
                    iters[21].IncrementVariable();
                }
                if (iters[22].IsNull())
                {
                iters[22].IncrementNull();
                }
                else
                {
                iters[22].IncrementFixed<8>();
                }
                if (iters[23].IsNull())
                {
                iters[23].IncrementNull();
                }
                else
                {
                iters[23].IncrementFixed<8>();
                }
                if (iters[24].IsNull())
                {
                iters[24].IncrementNull();
                }
                else
                {
                iters[24].IncrementFixed<8>();
                }
                if (iters[25].IsNull())
                {
                iters[25].IncrementNull();
                }
                else
                {
                iters[25].IncrementFixed<1>();
                }
                if (iters[26].IsNull())
                {
                iters[26].IncrementNull();
                }
                else
                {
                iters[26].IncrementFixed<8>();
                }
                if (iters[27].IsNull())
                {
                iters[27].IncrementNull();
                }
                else
                {
                iters[27].IncrementFixed<4>();
                }
                if (iters[28].IsNull())
                {
                    iters[28].IncrementNull();
                }
                else
                {
                    iters[28].IncrementVariable();
                }
                if (iters[29].IsNull())
                {
                    iters[29].IncrementNull();
                }
                else
                {
                    iters[29].IncrementVariable();
                }
                if (iters[30].IsNull())
                {
                    iters[30].IncrementNull();
                }
                else
                {
                    iters[30].IncrementVariable();
                }
                if (iters[31].IsNull())
                {
                    iters[31].IncrementNull();
                }
                else
                {
                    iters[31].IncrementVariable();
                }
                if (iters[32].IsNull())
                {
                    iters[32].IncrementNull();
                }
                else
                {
                    iters[32].IncrementVariable();
                }
                if (iters[33].IsNull())
                {
                    iters[33].IncrementNull();
                }
                else
                {
                    iters[33].IncrementVariable();
                }
                if (iters[34].IsNull())
                {
                iters[34].IncrementNull();
                }
                else
                {
                iters[34].IncrementFixed<8>();
                }
                if (iters[35].IsNull())
                {
                iters[35].IncrementNull();
                }
                else
                {
                iters[35].IncrementFixed<8>();
                }
                if (iters[36].IsNull())
                {
                iters[36].IncrementNull();
                }
                else
                {
                iters[36].IncrementFixed<8>();
                }
                if (iters[37].IsNull())
                {
                    iters[37].IncrementNull();
                }
                else
                {
                    iters[37].IncrementVariable();
                }
                if (iters[38].IsNull())
                {
                iters[38].IncrementNull();
                }
                else
                {
                iters[38].IncrementFixed<1>();
                }
                if (iters[39].IsNull())
                {
                iters[39].IncrementNull();
                }
                else
                {
                iters[39].IncrementFixed<4>();
                }
                if (iters[40].IsNull())
                {
                    iters[40].IncrementNull();
                }
                else
                {
                    iters[40].IncrementVariable();
                }
                if (iters[41].IsNull())
                {
                    iters[41].IncrementNull();
                }
                else
                {
                    iters[41].IncrementVariable();
                }
                if (iters[42].IsNull())
                {
                iters[42].IncrementNull();
                }
                else
                {
                iters[42].IncrementFixed<8>();
                }
                if (iters[43].IsNull())
                {
                    iters[43].IncrementNull();
                }
                else
                {
                    iters[43].IncrementVariable();
                }
                if (iters[44].IsNull())
                {
                iters[44].IncrementNull();
                }
                else
                {
                iters[44].IncrementFixed<1>();
                }
                if (iters[45].IsNull())
                {
                    iters[45].IncrementNull();
                }
                else
                {
                    iters[45].IncrementVariable();
                }
                if (iters[46].IsNull())
                {
                    iters[46].IncrementNull();
                }
                else
                {
                    iters[46].IncrementVariable();
                }
                if (iters[47].IsNull())
                {
                    iters[47].IncrementNull();
                }
                else
                {
                    iters[47].IncrementVariable();
                }
                if (iters[48].IsNull())
                {
                iters[48].IncrementNull();
                }
                else
                {
                iters[48].IncrementFixed<4>();
                }
                if (iters[49].IsNull())
                {
                iters[49].IncrementNull();
                }
                else
                {
                iters[49].IncrementFixed<4>();
                }
                if (iters[50].IsNull())
                {
                    iters[50].IncrementNull();
                }
                else
                {
                    iters[50].IncrementVariable();
                }
                if (iters[51].IsNull())
                {
                iters[51].IncrementNull();
                }
                else
                {
                iters[51].IncrementFixed<1>();
                }
                if (iters[52].IsNull())
                {
                    iters[52].IncrementNull();
                }
                else
                {
                    iters[52].IncrementVariable();
                }
                if (iters[53].IsNull())
                {
                    iters[53].IncrementNull();
                }
                else
                {
                    iters[53].IncrementVariable();
                }
                if (iters[54].IsNull())
                {
                    iters[54].IncrementNull();
                }
                else
                {
                    iters[54].IncrementVariable();
                }
                if (iters[55].IsNull())
                {
                    iters[55].IncrementNull();
                }
                else
                {
                    iters[55].IncrementVariable();
                }
                if (iters[56].IsNull())
                {
                iters[56].IncrementNull();
                }
                else
                {
                iters[56].IncrementFixed<8>();
                }
                if (iters[57].IsNull())
                {
                iters[57].IncrementNull();
                }
                else
                {
                iters[57].IncrementFixed<8>();
                }
                if (iters[58].IsNull())
                {
                    iters[58].IncrementNull();
                }
                else
                {
                    iters[58].IncrementVariable();
                }
                if (iters[59].IsNull())
                {
                iters[59].IncrementNull();
                }
                else
                {
                iters[59].IncrementFixed<8>();
                }
                if (iters[60].IsNull())
                {
                    iters[60].IncrementNull();
                }
                else
                {
                    iters[60].IncrementVariable();
                }
                if (iters[61].IsNull())
                {
                    iters[61].IncrementNull();
                }
                else
                {
                    iters[61].IncrementVariable();
                }
                if (iters[62].IsNull())
                {
                    iters[62].IncrementNull();
                }
                else
                {
                    iters[62].IncrementVariable();
                }
                if (iters[63].IsNull())
                {
                    iters[63].IncrementNull();
                }
                else
                {
                    iters[63].IncrementVariable();
                }
        }
        //lowPredicateData
        static bool LowPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            return ScopeTypeCompare_GreaterEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        //hiPredicateData
        static bool HiPredicate0(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params)
        {
            FString stack_DeploymentGUID;
                if (iters[0].IsNull())
                {
                    stack_DeploymentGUID.SetNull();
                }
                else
                {
                    stack_DeploymentGUID.CopyFromNotNull((FString::PointerType)iters[0].DataRaw(), (int)iters[0].Length(), alloc);
                }
            
            return ScopeTypeCompare_LessEqual(stack_DeploymentGUID, FString("f2e3b3ae14ea44d488f5ec8fb8b4d41f", (UINT)strlen("f2e3b3ae14ea44d488f5ec8fb8b4d41f")));
        }

        static PredFn* PredicatesLow()
        {
            static PredFn predicates[] = 
            {
                LowPredicate0,
            };

            return predicates;
        }

        static PredFn* PredicatesHi()
        {
            static PredFn predicates[] = 
            {
                HiPredicate0,
            };

            return predicates;
        }

        static const UINT m_predicateCnt = 1;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_1 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635697504000000000 /* 6/13/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_1>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_1[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_1[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635697504000000000LL) /* 6/13/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_1>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_3 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635698368000000000 /* 6/14/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_3>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_3[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_3[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635698368000000000LL) /* 6/14/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_3>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_5 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635699232000000000 /* 6/15/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_5>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_5[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_5[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635699232000000000LL) /* 6/15/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_5>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_7 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635700096000000000 /* 6/16/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_7>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_7[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_7[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635700096000000000LL) /* 6/16/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_7>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_9 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635700960000000000 /* 6/17/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_9>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_9[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_9[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635700960000000000LL) /* 6/17/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_9>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_11 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635701824000000000 /* 6/18/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_11>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_11[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_11[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635701824000000000LL) /* 6/18/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_11>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_13 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635702688000000000 /* 6/19/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_13>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_13[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_13[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635702688000000000LL) /* 6/19/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_13>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_15 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635703552000000000 /* 6/20/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_15>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_15[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_15[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635703552000000000LL) /* 6/20/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_15>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_17 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635704416000000000 /* 6/21/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_17>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_17[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_17[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635704416000000000LL) /* 6/21/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_17>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_19 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635705280000000000 /* 6/22/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_19>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_19[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_19[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635705280000000000LL) /* 6/22/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_19>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_21 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635706144000000000 /* 6/23/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_21>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_21[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_21[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635706144000000000LL) /* 6/23/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_21>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_23 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635707008000000000 /* 6/24/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_23>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_23[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_23[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635707008000000000LL) /* 6/24/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_23>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_25 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635707872000000000 /* 6/25/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_25>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_25[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_25[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635707872000000000LL) /* 6/25/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_25>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_27 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635708736000000000 /* 6/26/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_27>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_27[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_27[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635708736000000000LL) /* 6/26/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_27>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_29 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635709600000000000 /* 6/27/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_29>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_29[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_29[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635709600000000000LL) /* 6/27/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_29>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_31 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635710464000000000 /* 6/28/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_31>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_31[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_31[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635710464000000000LL) /* 6/28/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_31>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_33 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635711328000000000 /* 6/29/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_33>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_33[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_33[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635711328000000000LL) /* 6/29/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_33>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_35 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635712192000000000 /* 6/30/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_35>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_35[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_35[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635712192000000000LL) /* 6/30/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_35>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_37 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635713056000000000 /* 7/1/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_37>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_37[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_37[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635713056000000000LL) /* 7/1/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_37>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_39 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635713920000000000 /* 7/2/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_39>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_39[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_39[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635713920000000000LL) /* 7/2/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_39>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_41 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635714784000000000 /* 7/3/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_41>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_41[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_41[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635714784000000000LL) /* 7/3/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_41>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_43 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635715648000000000 /* 7/4/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_43>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_43[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_43[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635715648000000000LL) /* 7/4/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_43>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_45 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635716512000000000 /* 7/5/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_45>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_45[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_45[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635716512000000000LL) /* 7/5/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_45>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    static const char * StringTable_Process_47 [] =
    {
        "SubscriptionGUID",
        "DeploymentGUID",
        "DeploymentName",
        "DeploymentCreateTimestamp",
        "HostedServiceName",
        "FabricGeoId",
        "DeploymentType",
        "IsSystemDeployment",
        "DeploymentCSSInfoLastUpdated",
        "DeploymentCurrentUpdateDomain",
        "DeploymentCurrentUpgradeDomain",
        "DeploymentCurrentUpgradeDomainState",
        "DeploymentDescription",
        "DeploymentDNSGuid",
        "DeploymentDNSName",
        "DeploymentFabricTenantStatus",
        "DeploymentGroup",
        "DeploymentHost",
        "DeploymentInputEndpoints",
        "DeploymentKind",
        "DeploymentLabel",
        "DeploymentLastChangingOperationId",
        "DeploymentLastChangingOperationStarted",
        "DeploymentLastServiceHealingTime",
        "DeploymentLastUpdated",
        "DeploymentLastVipSwapFailed",
        "DeploymentLastVipSwapFailedTime",
        "DeploymentNumUpgradeDomains",
        "DeploymentOsUpgradePolicy",
        "DeploymentOsVersion",
        "DeploymentProgressStatus",
        "DeploymentRoleInstanceDetails",
        "DeploymentRoleObjects",
        "DeploymentRoles",
        "DeploymentRolesCSSInfoLastUpdated",
        "DeploymentRolesLastUpdated",
        "DeploymentRolesSupportInfoLastUpdated",
        "DeploymentRoleToUpgrade",
        "DeploymentServiceHealingEnabled",
        "DeploymentServiceInstanceCount",
        "DeploymentSettings",
        "DeploymentStatus",
        "DeploymentSupportInfoLastUpdated",
        "DeploymentTransitionStatus",
        "DeploymentUpdateInProgress",
        "DeploymentUpdateType",
        "DeploymentVIP",
        "DeploymentVIPIPv6",
        "DeploymentWeightedNumberOfExtraSmallRoleInstances",
        "DeploymentWeightedNumberOfRoleInstances",
        "FqdnSuffix",
        "IS_Current",
        "MigratedFrom",
        "PackageRequiredFeatures",
        "PersistentVMs",
        "RoleOsMap",
        "SCD_EndDate",
        "SCD_StartDate",
        "SdkVersion",
        "TimeMigrated",
        "endpoint",
        "SourceTableName",
        "AuditCreateDate",
        "AuditUpdateDate",
        "System.DateTime.FromBinary(635717376000000000 /* 7/6/2015 12:00:00 AM */)",
        "\"*** After Last Expression ***\"",
    };
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename Process_1_Data0, UID_Process_47>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, Process_1_Data0 & output, IncrementalAllocator * alloc)
        {
            InitializeStatics();
            int exceptionIndex = 0;
            try
            {
                output.m_SubscriptionGUID = input.m_SubscriptionGUID;
                exceptionIndex++;
                output.m_DeploymentGUID = input.m_DeploymentGUID;
                exceptionIndex++;
                output.m_DeploymentName = input.m_DeploymentName;
                exceptionIndex++;
                output.m_DeploymentCreateTimestamp = input.m_DeploymentCreateTimestamp;
                exceptionIndex++;
                output.m_HostedServiceName = input.m_HostedServiceName;
                exceptionIndex++;
                output.m_FabricGeoId = input.m_FabricGeoId;
                exceptionIndex++;
                output.m_DeploymentType = input.m_DeploymentType;
                exceptionIndex++;
                output.m_IsSystemDeployment = input.m_IsSystemDeployment;
                exceptionIndex++;
                output.m_DeploymentCSSInfoLastUpdated = input.m_DeploymentCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentCurrentUpdateDomain = input.m_DeploymentCurrentUpdateDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomain = input.m_DeploymentCurrentUpgradeDomain;
                exceptionIndex++;
                output.m_DeploymentCurrentUpgradeDomainState = input.m_DeploymentCurrentUpgradeDomainState;
                exceptionIndex++;
                output.m_DeploymentDescription = input.m_DeploymentDescription;
                exceptionIndex++;
                output.m_DeploymentDNSGuid = input.m_DeploymentDNSGuid;
                exceptionIndex++;
                output.m_DeploymentDNSName = input.m_DeploymentDNSName;
                exceptionIndex++;
                output.m_DeploymentFabricTenantStatus = input.m_DeploymentFabricTenantStatus;
                exceptionIndex++;
                output.m_DeploymentGroup = input.m_DeploymentGroup;
                exceptionIndex++;
                output.m_DeploymentHost = input.m_DeploymentHost;
                exceptionIndex++;
                output.m_DeploymentInputEndpoints = input.m_DeploymentInputEndpoints;
                exceptionIndex++;
                output.m_DeploymentKind = input.m_DeploymentKind;
                exceptionIndex++;
                output.m_DeploymentLabel = input.m_DeploymentLabel;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationId = input.m_DeploymentLastChangingOperationId;
                exceptionIndex++;
                output.m_DeploymentLastChangingOperationStarted = input.m_DeploymentLastChangingOperationStarted;
                exceptionIndex++;
                output.m_DeploymentLastServiceHealingTime = input.m_DeploymentLastServiceHealingTime;
                exceptionIndex++;
                output.m_DeploymentLastUpdated = input.m_DeploymentLastUpdated;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailed = input.m_DeploymentLastVipSwapFailed;
                exceptionIndex++;
                output.m_DeploymentLastVipSwapFailedTime = input.m_DeploymentLastVipSwapFailedTime;
                exceptionIndex++;
                output.m_DeploymentNumUpgradeDomains = input.m_DeploymentNumUpgradeDomains;
                exceptionIndex++;
                output.m_DeploymentOsUpgradePolicy = input.m_DeploymentOsUpgradePolicy;
                exceptionIndex++;
                output.m_DeploymentOsVersion = input.m_DeploymentOsVersion;
                exceptionIndex++;
                output.m_DeploymentProgressStatus = input.m_DeploymentProgressStatus;
                exceptionIndex++;
                output.m_DeploymentRoleInstanceDetails = input.m_DeploymentRoleInstanceDetails;
                exceptionIndex++;
                output.m_DeploymentRoleObjects = input.m_DeploymentRoleObjects;
                exceptionIndex++;
                output.m_DeploymentRoles = input.m_DeploymentRoles;
                exceptionIndex++;
                output.m_DeploymentRolesCSSInfoLastUpdated = input.m_DeploymentRolesCSSInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesLastUpdated = input.m_DeploymentRolesLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRolesSupportInfoLastUpdated = input.m_DeploymentRolesSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentRoleToUpgrade = input.m_DeploymentRoleToUpgrade;
                exceptionIndex++;
                output.m_DeploymentServiceHealingEnabled = input.m_DeploymentServiceHealingEnabled;
                exceptionIndex++;
                output.m_DeploymentServiceInstanceCount = input.m_DeploymentServiceInstanceCount;
                exceptionIndex++;
                output.m_DeploymentSettings = input.m_DeploymentSettings;
                exceptionIndex++;
                output.m_DeploymentStatus = input.m_DeploymentStatus;
                exceptionIndex++;
                output.m_DeploymentSupportInfoLastUpdated = input.m_DeploymentSupportInfoLastUpdated;
                exceptionIndex++;
                output.m_DeploymentTransitionStatus = input.m_DeploymentTransitionStatus;
                exceptionIndex++;
                output.m_DeploymentUpdateInProgress = input.m_DeploymentUpdateInProgress;
                exceptionIndex++;
                output.m_DeploymentUpdateType = input.m_DeploymentUpdateType;
                exceptionIndex++;
                output.m_DeploymentVIP = input.m_DeploymentVIP;
                exceptionIndex++;
                output.m_DeploymentVIPIPv6 = input.m_DeploymentVIPIPv6;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfExtraSmallRoleInstances = input.m_DeploymentWeightedNumberOfExtraSmallRoleInstances;
                exceptionIndex++;
                output.m_DeploymentWeightedNumberOfRoleInstances = input.m_DeploymentWeightedNumberOfRoleInstances;
                exceptionIndex++;
                output.m_FqdnSuffix = input.m_FqdnSuffix;
                exceptionIndex++;
                output.m_IS_Current = input.m_IS_Current;
                exceptionIndex++;
                output.m_MigratedFrom = input.m_MigratedFrom;
                exceptionIndex++;
                output.m_PackageRequiredFeatures = input.m_PackageRequiredFeatures;
                exceptionIndex++;
                output.m_PersistentVMs = input.m_PersistentVMs;
                exceptionIndex++;
                output.m_RoleOsMap = input.m_RoleOsMap;
                exceptionIndex++;
                output.m_SCD_EndDate = input.m_SCD_EndDate;
                exceptionIndex++;
                output.m_SCD_StartDate = input.m_SCD_StartDate;
                exceptionIndex++;
                output.m_SdkVersion = input.m_SdkVersion;
                exceptionIndex++;
                output.m_TimeMigrated = input.m_TimeMigrated;
                exceptionIndex++;
                output.m_endpoint = input.m_endpoint;
                exceptionIndex++;
                output.m_SourceTableName = input.m_SourceTableName;
                exceptionIndex++;
                output.m_AuditCreateDate = input.m_AuditCreateDate;
                exceptionIndex++;
                output.m_AuditUpdateDate = input.m_AuditUpdateDate;
                exceptionIndex++;
                output.m___date = tmpdt_0;
                exceptionIndex++;

                return true;
            }
            catch(...)
            {
                std::string exceptionString = "Exception thrown while evaluating expression \"";
                exceptionString += StringTable_Process_47[exceptionIndex];
                exceptionString += "\"";
                cout << exceptionString.c_str() << endl;
                throw RuntimeExpressionException(StringTable_Process_47[exceptionIndex]);
            }
        }

        static ScopeDateTime tmpdt_0;

        static void InitializeStatics()
        {
            tmpdt_0 = ScopeDateTime::FromBinary(635717376000000000LL) /* 7/6/2015 12:00:00 AM */;
        }
    };

    #if defined(COMPILE_NATIVE)
    ScopeDateTime RowTransformPolicy<GetSStream_0_Data0, Process_1_Data0, UID_Process_47>::tmpdt_0;
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class TextOutputPolicy<Process_1_Data0, UID_SV1_Extract_Combine_out0>
    {
    public:

        static void Serialize(TextOutputStream<TextOutputStreamTraitsConst<'\t', 1, false, true, false, false, false, Default>> * output, Process_1_Data0 & row)
        {
            if (!row.m_SubscriptionGUID.IsNull())
            {
                output->Write(row.m_SubscriptionGUID);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentGUID.IsNull())
            {
                output->Write(row.m_DeploymentGUID);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentName.IsNull())
            {
                output->Write(row.m_DeploymentName);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentCreateTimestamp.IsNull())
            {
                output->Write(row.m_DeploymentCreateTimestamp);
            }
            output->WriteDelimiter();
            if (!row.m_HostedServiceName.IsNull())
            {
                output->Write(row.m_HostedServiceName);
            }
            output->WriteDelimiter();
            if (!row.m_FabricGeoId.IsNull())
            {
                output->Write(row.m_FabricGeoId);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentType.IsNull())
            {
                output->Write(row.m_DeploymentType);
            }
            output->WriteDelimiter();
            if (!row.m_IsSystemDeployment.IsNull())
            {
                output->Write(row.m_IsSystemDeployment);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentCSSInfoLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentCSSInfoLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentCurrentUpdateDomain.IsNull())
            {
                output->Write(row.m_DeploymentCurrentUpdateDomain);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentCurrentUpgradeDomain.IsNull())
            {
                output->Write(row.m_DeploymentCurrentUpgradeDomain);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentCurrentUpgradeDomainState.IsNull())
            {
                output->Write(row.m_DeploymentCurrentUpgradeDomainState);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentDescription.IsNull())
            {
                output->Write(row.m_DeploymentDescription);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentDNSGuid.IsNull())
            {
                output->Write(row.m_DeploymentDNSGuid);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentDNSName.IsNull())
            {
                output->Write(row.m_DeploymentDNSName);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentFabricTenantStatus.IsNull())
            {
                output->Write(row.m_DeploymentFabricTenantStatus);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentGroup.IsNull())
            {
                output->Write(row.m_DeploymentGroup);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentHost.IsNull())
            {
                output->Write(row.m_DeploymentHost);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentInputEndpoints.IsNull())
            {
                output->Write(row.m_DeploymentInputEndpoints);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentKind.IsNull())
            {
                output->Write(row.m_DeploymentKind);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLabel.IsNull())
            {
                output->Write(row.m_DeploymentLabel);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastChangingOperationId.IsNull())
            {
                output->Write(row.m_DeploymentLastChangingOperationId);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastChangingOperationStarted.IsNull())
            {
                output->Write(row.m_DeploymentLastChangingOperationStarted);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastServiceHealingTime.IsNull())
            {
                output->Write(row.m_DeploymentLastServiceHealingTime);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastVipSwapFailed.IsNull())
            {
                output->Write(row.m_DeploymentLastVipSwapFailed);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentLastVipSwapFailedTime.IsNull())
            {
                output->Write(row.m_DeploymentLastVipSwapFailedTime);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentNumUpgradeDomains.IsNull())
            {
                output->Write(row.m_DeploymentNumUpgradeDomains);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentOsUpgradePolicy.IsNull())
            {
                output->Write(row.m_DeploymentOsUpgradePolicy);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentOsVersion.IsNull())
            {
                output->Write(row.m_DeploymentOsVersion);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentProgressStatus.IsNull())
            {
                output->Write(row.m_DeploymentProgressStatus);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRoleInstanceDetails.IsNull())
            {
                output->Write(row.m_DeploymentRoleInstanceDetails);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRoleObjects.IsNull())
            {
                output->Write(row.m_DeploymentRoleObjects);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRoles.IsNull())
            {
                output->Write(row.m_DeploymentRoles);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRolesCSSInfoLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentRolesCSSInfoLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRolesLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentRolesLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRolesSupportInfoLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentRolesSupportInfoLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentRoleToUpgrade.IsNull())
            {
                output->Write(row.m_DeploymentRoleToUpgrade);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentServiceHealingEnabled.IsNull())
            {
                output->Write(row.m_DeploymentServiceHealingEnabled);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentServiceInstanceCount.IsNull())
            {
                output->Write(row.m_DeploymentServiceInstanceCount);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentSettings.IsNull())
            {
                output->Write(row.m_DeploymentSettings);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentStatus.IsNull())
            {
                output->Write(row.m_DeploymentStatus);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentSupportInfoLastUpdated.IsNull())
            {
                output->Write(row.m_DeploymentSupportInfoLastUpdated);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentTransitionStatus.IsNull())
            {
                output->Write(row.m_DeploymentTransitionStatus);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentUpdateInProgress.IsNull())
            {
                output->Write(row.m_DeploymentUpdateInProgress);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentUpdateType.IsNull())
            {
                output->Write(row.m_DeploymentUpdateType);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentVIP.IsNull())
            {
                output->Write(row.m_DeploymentVIP);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentVIPIPv6.IsNull())
            {
                output->Write(row.m_DeploymentVIPIPv6);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances.IsNull())
            {
                output->Write(row.m_DeploymentWeightedNumberOfExtraSmallRoleInstances);
            }
            output->WriteDelimiter();
            if (!row.m_DeploymentWeightedNumberOfRoleInstances.IsNull())
            {
                output->Write(row.m_DeploymentWeightedNumberOfRoleInstances);
            }
            output->WriteDelimiter();
            if (!row.m_FqdnSuffix.IsNull())
            {
                output->Write(row.m_FqdnSuffix);
            }
            output->WriteDelimiter();
            if (!row.m_IS_Current.IsNull())
            {
                output->Write(row.m_IS_Current);
            }
            output->WriteDelimiter();
            if (!row.m_MigratedFrom.IsNull())
            {
                output->Write(row.m_MigratedFrom);
            }
            output->WriteDelimiter();
            if (!row.m_PackageRequiredFeatures.IsNull())
            {
                output->Write(row.m_PackageRequiredFeatures);
            }
            output->WriteDelimiter();
            if (!row.m_PersistentVMs.IsNull())
            {
                output->Write(row.m_PersistentVMs);
            }
            output->WriteDelimiter();
            if (!row.m_RoleOsMap.IsNull())
            {
                output->Write(row.m_RoleOsMap);
            }
            output->WriteDelimiter();
            if (!row.m_SCD_EndDate.IsNull())
            {
                output->Write(row.m_SCD_EndDate);
            }
            output->WriteDelimiter();
            if (!row.m_SCD_StartDate.IsNull())
            {
                output->Write(row.m_SCD_StartDate);
            }
            output->WriteDelimiter();
            if (!row.m_SdkVersion.IsNull())
            {
                output->Write(row.m_SdkVersion);
            }
            output->WriteDelimiter();
            if (!row.m_TimeMigrated.IsNull())
            {
                output->Write(row.m_TimeMigrated);
            }
            output->WriteDelimiter();
            if (!row.m_endpoint.IsNull())
            {
                output->Write(row.m_endpoint);
            }
            output->WriteDelimiter();
            if (!row.m_SourceTableName.IsNull())
            {
                output->Write(row.m_SourceTableName);
            }
            output->WriteDelimiter();
            if (!row.m_AuditCreateDate.IsNull())
            {
                output->Write(row.m_AuditCreateDate);
            }
            output->WriteDelimiter();
            if (!row.m_AuditUpdateDate.IsNull())
            {
                output->Write(row.m_AuditUpdateDate);
            }
            output->WriteDelimiter();
            output->Write(row.m___date);
            output->WriteNewLine();
        }
    };

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0 * CreateExtractor_SV1_Extract_Combine_GetSStream_0(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0(0, "", true/*100*/, UID_GetSStream_0));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_2>, UID_GetSStream_2, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2 * CreateExtractor_SV1_Extract_Combine_GetSStream_2(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2(2, "", true/*100*/, UID_GetSStream_2));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_4>, UID_GetSStream_4, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4 * CreateExtractor_SV1_Extract_Combine_GetSStream_4(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4(4, "", true/*100*/, UID_GetSStream_4));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_6>, UID_GetSStream_6, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6 * CreateExtractor_SV1_Extract_Combine_GetSStream_6(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6(6, "", true/*100*/, UID_GetSStream_6));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_8>, UID_GetSStream_8, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8 * CreateExtractor_SV1_Extract_Combine_GetSStream_8(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8(8, "", true/*100*/, UID_GetSStream_8));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_10>, UID_GetSStream_10, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10 * CreateExtractor_SV1_Extract_Combine_GetSStream_10(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10(10, "", true/*100*/, UID_GetSStream_10));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_12>, UID_GetSStream_12, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12 * CreateExtractor_SV1_Extract_Combine_GetSStream_12(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12(12, "", true/*100*/, UID_GetSStream_12));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_14>, UID_GetSStream_14, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14 * CreateExtractor_SV1_Extract_Combine_GetSStream_14(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14(14, "", true/*100*/, UID_GetSStream_14));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_16>, UID_GetSStream_16, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16 * CreateExtractor_SV1_Extract_Combine_GetSStream_16(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16(16, "", true/*100*/, UID_GetSStream_16));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_18>, UID_GetSStream_18, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18 * CreateExtractor_SV1_Extract_Combine_GetSStream_18(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18(18, "", true/*100*/, UID_GetSStream_18));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_20>, UID_GetSStream_20, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20 * CreateExtractor_SV1_Extract_Combine_GetSStream_20(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20(20, "", true/*100*/, UID_GetSStream_20));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_22>, UID_GetSStream_22, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22 * CreateExtractor_SV1_Extract_Combine_GetSStream_22(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22(22, "", true/*100*/, UID_GetSStream_22));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_24>, UID_GetSStream_24, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24 * CreateExtractor_SV1_Extract_Combine_GetSStream_24(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24(24, "", true/*100*/, UID_GetSStream_24));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_26>, UID_GetSStream_26, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26 * CreateExtractor_SV1_Extract_Combine_GetSStream_26(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26(26, "", true/*100*/, UID_GetSStream_26));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_28>, UID_GetSStream_28, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28 * CreateExtractor_SV1_Extract_Combine_GetSStream_28(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28(28, "", true/*100*/, UID_GetSStream_28));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_30>, UID_GetSStream_30, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30 * CreateExtractor_SV1_Extract_Combine_GetSStream_30(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30(30, "", true/*100*/, UID_GetSStream_30));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_32>, UID_GetSStream_32, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32 * CreateExtractor_SV1_Extract_Combine_GetSStream_32(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32(32, "", true/*100*/, UID_GetSStream_32));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_34>, UID_GetSStream_34, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34 * CreateExtractor_SV1_Extract_Combine_GetSStream_34(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34(34, "", true/*100*/, UID_GetSStream_34));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_36>, UID_GetSStream_36, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36 * CreateExtractor_SV1_Extract_Combine_GetSStream_36(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36(36, "", true/*100*/, UID_GetSStream_36));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_38>, UID_GetSStream_38, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38 * CreateExtractor_SV1_Extract_Combine_GetSStream_38(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38(38, "", true/*100*/, UID_GetSStream_38));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_40>, UID_GetSStream_40, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40 * CreateExtractor_SV1_Extract_Combine_GetSStream_40(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40(40, "", true/*100*/, UID_GetSStream_40));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_42>, UID_GetSStream_42, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42 * CreateExtractor_SV1_Extract_Combine_GetSStream_42(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42(42, "", true/*100*/, UID_GetSStream_42));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_44>, UID_GetSStream_44, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44 * CreateExtractor_SV1_Extract_Combine_GetSStream_44(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44(44, "", true/*100*/, UID_GetSStream_44));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_46>, UID_GetSStream_46, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46;
    SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46 * CreateExtractor_SV1_Extract_Combine_GetSStream_46(unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46(46, "", true/*100*/, UID_GetSStream_46));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV1_Extract_Combine_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0> extractor_0_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0 * extractor_0 = CreateExtractor_SV1_Extract_Combine_GetSStream_0(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2> extractor_1_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2 * extractor_1 = CreateExtractor_SV1_Extract_Combine_GetSStream_2(&extractor_1_ptr);
        ULONG extractor_1_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4> extractor_2_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4 * extractor_2 = CreateExtractor_SV1_Extract_Combine_GetSStream_4(&extractor_2_ptr);
        ULONG extractor_2_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6> extractor_3_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6 * extractor_3 = CreateExtractor_SV1_Extract_Combine_GetSStream_6(&extractor_3_ptr);
        ULONG extractor_3_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8> extractor_4_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8 * extractor_4 = CreateExtractor_SV1_Extract_Combine_GetSStream_8(&extractor_4_ptr);
        ULONG extractor_4_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10> extractor_5_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10 * extractor_5 = CreateExtractor_SV1_Extract_Combine_GetSStream_10(&extractor_5_ptr);
        ULONG extractor_5_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12> extractor_6_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12 * extractor_6 = CreateExtractor_SV1_Extract_Combine_GetSStream_12(&extractor_6_ptr);
        ULONG extractor_6_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14> extractor_7_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14 * extractor_7 = CreateExtractor_SV1_Extract_Combine_GetSStream_14(&extractor_7_ptr);
        ULONG extractor_7_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16> extractor_8_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16 * extractor_8 = CreateExtractor_SV1_Extract_Combine_GetSStream_16(&extractor_8_ptr);
        ULONG extractor_8_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18> extractor_9_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18 * extractor_9 = CreateExtractor_SV1_Extract_Combine_GetSStream_18(&extractor_9_ptr);
        ULONG extractor_9_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20> extractor_10_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20 * extractor_10 = CreateExtractor_SV1_Extract_Combine_GetSStream_20(&extractor_10_ptr);
        ULONG extractor_10_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22> extractor_11_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22 * extractor_11 = CreateExtractor_SV1_Extract_Combine_GetSStream_22(&extractor_11_ptr);
        ULONG extractor_11_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24> extractor_12_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24 * extractor_12 = CreateExtractor_SV1_Extract_Combine_GetSStream_24(&extractor_12_ptr);
        ULONG extractor_12_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26> extractor_13_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26 * extractor_13 = CreateExtractor_SV1_Extract_Combine_GetSStream_26(&extractor_13_ptr);
        ULONG extractor_13_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28> extractor_14_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28 * extractor_14 = CreateExtractor_SV1_Extract_Combine_GetSStream_28(&extractor_14_ptr);
        ULONG extractor_14_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30> extractor_15_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30 * extractor_15 = CreateExtractor_SV1_Extract_Combine_GetSStream_30(&extractor_15_ptr);
        ULONG extractor_15_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32> extractor_16_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32 * extractor_16 = CreateExtractor_SV1_Extract_Combine_GetSStream_32(&extractor_16_ptr);
        ULONG extractor_16_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34> extractor_17_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34 * extractor_17 = CreateExtractor_SV1_Extract_Combine_GetSStream_34(&extractor_17_ptr);
        ULONG extractor_17_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36> extractor_18_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36 * extractor_18 = CreateExtractor_SV1_Extract_Combine_GetSStream_36(&extractor_18_ptr);
        ULONG extractor_18_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38> extractor_19_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38 * extractor_19 = CreateExtractor_SV1_Extract_Combine_GetSStream_38(&extractor_19_ptr);
        ULONG extractor_19_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40> extractor_20_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40 * extractor_20 = CreateExtractor_SV1_Extract_Combine_GetSStream_40(&extractor_20_ptr);
        ULONG extractor_20_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42> extractor_21_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42 * extractor_21 = CreateExtractor_SV1_Extract_Combine_GetSStream_42(&extractor_21_ptr);
        ULONG extractor_21_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44> extractor_22_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44 * extractor_22 = CreateExtractor_SV1_Extract_Combine_GetSStream_44(&extractor_22_ptr);
        ULONG extractor_22_count = 1;

        unique_ptr<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46> extractor_23_ptr;
        SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46 * extractor_23 = CreateExtractor_SV1_Extract_Combine_GetSStream_46(&extractor_23_ptr);
        ULONG extractor_23_count = 1;

        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_0, Process_1_Data0, UID_Process_1> FilterTransformerType_Process_1;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_1> filterTransformer_Process_1_ptr (new FilterTransformerType_Process_1(extractor_0, UID_Process_1));
        FilterTransformerType_Process_1 * filterTransformer_Process_1 = filterTransformer_Process_1_ptr.get();
        ULONG filterTransformer_Process_1_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_2, Process_1_Data0, UID_Process_3> FilterTransformerType_Process_3;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_3> filterTransformer_Process_3_ptr (new FilterTransformerType_Process_3(extractor_1, UID_Process_3));
        FilterTransformerType_Process_3 * filterTransformer_Process_3 = filterTransformer_Process_3_ptr.get();
        ULONG filterTransformer_Process_3_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_4, Process_1_Data0, UID_Process_5> FilterTransformerType_Process_5;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_5> filterTransformer_Process_5_ptr (new FilterTransformerType_Process_5(extractor_2, UID_Process_5));
        FilterTransformerType_Process_5 * filterTransformer_Process_5 = filterTransformer_Process_5_ptr.get();
        ULONG filterTransformer_Process_5_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_6, Process_1_Data0, UID_Process_7> FilterTransformerType_Process_7;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_7> filterTransformer_Process_7_ptr (new FilterTransformerType_Process_7(extractor_3, UID_Process_7));
        FilterTransformerType_Process_7 * filterTransformer_Process_7 = filterTransformer_Process_7_ptr.get();
        ULONG filterTransformer_Process_7_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_8, Process_1_Data0, UID_Process_9> FilterTransformerType_Process_9;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_9> filterTransformer_Process_9_ptr (new FilterTransformerType_Process_9(extractor_4, UID_Process_9));
        FilterTransformerType_Process_9 * filterTransformer_Process_9 = filterTransformer_Process_9_ptr.get();
        ULONG filterTransformer_Process_9_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_10, Process_1_Data0, UID_Process_11> FilterTransformerType_Process_11;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_11> filterTransformer_Process_11_ptr (new FilterTransformerType_Process_11(extractor_5, UID_Process_11));
        FilterTransformerType_Process_11 * filterTransformer_Process_11 = filterTransformer_Process_11_ptr.get();
        ULONG filterTransformer_Process_11_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_12, Process_1_Data0, UID_Process_13> FilterTransformerType_Process_13;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_13> filterTransformer_Process_13_ptr (new FilterTransformerType_Process_13(extractor_6, UID_Process_13));
        FilterTransformerType_Process_13 * filterTransformer_Process_13 = filterTransformer_Process_13_ptr.get();
        ULONG filterTransformer_Process_13_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_14, Process_1_Data0, UID_Process_15> FilterTransformerType_Process_15;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_15> filterTransformer_Process_15_ptr (new FilterTransformerType_Process_15(extractor_7, UID_Process_15));
        FilterTransformerType_Process_15 * filterTransformer_Process_15 = filterTransformer_Process_15_ptr.get();
        ULONG filterTransformer_Process_15_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_16, Process_1_Data0, UID_Process_17> FilterTransformerType_Process_17;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_17> filterTransformer_Process_17_ptr (new FilterTransformerType_Process_17(extractor_8, UID_Process_17));
        FilterTransformerType_Process_17 * filterTransformer_Process_17 = filterTransformer_Process_17_ptr.get();
        ULONG filterTransformer_Process_17_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_18, Process_1_Data0, UID_Process_19> FilterTransformerType_Process_19;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_19> filterTransformer_Process_19_ptr (new FilterTransformerType_Process_19(extractor_9, UID_Process_19));
        FilterTransformerType_Process_19 * filterTransformer_Process_19 = filterTransformer_Process_19_ptr.get();
        ULONG filterTransformer_Process_19_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_20, Process_1_Data0, UID_Process_21> FilterTransformerType_Process_21;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_21> filterTransformer_Process_21_ptr (new FilterTransformerType_Process_21(extractor_10, UID_Process_21));
        FilterTransformerType_Process_21 * filterTransformer_Process_21 = filterTransformer_Process_21_ptr.get();
        ULONG filterTransformer_Process_21_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_22, Process_1_Data0, UID_Process_23> FilterTransformerType_Process_23;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_23> filterTransformer_Process_23_ptr (new FilterTransformerType_Process_23(extractor_11, UID_Process_23));
        FilterTransformerType_Process_23 * filterTransformer_Process_23 = filterTransformer_Process_23_ptr.get();
        ULONG filterTransformer_Process_23_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_24, Process_1_Data0, UID_Process_25> FilterTransformerType_Process_25;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_25> filterTransformer_Process_25_ptr (new FilterTransformerType_Process_25(extractor_12, UID_Process_25));
        FilterTransformerType_Process_25 * filterTransformer_Process_25 = filterTransformer_Process_25_ptr.get();
        ULONG filterTransformer_Process_25_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_26, Process_1_Data0, UID_Process_27> FilterTransformerType_Process_27;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_27> filterTransformer_Process_27_ptr (new FilterTransformerType_Process_27(extractor_13, UID_Process_27));
        FilterTransformerType_Process_27 * filterTransformer_Process_27 = filterTransformer_Process_27_ptr.get();
        ULONG filterTransformer_Process_27_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_28, Process_1_Data0, UID_Process_29> FilterTransformerType_Process_29;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_29> filterTransformer_Process_29_ptr (new FilterTransformerType_Process_29(extractor_14, UID_Process_29));
        FilterTransformerType_Process_29 * filterTransformer_Process_29 = filterTransformer_Process_29_ptr.get();
        ULONG filterTransformer_Process_29_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_30, Process_1_Data0, UID_Process_31> FilterTransformerType_Process_31;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_31> filterTransformer_Process_31_ptr (new FilterTransformerType_Process_31(extractor_15, UID_Process_31));
        FilterTransformerType_Process_31 * filterTransformer_Process_31 = filterTransformer_Process_31_ptr.get();
        ULONG filterTransformer_Process_31_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_32, Process_1_Data0, UID_Process_33> FilterTransformerType_Process_33;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_33> filterTransformer_Process_33_ptr (new FilterTransformerType_Process_33(extractor_16, UID_Process_33));
        FilterTransformerType_Process_33 * filterTransformer_Process_33 = filterTransformer_Process_33_ptr.get();
        ULONG filterTransformer_Process_33_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_34, Process_1_Data0, UID_Process_35> FilterTransformerType_Process_35;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_35> filterTransformer_Process_35_ptr (new FilterTransformerType_Process_35(extractor_17, UID_Process_35));
        FilterTransformerType_Process_35 * filterTransformer_Process_35 = filterTransformer_Process_35_ptr.get();
        ULONG filterTransformer_Process_35_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_36, Process_1_Data0, UID_Process_37> FilterTransformerType_Process_37;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_37> filterTransformer_Process_37_ptr (new FilterTransformerType_Process_37(extractor_18, UID_Process_37));
        FilterTransformerType_Process_37 * filterTransformer_Process_37 = filterTransformer_Process_37_ptr.get();
        ULONG filterTransformer_Process_37_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_38, Process_1_Data0, UID_Process_39> FilterTransformerType_Process_39;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_39> filterTransformer_Process_39_ptr (new FilterTransformerType_Process_39(extractor_19, UID_Process_39));
        FilterTransformerType_Process_39 * filterTransformer_Process_39 = filterTransformer_Process_39_ptr.get();
        ULONG filterTransformer_Process_39_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_40, Process_1_Data0, UID_Process_41> FilterTransformerType_Process_41;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_41> filterTransformer_Process_41_ptr (new FilterTransformerType_Process_41(extractor_20, UID_Process_41));
        FilterTransformerType_Process_41 * filterTransformer_Process_41 = filterTransformer_Process_41_ptr.get();
        ULONG filterTransformer_Process_41_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_42, Process_1_Data0, UID_Process_43> FilterTransformerType_Process_43;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_43> filterTransformer_Process_43_ptr (new FilterTransformerType_Process_43(extractor_21, UID_Process_43));
        FilterTransformerType_Process_43 * filterTransformer_Process_43 = filterTransformer_Process_43_ptr.get();
        ULONG filterTransformer_Process_43_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_44, Process_1_Data0, UID_Process_45> FilterTransformerType_Process_45;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_45> filterTransformer_Process_45_ptr (new FilterTransformerType_Process_45(extractor_22, UID_Process_45));
        FilterTransformerType_Process_45 * filterTransformer_Process_45 = filterTransformer_Process_45_ptr.get();
        ULONG filterTransformer_Process_45_count = 1;
        // Define the type of the operator
        typedef FilterTransformer<SStreamV3ExtractorType_SV1_Extract_Combine_GetSStream_46, Process_1_Data0, UID_Process_47> FilterTransformerType_Process_47;
        // Construct operator and initialize it.
        unique_ptr<FilterTransformerType_Process_47> filterTransformer_Process_47_ptr (new FilterTransformerType_Process_47(extractor_23, UID_Process_47));
        FilterTransformerType_Process_47 * filterTransformer_Process_47 = filterTransformer_Process_47_ptr.get();
        ULONG filterTransformer_Process_47_count = 1;
        // Construct combined operator and initialize it
        unique_ptr<OperatorDelegate<Process_1_Data0>> delegate_7E69222B1B7FAB8C_array[24];
        delegate_7E69222B1B7FAB8C_array[0].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_1));
        delegate_7E69222B1B7FAB8C_array[1].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_3));
        delegate_7E69222B1B7FAB8C_array[2].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_5));
        delegate_7E69222B1B7FAB8C_array[3].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_7));
        delegate_7E69222B1B7FAB8C_array[4].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_9));
        delegate_7E69222B1B7FAB8C_array[5].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_11));
        delegate_7E69222B1B7FAB8C_array[6].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_13));
        delegate_7E69222B1B7FAB8C_array[7].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_15));
        delegate_7E69222B1B7FAB8C_array[8].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_17));
        delegate_7E69222B1B7FAB8C_array[9].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_19));
        delegate_7E69222B1B7FAB8C_array[10].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_21));
        delegate_7E69222B1B7FAB8C_array[11].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_23));
        delegate_7E69222B1B7FAB8C_array[12].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_25));
        delegate_7E69222B1B7FAB8C_array[13].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_27));
        delegate_7E69222B1B7FAB8C_array[14].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_29));
        delegate_7E69222B1B7FAB8C_array[15].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_31));
        delegate_7E69222B1B7FAB8C_array[16].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_33));
        delegate_7E69222B1B7FAB8C_array[17].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_35));
        delegate_7E69222B1B7FAB8C_array[18].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_37));
        delegate_7E69222B1B7FAB8C_array[19].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_39));
        delegate_7E69222B1B7FAB8C_array[20].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_41));
        delegate_7E69222B1B7FAB8C_array[21].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_43));
        delegate_7E69222B1B7FAB8C_array[22].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_45));
        delegate_7E69222B1B7FAB8C_array[23].reset(new OperatorDelegate<Process_1_Data0>(filterTransformer_Process_47));
        OperatorDelegate<Process_1_Data0> ** delegate_7E69222B1B7FAB8C = (OperatorDelegate<Process_1_Data0> **)delegate_7E69222B1B7FAB8C_array;
        // Define the type of the operator
        typedef Merger<OperatorDelegate<Process_1_Data0>, Process_1_Data0, ScopeUnionAll<OperatorDelegate<Process_1_Data0>>, UID_Aggregate_48> AggregateType_Aggregate_48;
        ULONG unionall_groupSize_Aggregate_48 = 24 > IOManager::x_readThrottlingLimit ? (ULONG)sqrt((float)24):24;
        ULONG unionall_groupNum_Aggregate_48 = (ULONG)(24 + unionall_groupSize_Aggregate_48 -1) / unionall_groupSize_Aggregate_48;

        // Allocate union all pointer array
        unique_ptr<unique_ptr<AggregateType_Aggregate_48>[]> unionall_Aggregate_48_array(new unique_ptr<AggregateType_Aggregate_48>[unionall_groupNum_Aggregate_48]);
        
        // Construct merger objects
        for (ULONG i = 0, operatorStartOffset = 0; i < unionall_groupNum_Aggregate_48; i++, operatorStartOffset += unionall_groupSize_Aggregate_48)
        {
            ULONG operatorNum = min(24 - operatorStartOffset, unionall_groupSize_Aggregate_48);

            unionall_Aggregate_48_array[i].reset(new AggregateType_Aggregate_48(delegate_7E69222B1B7FAB8C + operatorStartOffset, operatorNum, UID_Aggregate_48));
        }

        // Construct a local typed variable for merger array      
        AggregateType_Aggregate_48 ** aggregate_Aggregate_48 = (AggregateType_Aggregate_48 **)unionall_Aggregate_48_array.get();
        ULONG aggregate_Aggregate_48_count = unionall_groupNum_Aggregate_48;
        // Merge streams N->1
        typedef ParallelUnionAll<AggregateType_Aggregate_48, IsNativeOnlyVertex> UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector;
        unique_ptr<UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector> unionall_Aggregate_48_SV1_Extract_Combine_out0_connector_ptr(new UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector(aggregate_Aggregate_48,aggregate_Aggregate_48_count,false,UID_ParallelUnionAll_Aggregate_48));
        UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector * unionall_Aggregate_48_SV1_Extract_Combine_out0_connector = unionall_Aggregate_48_SV1_Extract_Combine_out0_connector_ptr.get();
        ULONG unionall_Aggregate_48_SV1_Extract_Combine_out0_connector_count = 1;
        // Define outputer type
        typedef Outputer<UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector, TextOutputPolicy<typename UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector::Schema, UID_SV1_Extract_Combine_out0>, TextOutputStream<TextOutputStreamTraitsConst<'\t', 1, false, true, false, false, false, Default>>, false> OutputerType1_SV1_Extract_Combine;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV1_Extract_Combine> outputer_SV1_Extract_Combine_out0_ptr(new OutputerType1_SV1_Extract_Combine(unionall_Aggregate_48_SV1_Extract_Combine_out0_connector, outputFileNames[0], x_outputBufSize, x_outputBufCnt, OutputStreamParameters('\t', 1, false, true, false, false, NULL, Default), UID_SV1_Extract_Combine_out0));
        OutputerType1_SV1_Extract_Combine * outputer_SV1_Extract_Combine_out0 = outputer_SV1_Extract_Combine_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV1_Extract_Combine_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            UnionAllType_Aggregate_48_SV1_Extract_Combine_out0_connector::Schema row;
            outputer_SV1_Extract_Combine_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV1_Extract_Combine_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV1_Extract_Combine_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV1_Extract_Combine
// Empty footer
