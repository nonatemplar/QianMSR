#pragma warning( disable : 4100 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4355 )
#pragma warning( disable : 4503 )
#pragma warning( disable : 4512 )
#pragma warning( disable : 4691 )
#pragma warning( disable : 4723 )
#if defined(COMPILE_NATIVE)
#include "ScopeOperators.h"
#endif
#if defined(COMPILE_MANAGED)
#using <mscorlib.dll>
[assembly: System::Runtime::Versioning::TargetFrameworkAttribute(".NETFramework,Version=v4.5", FrameworkDisplayName = ".NET Framework, Version 4.5")];
#include "ScopeManaged.h"
#endif
using namespace ScopeEngine;
enum OperatorUID
{
UID_GetSStream_0 = 1,
UID_GetSStream_0_Data0 = 2,
UID_Process_1 = 3,
UID_SV1_Extract_out0 = 4,
UID_GetSStream_2 = 5,
UID_GetSStream_2_Data0 = 6,
UID_Process_3 = 7,
UID_SV2_Extract_out0 = 8,
UID_GetSStream_4 = 9,
UID_GetSStream_4_Data0 = 10,
UID_Process_5 = 11,
UID_SV3_Extract_out0 = 12,
UID_GetSStream_6 = 13,
UID_GetSStream_6_Data0 = 14,
UID_Process_7 = 15,
UID_SV4_Extract_out0 = 16,
UID_GetSStream_8 = 17,
UID_GetSStream_8_Data0 = 18,
UID_Process_9 = 19,
UID_SV5_Extract_out0 = 20,
UID_GetSStream_10 = 21,
UID_GetSStream_10_Data0 = 22,
UID_Process_11 = 23,
UID_SV6_Extract_out0 = 24,
UID_GetSStream_12 = 25,
UID_GetSStream_12_Data0 = 26,
UID_Process_13 = 27,
UID_SV7_Extract_out0 = 28,
UID_GetSStream_14 = 29,
UID_GetSStream_14_Data0 = 30,
UID_Process_15 = 31,
UID_SV8_Extract_out0 = 32,
UID_GetSStream_16 = 33,
UID_GetSStream_16_Data0 = 34,
UID_Process_17 = 35,
UID_SV9_Extract_out0 = 36,
UID_GetSStream_18 = 37,
UID_GetSStream_18_Data0 = 38,
UID_Process_19 = 39,
UID_SV10_Extract_out0 = 40,
UID_GetSStream_20 = 41,
UID_GetSStream_20_Data0 = 42,
UID_Process_21 = 43,
UID_SV11_Extract_out0 = 44,
UID_GetSStream_22 = 45,
UID_GetSStream_22_Data0 = 46,
UID_Process_23 = 47,
UID_SV12_Extract_out0 = 48,
UID_GetSStream_24 = 49,
UID_GetSStream_24_Data0 = 50,
UID_Process_25 = 51,
UID_SV13_Extract_out0 = 52,
UID_GetSStream_26 = 53,
UID_GetSStream_26_Data0 = 54,
UID_Process_27 = 55,
UID_SV14_Extract_out0 = 56,
UID_GetSStream_28 = 57,
UID_GetSStream_28_Data0 = 58,
UID_Process_29 = 59,
UID_SV15_Extract_out0 = 60,
UID_GetSStream_30 = 61,
UID_GetSStream_30_Data0 = 62,
UID_Process_31 = 63,
UID_SV16_Extract_out0 = 64,
UID_GetSStream_32 = 65,
UID_GetSStream_32_Data0 = 66,
UID_Process_33 = 67,
UID_SV17_Extract_out0 = 68,
UID_GetSStream_34 = 69,
UID_GetSStream_34_Data0 = 70,
UID_Process_35 = 71,
UID_SV18_Extract_out0 = 72,
UID_GetSStream_36 = 73,
UID_GetSStream_36_Data0 = 74,
UID_Process_37 = 75,
UID_SV19_Extract_out0 = 76,
UID_GetSStream_38 = 77,
UID_GetSStream_38_Data0 = 78,
UID_Process_39 = 79,
UID_SV20_Extract_out0 = 80,
UID_GetSStream_40 = 81,
UID_GetSStream_40_Data0 = 82,
UID_Process_41 = 83,
UID_SV21_Extract_out0 = 84,
UID_GetSStream_42 = 85,
UID_GetSStream_42_Data0 = 86,
UID_Process_43 = 87,
UID_SV22_Extract_out0 = 88,
UID_GetSStream_44 = 89,
UID_GetSStream_44_Data0 = 90,
UID_Process_45 = 91,
UID_SV23_Extract_out0 = 92,
UID_GetSStream_46 = 93,
UID_GetSStream_46_Data0 = 94,
UID_Process_47 = 95,
UID_SV24_Extract_out0 = 96,
UID_GetSStream_48 = 97,
UID_GetSStream_48_Data0 = 98,
UID_Process_49 = 99,
UID_SV25_Extract_out0 = 100,
UID_GetSStream_50 = 101,
UID_GetSStream_50_Data0 = 102,
UID_Process_51 = 103,
UID_SV26_Extract_out0 = 104,
UID_GetSStream_52 = 105,
UID_GetSStream_52_Data0 = 106,
UID_Process_53 = 107,
UID_SV27_Extract_out0 = 108,
UID_GetSStream_54 = 109,
UID_GetSStream_54_Data0 = 110,
UID_Process_55 = 111,
UID_SV28_Extract_out0 = 112,
UID_GetSStream_56 = 113,
UID_GetSStream_56_Data0 = 114,
UID_Process_57 = 115,
UID_SV29_Extract_out0 = 116,
UID_GetSStream_58 = 117,
UID_GetSStream_58_Data0 = 118,
UID_Process_59 = 119,
UID_SV30_Extract_out0 = 120,
UID_GetSStream_60 = 121,
UID_GetSStream_60_Data0 = 122,
UID_Process_61 = 123,
UID_SV31_Extract_out0 = 124,
UID_GetSStream_62 = 125,
UID_GetSStream_62_Data0 = 126,
UID_Process_63 = 127,
UID_SV32_Extract_out0 = 128,
UID_GetSStream_64 = 129,
UID_GetSStream_64_Data0 = 130,
UID_Process_65 = 131,
UID_SV33_Extract_out0 = 132,
UID_GetSStream_66 = 133,
UID_GetSStream_66_Data0 = 134,
UID_Process_67 = 135,
UID_SV34_Extract_out0 = 136,
UID_GetSStream_68 = 137,
UID_GetSStream_68_Data0 = 138,
UID_Process_69 = 139,
UID_SV35_Extract_out0 = 140,
UID_GetSStream_70 = 141,
UID_GetSStream_70_Data0 = 142,
UID_Process_71 = 143,
UID_SV36_Extract_out0 = 144,
UID_GetSStream_72 = 145,
UID_GetSStream_72_Data0 = 146,
UID_Process_73 = 147,
UID_SV37_Extract_out0 = 148,
UID_GetSStream_74 = 149,
UID_GetSStream_74_Data0 = 150,
UID_Process_75 = 151,
UID_SV38_Extract_out0 = 152,
UID_GetSStream_76 = 153,
UID_GetSStream_76_Data0 = 154,
UID_Process_77 = 155,
UID_SV39_Extract_out0 = 156,
UID_GetSStream_78 = 157,
UID_GetSStream_78_Data0 = 158,
UID_Process_79 = 159,
UID_SV40_Extract_out0 = 160,
UID_GetSStream_80 = 161,
UID_GetSStream_80_Data0 = 162,
UID_Process_81 = 163,
UID_SV41_Extract_out0 = 164,
UID_GetSStream_82 = 165,
UID_GetSStream_82_Data0 = 166,
UID_Process_83 = 167,
UID_SV42_Extract_out0 = 168,
UID_GetSStream_84 = 169,
UID_GetSStream_84_Data0 = 170,
UID_Process_85 = 171,
UID_SV43_Extract_out0 = 172,
UID_GetSStream_86 = 173,
UID_GetSStream_86_Data0 = 174,
UID_Process_87 = 175,
UID_SV44_Extract_out0 = 176,
UID_GetSStream_88 = 177,
UID_GetSStream_88_Data0 = 178,
UID_Process_89 = 179,
UID_SV45_Extract_out0 = 180,
UID_GetSStream_90 = 181,
UID_GetSStream_90_Data0 = 182,
UID_Process_91 = 183,
UID_SV46_Extract_out0 = 184,
UID_GetSStream_92 = 185,
UID_GetSStream_92_Data0 = 186,
UID_Process_93 = 187,
UID_SV47_Extract_out0 = 188,
UID_GetSStream_94 = 189,
UID_GetSStream_94_Data0 = 190,
UID_Process_95 = 191,
UID_SV48_Extract_out0 = 192,
UID_GetSStream_96 = 193,
UID_GetSStream_96_Data0 = 194,
UID_Process_97 = 195,
UID_SV49_Extract_out0 = 196,
UID_GetSStream_98 = 197,
UID_GetSStream_98_Data0 = 198,
UID_Process_99 = 199,
UID_SV50_Extract_out0 = 200,
UID_GetSStream_100 = 201,
UID_GetSStream_100_Data0 = 202,
UID_Process_101 = 203,
UID_SV51_Extract_out0 = 204,
UID_GetSStream_102 = 205,
UID_GetSStream_102_Data0 = 206,
UID_Process_103 = 207,
UID_SV52_Extract_out0 = 208,
UID_GetSStream_104 = 209,
UID_GetSStream_104_Data0 = 210,
UID_Process_105 = 211,
UID_SV53_Extract_out0 = 212,
UID_GetSStream_106 = 213,
UID_GetSStream_106_Data0 = 214,
UID_Process_107 = 215,
UID_SV54_Extract_out0 = 216,
UID_GetSStream_108 = 217,
UID_GetSStream_108_Data0 = 218,
UID_Process_109 = 219,
UID_SV55_Extract_out0 = 220,
UID_GetSStream_110 = 221,
UID_GetSStream_110_Data0 = 222,
UID_Process_111 = 223,
UID_SV56_Extract_out0 = 224,
UID_GetSStream_112 = 225,
UID_GetSStream_112_Data0 = 226,
UID_Process_113 = 227,
UID_SV57_Extract_out0 = 228,
UID_GetSStream_114 = 229,
UID_GetSStream_114_Data0 = 230,
UID_Process_115 = 231,
UID_SV58_Extract_out0 = 232,
UID_GetSStream_116 = 233,
UID_GetSStream_116_Data0 = 234,
UID_Process_117 = 235,
UID_SV59_Extract_out0 = 236,
UID_GetSStream_118 = 237,
UID_GetSStream_118_Data0 = 238,
UID_Process_119 = 239,
UID_SV60_Extract_out0 = 240,
UID_GetSStream_120 = 241,
UID_GetSStream_120_Data0 = 242,
UID_Process_121 = 243,
UID_SV61_Extract_out0 = 244,
UID_GetSStream_122 = 245,
UID_GetSStream_122_Data0 = 246,
UID_Process_123 = 247,
UID_SV62_Extract_out0 = 248,
UID_GetSStream_124 = 249,
UID_GetSStream_124_Data0 = 250,
UID_Process_125 = 251,
UID_SV63_Extract_out0 = 252,
UID_GetSStream_126 = 253,
UID_GetSStream_126_Data0 = 254,
UID_Process_127 = 255,
UID_SV64_Extract_out0 = 256,
UID_GetSStream_128 = 257,
UID_GetSStream_128_Data0 = 258,
UID_Process_129 = 259,
UID_SV65_Extract_out0 = 260,
UID_GetSStream_130 = 261,
UID_GetSStream_130_Data0 = 262,
UID_Process_131 = 263,
UID_SV66_Extract_out0 = 264,
UID_GetSStream_132 = 265,
UID_GetSStream_132_Data0 = 266,
UID_Process_133 = 267,
UID_SV67_Extract_out0 = 268,
UID_GetSStream_134 = 269,
UID_GetSStream_134_Data0 = 270,
UID_Process_135 = 271,
UID_SV68_Extract_out0 = 272,
UID_GetSStream_136 = 273,
UID_GetSStream_136_Data0 = 274,
UID_Process_137 = 275,
UID_SV69_Extract_out0 = 276,
UID_GetSStream_138 = 277,
UID_GetSStream_138_Data0 = 278,
UID_Process_139 = 279,
UID_SV70_Extract_out0 = 280,
UID_GetSStream_140 = 281,
UID_GetSStream_140_Data0 = 282,
UID_Process_141 = 283,
UID_SV71_Extract_out0 = 284,
UID_GetSStream_142 = 285,
UID_GetSStream_142_Data0 = 286,
UID_Process_143 = 287,
UID_SV72_Extract_out0 = 288,
UID_GetSStream_144 = 289,
UID_GetSStream_144_Data0 = 290,
UID_Process_145 = 291,
UID_SV73_Extract_out0 = 292,
UID_GetSStream_146 = 293,
UID_GetSStream_146_Data0 = 294,
UID_Process_147 = 295,
UID_SV74_Extract_out0 = 296,
UID_GetSStream_148 = 297,
UID_GetSStream_148_Data0 = 298,
UID_Process_149 = 299,
UID_SV75_Extract_out0 = 300,
UID_GetSStream_150 = 301,
UID_GetSStream_150_Data0 = 302,
UID_Process_151 = 303,
UID_SV76_Extract_out0 = 304,
UID_GetSStream_152 = 305,
UID_GetSStream_152_Data0 = 306,
UID_Process_153 = 307,
UID_SV77_Extract_out0 = 308,
UID_GetSStream_154 = 309,
UID_GetSStream_154_Data0 = 310,
UID_Process_155 = 311,
UID_SV78_Extract_out0 = 312,
UID_GetSStream_156 = 313,
UID_GetSStream_156_Data0 = 314,
UID_Process_157 = 315,
UID_SV79_Extract_out0 = 316,
UID_GetSStream_158 = 317,
UID_GetSStream_158_Data0 = 318,
UID_Process_159 = 319,
UID_SV80_Extract_out0 = 320,
UID_GetSStream_160 = 321,
UID_GetSStream_160_Data0 = 322,
UID_Process_161 = 323,
UID_SV81_Extract_out0 = 324,
UID_GetSStream_162 = 325,
UID_GetSStream_162_Data0 = 326,
UID_Process_163 = 327,
UID_SV82_Extract_out0 = 328,
UID_GetSStream_164 = 329,
UID_GetSStream_164_Data0 = 330,
UID_Process_165 = 331,
UID_SV83_Extract_out0 = 332,
UID_GetSStream_166 = 333,
UID_GetSStream_166_Data0 = 334,
UID_Process_167 = 335,
UID_SV84_Extract_out0 = 336,
UID_GetSStream_168 = 337,
UID_GetSStream_168_Data0 = 338,
UID_Process_169 = 339,
UID_SV85_Extract_out0 = 340,
UID_GetSStream_170 = 341,
UID_GetSStream_170_Data0 = 342,
UID_Process_171 = 343,
UID_SV86_Extract_out0 = 344,
UID_GetSStream_172 = 345,
UID_GetSStream_172_Data0 = 346,
UID_Process_173 = 347,
UID_SV87_Extract_out0 = 348,
UID_GetSStream_174 = 349,
UID_GetSStream_174_Data0 = 350,
UID_Process_175 = 351,
UID_SV88_Extract_out0 = 352,
UID_GetSStream_176 = 353,
UID_GetSStream_176_Data0 = 354,
UID_Process_177 = 355,
UID_SV89_Extract_out0 = 356,
UID_GetSStream_178 = 357,
UID_GetSStream_178_Data0 = 358,
UID_Process_179 = 359,
UID_SV90_Extract_out0 = 360,
UID_GetSStream_180 = 361,
UID_GetSStream_180_Data0 = 362,
UID_Process_181 = 363,
UID_SV91_Extract_out0 = 364,
UID_GetSStream_182 = 365,
UID_GetSStream_182_Data0 = 366,
UID_Process_183 = 367,
UID_SV92_Extract_out0 = 368,
UID_GetSStream_184 = 369,
UID_GetSStream_184_Data0 = 370,
UID_Process_185 = 371,
UID_SV93_Extract_out0 = 372,
UID_GetSStream_186 = 373,
UID_GetSStream_186_Data0 = 374,
UID_Process_187 = 375,
UID_SV94_Extract_out0 = 376,
UID_GetSStream_188 = 377,
UID_GetSStream_188_Data0 = 378,
UID_Process_189 = 379,
UID_SV95_Extract_out0 = 380,
UID_GetSStream_190 = 381,
UID_GetSStream_190_Data0 = 382,
UID_Process_191 = 383,
UID_SV96_Extract_out0 = 384,
UID_GetSStream_192 = 385,
UID_GetSStream_192_Data0 = 386,
UID_Process_193 = 387,
UID_SV97_Extract_out0 = 388,
UID_GetSStream_194 = 389,
UID_GetSStream_194_Data0 = 390,
UID_Process_195 = 391,
UID_SV98_Extract_out0 = 392,
UID_GetSStream_196 = 393,
UID_GetSStream_196_Data0 = 394,
UID_Process_197 = 395,
UID_SV99_Extract_out0 = 396,
UID_GetSStream_198 = 397,
UID_GetSStream_198_Data0 = 398,
UID_Process_199 = 399,
UID_SV100_Extract_out0 = 400,
UID_GetSStream_200 = 401,
UID_GetSStream_200_Data0 = 402,
UID_Process_201 = 403,
UID_SV101_Extract_out0 = 404,
UID_GetSStream_202 = 405,
UID_GetSStream_202_Data0 = 406,
UID_Process_203 = 407,
UID_SV102_Extract_out0 = 408,
UID_GetSStream_204 = 409,
UID_GetSStream_204_Data0 = 410,
UID_Process_205 = 411,
UID_SV103_Extract_out0 = 412,
UID_GetSStream_206 = 413,
UID_GetSStream_206_Data0 = 414,
UID_Process_207 = 415,
UID_SV104_Extract_out0 = 416,
UID_GetSStream_208 = 417,
UID_GetSStream_208_Data0 = 418,
UID_Process_209 = 419,
UID_SV105_Extract_out0 = 420,
UID_GetSStream_210 = 421,
UID_GetSStream_210_Data0 = 422,
UID_Process_211 = 423,
UID_SV106_Extract_out0 = 424,
UID_GetSStream_212 = 425,
UID_GetSStream_212_Data0 = 426,
UID_Process_213 = 427,
UID_SV107_Extract_out0 = 428,
UID_GetSStream_214 = 429,
UID_GetSStream_214_Data0 = 430,
UID_Process_215 = 431,
UID_SV108_Extract_out0 = 432,
UID_GetSStream_216 = 433,
UID_GetSStream_216_Data0 = 434,
UID_Process_217 = 435,
UID_SV109_Extract_out0 = 436,
UID_GetSStream_218 = 437,
UID_GetSStream_218_Data0 = 438,
UID_Process_219 = 439,
UID_SV110_Extract_out0 = 440,
UID_GetSStream_220 = 441,
UID_GetSStream_220_Data0 = 442,
UID_Process_221 = 443,
UID_SV111_Extract_out0 = 444,
UID_GetSStream_222 = 445,
UID_GetSStream_222_Data0 = 446,
UID_Process_223 = 447,
UID_SV112_Extract_out0 = 448,
UID_GetSStream_224 = 449,
UID_GetSStream_224_Data0 = 450,
UID_Process_225 = 451,
UID_SV113_Extract_out0 = 452,
UID_GetSStream_226 = 453,
UID_GetSStream_226_Data0 = 454,
UID_Process_227 = 455,
UID_SV114_Extract_out0 = 456,
UID_GetSStream_228 = 457,
UID_GetSStream_228_Data0 = 458,
UID_Process_229 = 459,
UID_SV115_Extract_out0 = 460,
UID_GetSStream_230 = 461,
UID_GetSStream_230_Data0 = 462,
UID_Process_231 = 463,
UID_SV116_Extract_out0 = 464,
UID_GetSStream_232 = 465,
UID_GetSStream_232_Data0 = 466,
UID_Process_233 = 467,
UID_SV117_Extract_out0 = 468,
UID_GetSStream_234 = 469,
UID_GetSStream_234_Data0 = 470,
UID_Process_235 = 471,
UID_SV118_Extract_out0 = 472,
UID_GetSStream_236 = 473,
UID_GetSStream_236_Data0 = 474,
UID_Process_237 = 475,
UID_SV119_Extract_out0 = 476,
UID_GetSStream_238 = 477,
UID_GetSStream_238_Data0 = 478,
UID_Process_239 = 479,
UID_SV120_Extract_out0 = 480,
UID_GetSStream_240 = 481,
UID_GetSStream_240_Data0 = 482,
UID_Process_241 = 483,
UID_SV121_Extract_out0 = 484,
UID_GetSStream_242 = 485,
UID_GetSStream_242_Data0 = 486,
UID_Process_243 = 487,
UID_SV122_Extract_out0 = 488,
UID_GetSStream_244 = 489,
UID_GetSStream_244_Data0 = 490,
UID_Process_245 = 491,
UID_SV123_Extract_out0 = 492,
UID_GetSStream_246 = 493,
UID_GetSStream_246_Data0 = 494,
UID_Process_247 = 495,
UID_SV124_Extract_out0 = 496,
UID_GetSStream_248 = 497,
UID_GetSStream_248_Data0 = 498,
UID_Process_249 = 499,
UID_SV125_Extract_out0 = 500,
UID_GetSStream_250 = 501,
UID_GetSStream_250_Data0 = 502,
UID_Process_251 = 503,
UID_SV126_Extract_out0 = 504,
UID_GetSStream_252 = 505,
UID_GetSStream_252_Data0 = 506,
UID_Process_253 = 507,
UID_SV127_Extract_out0 = 508,
UID_GetSStream_254 = 509,
UID_GetSStream_254_Data0 = 510,
UID_Process_255 = 511,
UID_SV128_Extract_out0 = 512,
UID_GetSStream_256 = 513,
UID_GetSStream_256_Data0 = 514,
UID_Process_257 = 515,
UID_SV129_Extract_out0 = 516,
UID_GetSStream_258 = 517,
UID_GetSStream_258_Data0 = 518,
UID_Process_259 = 519,
UID_SV130_Extract_out0 = 520,
UID_GetSStream_260 = 521,
UID_GetSStream_260_Data0 = 522,
UID_Process_261 = 523,
UID_SV131_Extract_out0 = 524,
UID_GetSStream_262 = 525,
UID_GetSStream_262_Data0 = 526,
UID_Process_263 = 527,
UID_SV132_Extract_out0 = 528,
UID_GetSStream_264 = 529,
UID_GetSStream_264_Data0 = 530,
UID_Process_265 = 531,
UID_SV133_Extract_out0 = 532,
UID_GetSStream_266 = 533,
UID_GetSStream_266_Data0 = 534,
UID_Process_267 = 535,
UID_SV134_Extract_out0 = 536,
UID_GetSStream_268 = 537,
UID_GetSStream_268_Data0 = 538,
UID_Process_269 = 539,
UID_SV135_Extract_out0 = 540,
UID_GetSStream_270 = 541,
UID_GetSStream_270_Data0 = 542,
UID_Process_271 = 543,
UID_SV136_Extract_out0 = 544,
UID_GetSStream_272 = 545,
UID_GetSStream_272_Data0 = 546,
UID_Process_273 = 547,
UID_SV137_Extract_out0 = 548,
UID_GetSStream_274 = 549,
UID_GetSStream_274_Data0 = 550,
UID_Process_275 = 551,
UID_SV138_Extract_out0 = 552,
UID_GetSStream_276 = 553,
UID_GetSStream_276_Data0 = 554,
UID_Process_277 = 555,
UID_SV139_Extract_out0 = 556,
UID_GetSStream_278 = 557,
UID_GetSStream_278_Data0 = 558,
UID_Process_279 = 559,
UID_SV140_Extract_out0 = 560,
UID_GetSStream_280 = 561,
UID_GetSStream_280_Data0 = 562,
UID_Process_281 = 563,
UID_SV141_Extract_out0 = 564,
UID_GetSStream_282 = 565,
UID_GetSStream_282_Data0 = 566,
UID_Process_283 = 567,
UID_SV142_Extract_out0 = 568,
UID_GetSStream_284 = 569,
UID_GetSStream_284_Data0 = 570,
UID_Process_285 = 571,
UID_SV143_Extract_out0 = 572,
UID_GetSStream_286 = 573,
UID_GetSStream_286_Data0 = 574,
UID_Process_287 = 575,
UID_SV144_Extract_out0 = 576,
UID_GetSStream_288 = 577,
UID_GetSStream_288_Data0 = 578,
UID_Process_289 = 579,
UID_SV145_Extract_out0 = 580,
UID_GetSStream_290 = 581,
UID_GetSStream_290_Data0 = 582,
UID_Process_291 = 583,
UID_SV146_Extract_out0 = 584,
UID_GetSStream_292 = 585,
UID_GetSStream_292_Data0 = 586,
UID_Process_293 = 587,
UID_SV147_Extract_out0 = 588,
UID_GetSStream_294 = 589,
UID_GetSStream_294_Data0 = 590,
UID_Process_295 = 591,
UID_SV148_Extract_out0 = 592,
UID_GetSStream_296 = 593,
UID_GetSStream_296_Data0 = 594,
UID_Process_297 = 595,
UID_SV149_Extract_out0 = 596,
UID_GetSStream_298 = 597,
UID_GetSStream_298_Data0 = 598,
UID_Process_299 = 599,
UID_SV150_Extract_out0 = 600,
UID_GetSStream_300 = 601,
UID_GetSStream_300_Data0 = 602,
UID_Process_301 = 603,
UID_SV151_Extract_out0 = 604,
UID_GetSStream_302 = 605,
UID_GetSStream_302_Data0 = 606,
UID_Process_303 = 607,
UID_SV152_Extract_out0 = 608,
UID_GetSStream_304 = 609,
UID_GetSStream_304_Data0 = 610,
UID_Process_305 = 611,
UID_SV153_Extract_out0 = 612,
UID_GetSStream_306 = 613,
UID_GetSStream_306_Data0 = 614,
UID_Process_307 = 615,
UID_SV154_Extract_out0 = 616,
UID_GetSStream_308 = 617,
UID_GetSStream_308_Data0 = 618,
UID_Process_309 = 619,
UID_SV155_Extract_out0 = 620,
UID_GetSStream_310 = 621,
UID_GetSStream_310_Data0 = 622,
UID_Process_311 = 623,
UID_SV156_Extract_out0 = 624,
UID_GetSStream_312 = 625,
UID_GetSStream_312_Data0 = 626,
UID_Process_313 = 627,
UID_SV157_Extract_out0 = 628,
UID_GetSStream_314 = 629,
UID_GetSStream_314_Data0 = 630,
UID_Process_315 = 631,
UID_SV158_Extract_out0 = 632,
UID_GetSStream_316 = 633,
UID_GetSStream_316_Data0 = 634,
UID_Process_317 = 635,
UID_SV159_Extract_out0 = 636,
UID_GetSStream_318 = 637,
UID_GetSStream_318_Data0 = 638,
UID_Process_319 = 639,
UID_SV160_Extract_out0 = 640,
UID_GetSStream_320 = 641,
UID_GetSStream_320_Data0 = 642,
UID_Process_321 = 643,
UID_SV161_Extract_out0 = 644,
UID_GetSStream_322 = 645,
UID_GetSStream_322_Data0 = 646,
UID_Process_323 = 647,
UID_SV162_Extract_out0 = 648,
UID_GetSStream_324 = 649,
UID_GetSStream_324_Data0 = 650,
UID_Process_325 = 651,
UID_SV163_Extract_out0 = 652,
UID_GetSStream_326 = 653,
UID_GetSStream_326_Data0 = 654,
UID_Process_327 = 655,
UID_SV164_Extract_out0 = 656,
UID_GetSStream_328 = 657,
UID_GetSStream_328_Data0 = 658,
UID_Process_329 = 659,
UID_SV165_Extract_out0 = 660,
UID_GetSStream_330 = 661,
UID_GetSStream_330_Data0 = 662,
UID_Process_331 = 663,
UID_SV166_Extract_out0 = 664,
UID_GetSStream_332 = 665,
UID_GetSStream_332_Data0 = 666,
UID_Process_333 = 667,
UID_SV167_Extract_out0 = 668,
UID_GetSStream_334 = 669,
UID_GetSStream_334_Data0 = 670,
UID_Process_335 = 671,
UID_SV168_Extract_out0 = 672,
UID_GetSStream_336 = 673,
UID_GetSStream_336_Data0 = 674,
UID_Process_337 = 675,
UID_SV169_Extract_out0 = 676,
UID_GetSStream_338 = 677,
UID_GetSStream_338_Data0 = 678,
UID_Process_339 = 679,
UID_SV170_Extract_out0 = 680,
UID_GetSStream_340 = 681,
UID_GetSStream_340_Data0 = 682,
UID_Process_341 = 683,
UID_SV171_Extract_out0 = 684,
UID_GetSStream_342 = 685,
UID_GetSStream_342_Data0 = 686,
UID_Process_343 = 687,
UID_SV172_Extract_out0 = 688,
UID_GetSStream_344 = 689,
UID_GetSStream_344_Data0 = 690,
UID_Process_345 = 691,
UID_SV173_Extract_out0 = 692,
UID_GetSStream_346 = 693,
UID_GetSStream_346_Data0 = 694,
UID_Process_347 = 695,
UID_SV174_Extract_out0 = 696,
UID_GetSStream_348 = 697,
UID_GetSStream_348_Data0 = 698,
UID_Process_349 = 699,
UID_SV175_Extract_out0 = 700,
UID_GetSStream_350 = 701,
UID_GetSStream_350_Data0 = 702,
UID_Process_351 = 703,
UID_SV176_Extract_out0 = 704,
UID_GetSStream_352 = 705,
UID_GetSStream_352_Data0 = 706,
UID_Process_353 = 707,
UID_SV177_Extract_out0 = 708,
UID_GetSStream_354 = 709,
UID_GetSStream_354_Data0 = 710,
UID_Process_355 = 711,
UID_SV178_Extract_out0 = 712,
UID_GetSStream_356 = 713,
UID_GetSStream_356_Data0 = 714,
UID_Process_357 = 715,
UID_SV179_Extract_out0 = 716,
UID_GetSStream_358 = 717,
UID_GetSStream_358_Data0 = 718,
UID_Process_359 = 719,
UID_SV180_Extract_out0 = 720,
UID_GetSStream_360 = 721,
UID_GetSStream_360_Data0 = 722,
UID_Process_361 = 723,
UID_SV181_Extract_out0 = 724,
UID_GetSStream_362 = 725,
UID_GetSStream_362_Data0 = 726,
UID_Process_363 = 727,
UID_SV182_Extract_out0 = 728,
UID_GetSStream_364 = 729,
UID_GetSStream_364_Data0 = 730,
UID_Process_365 = 731,
UID_SV183_Extract_out0 = 732,
UID_GetSStream_366 = 733,
UID_GetSStream_366_Data0 = 734,
UID_Process_367 = 735,
UID_SV184_Extract_out0 = 736,
UID_GetSStream_368 = 737,
UID_GetSStream_368_Data0 = 738,
UID_Process_369 = 739,
UID_SV185_Extract_out0 = 740,
UID_GetSStream_370 = 741,
UID_GetSStream_370_Data0 = 742,
UID_Process_371 = 743,
UID_SV186_Extract_out0 = 744,
UID_GetSStream_372 = 745,
UID_GetSStream_372_Data0 = 746,
UID_Process_373 = 747,
UID_SV187_Extract_out0 = 748,
UID_GetSStream_374 = 749,
UID_GetSStream_374_Data0 = 750,
UID_Process_375 = 751,
UID_SV188_Extract_out0 = 752,
UID_GetSStream_376 = 753,
UID_GetSStream_376_Data0 = 754,
UID_Process_377 = 755,
UID_SV189_Extract_out0 = 756,
UID_GetSStream_378 = 757,
UID_GetSStream_378_Data0 = 758,
UID_Process_379 = 759,
UID_SV190_Extract_out0 = 760,
UID_GetSStream_380 = 761,
UID_GetSStream_380_Data0 = 762,
UID_Process_381 = 763,
UID_SV191_Extract_out0 = 764,
UID_GetSStream_382 = 765,
UID_GetSStream_382_Data0 = 766,
UID_Process_383 = 767,
UID_SV192_Extract_out0 = 768,
UID_GetSStream_384 = 769,
UID_GetSStream_384_Data0 = 770,
UID_Process_385 = 771,
UID_SV193_Extract_out0 = 772,
UID_GetSStream_386 = 773,
UID_GetSStream_386_Data0 = 774,
UID_Process_387 = 775,
UID_SV194_Extract_out0 = 776,
UID_GetSStream_388 = 777,
UID_GetSStream_388_Data0 = 778,
UID_Process_389 = 779,
UID_SV195_Extract_out0 = 780,
UID_GetSStream_390 = 781,
UID_GetSStream_390_Data0 = 782,
UID_Process_391 = 783,
UID_SV196_Extract_out0 = 784,
UID_GetSStream_392 = 785,
UID_GetSStream_392_Data0 = 786,
UID_Process_393 = 787,
UID_SV197_Extract_out0 = 788,
UID_GetSStream_394 = 789,
UID_GetSStream_394_Data0 = 790,
UID_Process_395 = 791,
UID_SV198_Extract_out0 = 792,
UID_GetSStream_396 = 793,
UID_GetSStream_396_Data0 = 794,
UID_Process_397 = 795,
UID_SV199_Extract_out0 = 796,
UID_GetSStream_398 = 797,
UID_GetSStream_398_Data0 = 798,
UID_Process_399 = 799,
UID_SV200_Extract_out0 = 800,
UID_GetSStream_400 = 801,
UID_GetSStream_400_Data0 = 802,
UID_Process_401 = 803,
UID_SV201_Extract_out0 = 804,
UID_GetSStream_402 = 805,
UID_GetSStream_402_Data0 = 806,
UID_Process_403 = 807,
UID_SV202_Extract_out0 = 808,
UID_GetSStream_404 = 809,
UID_GetSStream_404_Data0 = 810,
UID_Process_405 = 811,
UID_SV203_Extract_out0 = 812,
UID_GetSStream_406 = 813,
UID_GetSStream_406_Data0 = 814,
UID_Process_407 = 815,
UID_SV204_Extract_out0 = 816,
UID_GetSStream_408 = 817,
UID_GetSStream_408_Data0 = 818,
UID_Process_409 = 819,
UID_SV205_Extract_out0 = 820,
UID_GetSStream_410 = 821,
UID_GetSStream_410_Data0 = 822,
UID_Process_411 = 823,
UID_SV206_Extract_out0 = 824,
UID_GetSStream_412 = 825,
UID_GetSStream_412_Data0 = 826,
UID_Process_413 = 827,
UID_SV207_Extract_out0 = 828,
UID_GetSStream_414 = 829,
UID_GetSStream_414_Data0 = 830,
UID_Process_415 = 831,
UID_SV208_Extract_out0 = 832,
UID_GetSStream_416 = 833,
UID_GetSStream_416_Data0 = 834,
UID_Process_417 = 835,
UID_SV209_Extract_out0 = 836,
UID_GetSStream_418 = 837,
UID_GetSStream_418_Data0 = 838,
UID_Process_419 = 839,
UID_SV210_Extract_out0 = 840,
UID_GetSStream_420 = 841,
UID_GetSStream_420_Data0 = 842,
UID_Process_421 = 843,
UID_SV211_Extract_out0 = 844,
UID_GetSStream_422 = 845,
UID_GetSStream_422_Data0 = 846,
UID_Process_423 = 847,
UID_SV212_Extract_out0 = 848,
UID_GetSStream_424 = 849,
UID_GetSStream_424_Data0 = 850,
UID_Process_425 = 851,
UID_SV213_Extract_out0 = 852,
UID_GetSStream_426 = 853,
UID_GetSStream_426_Data0 = 854,
UID_Process_427 = 855,
UID_SV214_Extract_out0 = 856,
UID_GetSStream_428 = 857,
UID_GetSStream_428_Data0 = 858,
UID_Process_429 = 859,
UID_SV215_Extract_out0 = 860,
UID_GetSStream_430 = 861,
UID_GetSStream_430_Data0 = 862,
UID_Process_431 = 863,
UID_SV216_Extract_out0 = 864,
UID_GetSStream_432 = 865,
UID_GetSStream_432_Data0 = 866,
UID_Process_433 = 867,
UID_SV217_Extract_out0 = 868,
UID_GetSStream_434 = 869,
UID_GetSStream_434_Data0 = 870,
UID_Process_435 = 871,
UID_SV218_Extract_out0 = 872,
UID_GetSStream_436 = 873,
UID_GetSStream_436_Data0 = 874,
UID_Process_437 = 875,
UID_SV219_Extract_out0 = 876,
UID_GetSStream_438 = 877,
UID_GetSStream_438_Data0 = 878,
UID_Process_439 = 879,
UID_SV220_Extract_out0 = 880,
UID_GetSStream_440 = 881,
UID_GetSStream_440_Data0 = 882,
UID_Process_441 = 883,
UID_SV221_Extract_out0 = 884,
UID_GetSStream_442 = 885,
UID_GetSStream_442_Data0 = 886,
UID_Process_443 = 887,
UID_SV222_Extract_out0 = 888,
UID_GetSStream_444 = 889,
UID_GetSStream_444_Data0 = 890,
UID_Process_445 = 891,
UID_SV223_Extract_out0 = 892,
UID_GetSStream_446 = 893,
UID_GetSStream_446_Data0 = 894,
UID_Process_447 = 895,
UID_SV224_Extract_out0 = 896,
UID_GetSStream_448 = 897,
UID_GetSStream_448_Data0 = 898,
UID_Process_449 = 899,
UID_SV225_Extract_out0 = 900,
UID_GetSStream_450 = 901,
UID_GetSStream_450_Data0 = 902,
UID_Process_451 = 903,
UID_SV226_Extract_out0 = 904,
UID_GetSStream_452 = 905,
UID_GetSStream_452_Data0 = 906,
UID_Process_453 = 907,
UID_SV227_Extract_out0 = 908,
UID_GetSStream_454 = 909,
UID_GetSStream_454_Data0 = 910,
UID_Process_455 = 911,
UID_SV228_Extract_out0 = 912,
UID_GetSStream_456 = 913,
UID_GetSStream_456_Data0 = 914,
UID_Process_457 = 915,
UID_SV229_Extract_out0 = 916,
UID_GetSStream_458 = 917,
UID_GetSStream_458_Data0 = 918,
UID_Process_459 = 919,
UID_SV230_Extract_out0 = 920,
UID_GetSStream_460 = 921,
UID_GetSStream_460_Data0 = 922,
UID_Process_461 = 923,
UID_SV231_Extract_out0 = 924,
UID_GetSStream_462 = 925,
UID_GetSStream_462_Data0 = 926,
UID_Process_463 = 927,
UID_SV232_Extract_out0 = 928,
UID_GetSStream_464 = 929,
UID_GetSStream_464_Data0 = 930,
UID_Process_465 = 931,
UID_SV233_Extract_out0 = 932,
UID_GetSStream_466 = 933,
UID_GetSStream_466_Data0 = 934,
UID_Process_467 = 935,
UID_SV234_Extract_out0 = 936,
UID_GetSStream_468 = 937,
UID_GetSStream_468_Data0 = 938,
UID_Process_469 = 939,
UID_SV235_Extract_out0 = 940,
UID_GetSStream_470 = 941,
UID_GetSStream_470_Data0 = 942,
UID_Process_471 = 943,
UID_SV236_Extract_out0 = 944,
UID_GetSStream_472 = 945,
UID_GetSStream_472_Data0 = 946,
UID_Process_473 = 947,
UID_SV237_Extract_out0 = 948,
UID_GetSStream_474 = 949,
UID_GetSStream_474_Data0 = 950,
UID_Process_475 = 951,
UID_SV238_Extract_out0 = 952,
UID_GetSStream_476 = 953,
UID_GetSStream_476_Data0 = 954,
UID_Process_477 = 955,
UID_SV239_Extract_out0 = 956,
UID_GetSStream_478 = 957,
UID_GetSStream_478_Data0 = 958,
UID_Process_479 = 959,
UID_SV240_Extract_out0 = 960,
UID_GetSStream_480 = 961,
UID_GetSStream_480_Data0 = 962,
UID_Process_481 = 963,
UID_SV241_Extract_out0 = 964,
UID_GetSStream_482 = 965,
UID_GetSStream_482_Data0 = 966,
UID_Process_483 = 967,
UID_SV242_Extract_out0 = 968,
UID_GetSStream_484 = 969,
UID_GetSStream_484_Data0 = 970,
UID_Process_485 = 971,
UID_SV243_Extract_out0 = 972,
UID_GetSStream_486 = 973,
UID_GetSStream_486_Data0 = 974,
UID_Process_487 = 975,
UID_SV244_Extract_out0 = 976,
UID_GetSStream_488 = 977,
UID_GetSStream_488_Data0 = 978,
UID_Process_489 = 979,
UID_SV245_Extract_out0 = 980,
UID_GetSStream_490 = 981,
UID_GetSStream_490_Data0 = 982,
UID_Process_491 = 983,
UID_SV246_Extract_out0 = 984,
UID_GetSStream_492 = 985,
UID_GetSStream_492_Data0 = 986,
UID_Process_493 = 987,
UID_SV247_Extract_out0 = 988,
UID_GetSStream_494 = 989,
UID_GetSStream_494_Data0 = 990,
UID_Process_495 = 991,
UID_SV248_Extract_out0 = 992,
UID_GetSStream_496 = 993,
UID_GetSStream_496_Data0 = 994,
UID_Process_497 = 995,
UID_SV249_Extract_out0 = 996,
UID_GetSStream_498 = 997,
UID_GetSStream_498_Data0 = 998,
UID_Process_499 = 999,
UID_SV250_Extract_out0 = 1000,
UID_GetSStream_500 = 1001,
UID_GetSStream_500_Data0 = 1002,
UID_Process_501 = 1003,
UID_SV251_Extract_out0 = 1004,
UID_GetSStream_502 = 1005,
UID_GetSStream_502_Data0 = 1006,
UID_Process_503 = 1007,
UID_SV252_Extract_out0 = 1008,
UID_GetSStream_504 = 1009,
UID_GetSStream_504_Data0 = 1010,
UID_Process_505 = 1011,
UID_SV253_Extract_out0 = 1012,
UID_GetSStream_506 = 1013,
UID_GetSStream_506_Data0 = 1014,
UID_Process_507 = 1015,
UID_SV254_Extract_out0 = 1016,
UID_GetSStream_508 = 1017,
UID_GetSStream_508_Data0 = 1018,
UID_Process_509 = 1019,
UID_SV255_Extract_out0 = 1020,
UID_GetSStream_510 = 1021,
UID_GetSStream_510_Data0 = 1022,
UID_Process_511 = 1023,
UID_SV256_Extract_out0 = 1024,
UID_GetSStream_512 = 1025,
UID_GetSStream_512_Data0 = 1026,
UID_Process_513 = 1027,
UID_SV257_Extract_out0 = 1028,
UID_GetSStream_514 = 1029,
UID_GetSStream_514_Data0 = 1030,
UID_Process_515 = 1031,
UID_SV258_Extract_out0 = 1032,
UID_GetSStream_516 = 1033,
UID_GetSStream_516_Data0 = 1034,
UID_Process_517 = 1035,
UID_SV259_Extract_out0 = 1036,
UID_GetSStream_518 = 1037,
UID_GetSStream_518_Data0 = 1038,
UID_Process_519 = 1039,
UID_SV260_Extract_out0 = 1040,
UID_GetSStream_520 = 1041,
UID_GetSStream_520_Data0 = 1042,
UID_Process_521 = 1043,
UID_SV261_Extract_out0 = 1044,
UID_GetSStream_522 = 1045,
UID_GetSStream_522_Data0 = 1046,
UID_Process_523 = 1047,
UID_SV262_Extract_out0 = 1048,
UID_GetSStream_524 = 1049,
UID_GetSStream_524_Data0 = 1050,
UID_Process_525 = 1051,
UID_SV263_Extract_out0 = 1052,
UID_GetSStream_526 = 1053,
UID_GetSStream_526_Data0 = 1054,
UID_Process_527 = 1055,
UID_SV264_Extract_out0 = 1056,
UID_GetSStream_528 = 1057,
UID_GetSStream_528_Data0 = 1058,
UID_Process_529 = 1059,
UID_SV265_Extract_out0 = 1060,
UID_GetSStream_530 = 1061,
UID_GetSStream_530_Data0 = 1062,
UID_Process_531 = 1063,
UID_SV266_Extract_out0 = 1064,
UID_GetSStream_532 = 1065,
UID_GetSStream_532_Data0 = 1066,
UID_Process_533 = 1067,
UID_SV267_Extract_out0 = 1068,
UID_GetSStream_534 = 1069,
UID_GetSStream_534_Data0 = 1070,
UID_Process_535 = 1071,
UID_SV268_Extract_out0 = 1072,
UID_GetSStream_536 = 1073,
UID_GetSStream_536_Data0 = 1074,
UID_Process_537 = 1075,
UID_SV269_Extract_out0 = 1076,
UID_GetSStream_538 = 1077,
UID_GetSStream_538_Data0 = 1078,
UID_Process_539 = 1079,
UID_SV270_Extract_out0 = 1080,
UID_GetSStream_540 = 1081,
UID_GetSStream_540_Data0 = 1082,
UID_Process_541 = 1083,
UID_SV271_Extract_out0 = 1084,
UID_GetSStream_542 = 1085,
UID_GetSStream_542_Data0 = 1086,
UID_Process_543 = 1087,
UID_SV272_Extract_out0 = 1088,
UID_GetSStream_544 = 1089,
UID_GetSStream_544_Data0 = 1090,
UID_Process_545 = 1091,
UID_SV273_Extract_out0 = 1092,
UID_GetSStream_546 = 1093,
UID_GetSStream_546_Data0 = 1094,
UID_Process_547 = 1095,
UID_SV274_Extract_out0 = 1096,
UID_GetSStream_548 = 1097,
UID_GetSStream_548_Data0 = 1098,
UID_Process_549 = 1099,
UID_SV275_Extract_out0 = 1100,
UID_GetSStream_550 = 1101,
UID_GetSStream_550_Data0 = 1102,
UID_Process_551 = 1103,
UID_SV276_Extract_out0 = 1104,
UID_GetSStream_552 = 1105,
UID_GetSStream_552_Data0 = 1106,
UID_Process_553 = 1107,
UID_SV277_Extract_out0 = 1108,
UID_GetSStream_554 = 1109,
UID_GetSStream_554_Data0 = 1110,
UID_Process_555 = 1111,
UID_SV278_Extract_out0 = 1112,
UID_GetSStream_556 = 1113,
UID_GetSStream_556_Data0 = 1114,
UID_Process_557 = 1115,
UID_SV279_Extract_out0 = 1116,
UID_GetSStream_558 = 1117,
UID_GetSStream_558_Data0 = 1118,
UID_Process_559 = 1119,
UID_SV280_Extract_out0 = 1120,
UID_GetSStream_560 = 1121,
UID_GetSStream_560_Data0 = 1122,
UID_Process_561 = 1123,
UID_SV281_Extract_out0 = 1124,
UID_GetSStream_562 = 1125,
UID_GetSStream_562_Data0 = 1126,
UID_Process_563 = 1127,
UID_SV282_Extract_out0 = 1128,
UID_GetSStream_564 = 1129,
UID_GetSStream_564_Data0 = 1130,
UID_Process_565 = 1131,
UID_SV283_Extract_out0 = 1132,
UID_GetSStream_566 = 1133,
UID_GetSStream_566_Data0 = 1134,
UID_Process_567 = 1135,
UID_SV284_Extract_out0 = 1136,
UID_GetSStream_568 = 1137,
UID_GetSStream_568_Data0 = 1138,
UID_Process_569 = 1139,
UID_SV285_Extract_out0 = 1140,
UID_GetSStream_570 = 1141,
UID_GetSStream_570_Data0 = 1142,
UID_Process_571 = 1143,
UID_SV286_Extract_out0 = 1144,
UID_GetSStream_572 = 1145,
UID_GetSStream_572_Data0 = 1146,
UID_Process_573 = 1147,
UID_SV287_Extract_out0 = 1148,
UID_GetSStream_574 = 1149,
UID_GetSStream_574_Data0 = 1150,
UID_Process_575 = 1151,
UID_SV288_Extract_out0 = 1152,
UID_GetSStream_576 = 1153,
UID_GetSStream_576_Data0 = 1154,
UID_Process_577 = 1155,
UID_SV289_Extract_out0 = 1156,
UID_GetSStream_578 = 1157,
UID_GetSStream_578_Data0 = 1158,
UID_Process_579 = 1159,
UID_SV290_Extract_out0 = 1160,
UID_GetSStream_580 = 1161,
UID_GetSStream_580_Data0 = 1162,
UID_Process_581 = 1163,
UID_SV291_Extract_out0 = 1164,
UID_GetSStream_582 = 1165,
UID_GetSStream_582_Data0 = 1166,
UID_Process_583 = 1167,
UID_SV292_Extract_out0 = 1168,
UID_GetSStream_584 = 1169,
UID_GetSStream_584_Data0 = 1170,
UID_Process_585 = 1171,
UID_SV293_Extract_out0 = 1172,
UID_GetSStream_586 = 1173,
UID_GetSStream_586_Data0 = 1174,
UID_Process_587 = 1175,
UID_SV294_Extract_out0 = 1176,
UID_GetSStream_588 = 1177,
UID_GetSStream_588_Data0 = 1178,
UID_Process_589 = 1179,
UID_SV295_Extract_out0 = 1180,
UID_GetSStream_590 = 1181,
UID_GetSStream_590_Data0 = 1182,
UID_Process_591 = 1183,
UID_SV296_Extract_out0 = 1184,
UID_GetSStream_592 = 1185,
UID_GetSStream_592_Data0 = 1186,
UID_Process_593 = 1187,
UID_SV297_Extract_out0 = 1188,
UID_GetSStream_594 = 1189,
UID_GetSStream_594_Data0 = 1190,
UID_Process_595 = 1191,
UID_SV298_Extract_out0 = 1192,
UID_GetSStream_596 = 1193,
UID_GetSStream_596_Data0 = 1194,
UID_Process_597 = 1195,
UID_SV299_Extract_out0 = 1196,
UID_GetSStream_598 = 1197,
UID_GetSStream_598_Data0 = 1198,
UID_Process_599 = 1199,
UID_SV300_Extract_out0 = 1200,
UID_GetSStream_600 = 1201,
UID_GetSStream_600_Data0 = 1202,
UID_Process_601 = 1203,
UID_SV301_Extract_out0 = 1204,
UID_GetSStream_602 = 1205,
UID_GetSStream_602_Data0 = 1206,
UID_Process_603 = 1207,
UID_SV302_Extract_out0 = 1208,
UID_GetSStream_604 = 1209,
UID_GetSStream_604_Data0 = 1210,
UID_Process_605 = 1211,
UID_SV303_Extract_out0 = 1212,
UID_GetSStream_606 = 1213,
UID_GetSStream_606_Data0 = 1214,
UID_Process_607 = 1215,
UID_SV304_Extract_out0 = 1216,
UID_GetSStream_608 = 1217,
UID_GetSStream_608_Data0 = 1218,
UID_Process_609 = 1219,
UID_SV305_Extract_out0 = 1220,
UID_GetSStream_610 = 1221,
UID_GetSStream_610_Data0 = 1222,
UID_Process_611 = 1223,
UID_SV306_Extract_out0 = 1224,
UID_GetSStream_612 = 1225,
UID_GetSStream_612_Data0 = 1226,
UID_Process_613 = 1227,
UID_SV307_Extract_out0 = 1228,
UID_GetSStream_614 = 1229,
UID_GetSStream_614_Data0 = 1230,
UID_Process_615 = 1231,
UID_SV308_Extract_out0 = 1232,
UID_GetSStream_616 = 1233,
UID_GetSStream_616_Data0 = 1234,
UID_Process_617 = 1235,
UID_SV309_Extract_out0 = 1236,
UID_GetSStream_618 = 1237,
UID_GetSStream_618_Data0 = 1238,
UID_Process_619 = 1239,
UID_SV310_Extract_out0 = 1240,
UID_GetSStream_620 = 1241,
UID_GetSStream_620_Data0 = 1242,
UID_Process_621 = 1243,
UID_SV311_Extract_out0 = 1244,
UID_GetSStream_622 = 1245,
UID_GetSStream_622_Data0 = 1246,
UID_Process_623 = 1247,
UID_SV312_Extract_out0 = 1248,
UID_GetSStream_624 = 1249,
UID_GetSStream_624_Data0 = 1250,
UID_Process_625 = 1251,
UID_SV313_Extract_out0 = 1252,
UID_GetSStream_626 = 1253,
UID_GetSStream_626_Data0 = 1254,
UID_Process_627 = 1255,
UID_SV314_Extract_out0 = 1256,
UID_GetSStream_628 = 1257,
UID_GetSStream_628_Data0 = 1258,
UID_Process_629 = 1259,
UID_SV315_Extract_out0 = 1260,
UID_GetSStream_630 = 1261,
UID_GetSStream_630_Data0 = 1262,
UID_Process_631 = 1263,
UID_SV316_Extract_out0 = 1264,
UID_GetSStream_632 = 1265,
UID_GetSStream_632_Data0 = 1266,
UID_Process_633 = 1267,
UID_SV317_Extract_out0 = 1268,
UID_GetSStream_634 = 1269,
UID_GetSStream_634_Data0 = 1270,
UID_Process_635 = 1271,
UID_SV318_Extract_out0 = 1272,
UID_GetSStream_636 = 1273,
UID_GetSStream_636_Data0 = 1274,
UID_Process_637 = 1275,
UID_SV319_Extract_out0 = 1276,
UID_GetSStream_638 = 1277,
UID_GetSStream_638_Data0 = 1278,
UID_Process_639 = 1279,
UID_SV320_Extract_out0 = 1280,
UID_GetSStream_640 = 1281,
UID_GetSStream_640_Data0 = 1282,
UID_Process_641 = 1283,
UID_SV321_Extract_out0 = 1284,
UID_GetSStream_642 = 1285,
UID_GetSStream_642_Data0 = 1286,
UID_Process_643 = 1287,
UID_SV322_Extract_out0 = 1288,
UID_GetSStream_644 = 1289,
UID_GetSStream_644_Data0 = 1290,
UID_Process_645 = 1291,
UID_SV323_Extract_out0 = 1292,
UID_GetSStream_646 = 1293,
UID_GetSStream_646_Data0 = 1294,
UID_Process_647 = 1295,
UID_SV324_Extract_out0 = 1296,
UID_GetSStream_648 = 1297,
UID_GetSStream_648_Data0 = 1298,
UID_Process_649 = 1299,
UID_SV325_Extract_out0 = 1300,
UID_GetSStream_650 = 1301,
UID_GetSStream_650_Data0 = 1302,
UID_Process_651 = 1303,
UID_SV326_Extract_out0 = 1304,
UID_GetSStream_652 = 1305,
UID_GetSStream_652_Data0 = 1306,
UID_Process_653 = 1307,
UID_SV327_Extract_out0 = 1308,
UID_GetSStream_654 = 1309,
UID_GetSStream_654_Data0 = 1310,
UID_Process_655 = 1311,
UID_SV328_Extract_out0 = 1312,
UID_GetSStream_656 = 1313,
UID_GetSStream_656_Data0 = 1314,
UID_Process_657 = 1315,
UID_SV329_Extract_out0 = 1316,
UID_GetSStream_658 = 1317,
UID_GetSStream_658_Data0 = 1318,
UID_Process_659 = 1319,
UID_SV330_Extract_out0 = 1320,
UID_GetSStream_660 = 1321,
UID_GetSStream_660_Data0 = 1322,
UID_Process_661 = 1323,
UID_SV331_Extract_out0 = 1324,
UID_GetSStream_662 = 1325,
UID_GetSStream_662_Data0 = 1326,
UID_Process_663 = 1327,
UID_SV332_Extract_out0 = 1328,
UID_GetSStream_664 = 1329,
UID_GetSStream_664_Data0 = 1330,
UID_Process_665 = 1331,
UID_SV333_Extract_out0 = 1332,
UID_GetSStream_666 = 1333,
UID_GetSStream_666_Data0 = 1334,
UID_Process_667 = 1335,
UID_SV334_Extract_out0 = 1336,
UID_GetSStream_668 = 1337,
UID_GetSStream_668_Data0 = 1338,
UID_Process_669 = 1339,
UID_SV335_Extract_out0 = 1340,
UID_GetSStream_670 = 1341,
UID_GetSStream_670_Data0 = 1342,
UID_Process_671 = 1343,
UID_SV336_Extract_out0 = 1344,
UID_GetSStream_672 = 1345,
UID_GetSStream_672_Data0 = 1346,
UID_Process_673 = 1347,
UID_SV337_Extract_out0 = 1348,
UID_GetSStream_674 = 1349,
UID_GetSStream_674_Data0 = 1350,
UID_Process_675 = 1351,
UID_SV338_Extract_out0 = 1352,
UID_GetSStream_676 = 1353,
UID_GetSStream_676_Data0 = 1354,
UID_Process_677 = 1355,
UID_SV339_Extract_out0 = 1356,
UID_GetSStream_678 = 1357,
UID_GetSStream_678_Data0 = 1358,
UID_Process_679 = 1359,
UID_SV340_Extract_out0 = 1360,
UID_GetSStream_680 = 1361,
UID_GetSStream_680_Data0 = 1362,
UID_Process_681 = 1363,
UID_SV341_Extract_out0 = 1364,
UID_GetSStream_682 = 1365,
UID_GetSStream_682_Data0 = 1366,
UID_Process_683 = 1367,
UID_SV342_Extract_out0 = 1368,
UID_GetSStream_684 = 1369,
UID_GetSStream_684_Data0 = 1370,
UID_Process_685 = 1371,
UID_SV343_Extract_out0 = 1372,
UID_GetSStream_686 = 1373,
UID_GetSStream_686_Data0 = 1374,
UID_Process_687 = 1375,
UID_SV344_Extract_out0 = 1376,
UID_GetSStream_688 = 1377,
UID_GetSStream_688_Data0 = 1378,
UID_Process_689 = 1379,
UID_SV345_Extract_out0 = 1380,
UID_GetSStream_690 = 1381,
UID_GetSStream_690_Data0 = 1382,
UID_Process_691 = 1383,
UID_SV346_Extract_out0 = 1384,
UID_GetSStream_692 = 1385,
UID_GetSStream_692_Data0 = 1386,
UID_Process_693 = 1387,
UID_SV347_Extract_out0 = 1388,
UID_GetSStream_694 = 1389,
UID_GetSStream_694_Data0 = 1390,
UID_Process_695 = 1391,
UID_SV348_Extract_out0 = 1392,
UID_GetSStream_696 = 1393,
UID_GetSStream_696_Data0 = 1394,
UID_Process_697 = 1395,
UID_SV349_Extract_out0 = 1396,
UID_GetSStream_698 = 1397,
UID_GetSStream_698_Data0 = 1398,
UID_Process_699 = 1399,
UID_SV350_Extract_out0 = 1400,
UID_GetSStream_700 = 1401,
UID_GetSStream_700_Data0 = 1402,
UID_Process_701 = 1403,
UID_SV351_Extract_out0 = 1404,
UID_GetSStream_702 = 1405,
UID_GetSStream_702_Data0 = 1406,
UID_Process_703 = 1407,
UID_SV352_Extract_out0 = 1408,
UID_GetSStream_704 = 1409,
UID_GetSStream_704_Data0 = 1410,
UID_Process_705 = 1411,
UID_SV353_Extract_out0 = 1412,
UID_GetSStream_706 = 1413,
UID_GetSStream_706_Data0 = 1414,
UID_Process_707 = 1415,
UID_SV354_Extract_out0 = 1416,
UID_GetSStream_708 = 1417,
UID_GetSStream_708_Data0 = 1418,
UID_Process_709 = 1419,
UID_SV355_Extract_out0 = 1420,
UID_GetSStream_710 = 1421,
UID_GetSStream_710_Data0 = 1422,
UID_Process_711 = 1423,
UID_SV356_Extract_out0 = 1424,
UID_GetSStream_712 = 1425,
UID_GetSStream_712_Data0 = 1426,
UID_Process_713 = 1427,
UID_SV357_Extract_out0 = 1428,
UID_GetSStream_714 = 1429,
UID_GetSStream_714_Data0 = 1430,
UID_Process_715 = 1431,
UID_SV358_Extract_out0 = 1432,
UID_GetSStream_716 = 1433,
UID_GetSStream_716_Data0 = 1434,
UID_Process_717 = 1435,
UID_SV359_Extract_out0 = 1436,
UID_GetSStream_718 = 1437,
UID_GetSStream_718_Data0 = 1438,
UID_Process_719 = 1439,
UID_SV360_Extract_out0 = 1440,
UID_GetSStream_720 = 1441,
UID_GetSStream_720_Data0 = 1442,
UID_Process_721 = 1443,
UID_SV361_Extract_out0 = 1444,
UID_GetSStream_722 = 1445,
UID_GetSStream_722_Data0 = 1446,
UID_Process_723 = 1447,
UID_SV362_Extract_out0 = 1448,
UID_GetSStream_724 = 1449,
UID_GetSStream_724_Data0 = 1450,
UID_Process_725 = 1451,
UID_SV363_Extract_out0 = 1452,
UID_GetSStream_726 = 1453,
UID_GetSStream_726_Data0 = 1454,
UID_Process_727 = 1455,
UID_SV364_Extract_out0 = 1456,
UID_GetSStream_728 = 1457,
UID_GetSStream_728_Data0 = 1458,
UID_Process_729 = 1459,
UID_SV365_Extract_out0 = 1460,
UID_GetSStream_730 = 1461,
UID_GetSStream_730_Data0 = 1462,
UID_Process_731 = 1463,
UID_SV366_Extract_out0 = 1464,
UID_GetSStream_732 = 1465,
UID_GetSStream_732_Data0 = 1466,
UID_Process_733 = 1467,
UID_SV367_Extract_out0 = 1468,
UID_GetSStream_734 = 1469,
UID_GetSStream_734_Data0 = 1470,
UID_Process_735 = 1471,
UID_SV368_Extract_out0 = 1472,
UID_GetSStream_736 = 1473,
UID_GetSStream_736_Data0 = 1474,
UID_Process_737 = 1475,
UID_SV369_Extract_out0 = 1476,
UID_GetSStream_738 = 1477,
UID_GetSStream_738_Data0 = 1478,
UID_Process_739 = 1479,
UID_SV370_Extract_out0 = 1480,
UID_GetSStream_740 = 1481,
UID_GetSStream_740_Data0 = 1482,
UID_Process_741 = 1483,
UID_SV371_Extract_out0 = 1484,
UID_GetSStream_742 = 1485,
UID_GetSStream_742_Data0 = 1486,
UID_Process_743 = 1487,
UID_SV372_Extract_out0 = 1488,
UID_GetSStream_744 = 1489,
UID_GetSStream_744_Data0 = 1490,
UID_Process_745 = 1491,
UID_SV373_Extract_out0 = 1492,
UID_GetSStream_746 = 1493,
UID_GetSStream_746_Data0 = 1494,
UID_Process_747 = 1495,
UID_SV374_Extract_out0 = 1496,
UID_GetSStream_748 = 1497,
UID_GetSStream_748_Data0 = 1498,
UID_Process_749 = 1499,
UID_SV375_Extract_out0 = 1500,
UID_GetSStream_750 = 1501,
UID_GetSStream_750_Data0 = 1502,
UID_Process_751 = 1503,
UID_SV376_Extract_out0 = 1504,
UID_GetSStream_752 = 1505,
UID_GetSStream_752_Data0 = 1506,
UID_Process_753 = 1507,
UID_SV377_Extract_out0 = 1508,
UID_GetSStream_754 = 1509,
UID_GetSStream_754_Data0 = 1510,
UID_Process_755 = 1511,
UID_SV378_Extract_out0 = 1512,
UID_GetSStream_756 = 1513,
UID_GetSStream_756_Data0 = 1514,
UID_Process_757 = 1515,
UID_SV379_Extract_out0 = 1516,
UID_GetSStream_758 = 1517,
UID_GetSStream_758_Data0 = 1518,
UID_Process_759 = 1519,
UID_SV380_Extract_out0 = 1520,
UID_GetSStream_760 = 1521,
UID_GetSStream_760_Data0 = 1522,
UID_Process_761 = 1523,
UID_SV381_Extract_out0 = 1524,
UID_GetSStream_762 = 1525,
UID_GetSStream_762_Data0 = 1526,
UID_Process_763 = 1527,
UID_SV382_Extract_out0 = 1528,
UID_GetSStream_764 = 1529,
UID_GetSStream_764_Data0 = 1530,
UID_Process_765 = 1531,
UID_SV383_Extract_out0 = 1532,
UID_GetSStream_766 = 1533,
UID_GetSStream_766_Data0 = 1534,
UID_Process_767 = 1535,
UID_SV384_Extract_out0 = 1536,
UID_Aggregate_768 = 1537,
UID_Aggregate_768_Data0 = 1538,
UID_GetSStream_769 = 1539,
UID_GetSStream_769_Data0 = 1540,
UID_Process_770 = 1541,
UID_Process_770_Data0 = 1542,
UID_Process_771 = 1543,
UID_Process_771_Data0 = 1544,
UID_Process_772 = 1545,
UID_SV385_Extract_out0 = 1546,
UID_Join_773 = 1547,
UID_Join_773_Data0 = 1548,
UID_Process_774 = 1549,
UID_Process_774_Data0 = 1550,
UID_Process_775 = 1551,
UID_Process_775_Data0 = 1552,
UID_Process_776 = 1553,
UID_Process_776_Data0 = 1554,
UID_SV386_Combine_out0 = 1555,
UID_Join_773_0,
UID_Join_773_1,
UID_Process_1_Prefix,
UID_Process_3_Prefix,
UID_Process_5_Prefix,
UID_Process_7_Prefix,
UID_Process_9_Prefix,
UID_Process_11_Prefix,
UID_Process_13_Prefix,
UID_Process_15_Prefix,
UID_Process_17_Prefix,
UID_Process_19_Prefix,
UID_Process_21_Prefix,
UID_Process_23_Prefix,
UID_Process_25_Prefix,
UID_Process_27_Prefix,
UID_Process_29_Prefix,
UID_Process_31_Prefix,
UID_Process_33_Prefix,
UID_Process_35_Prefix,
UID_Process_37_Prefix,
UID_Process_39_Prefix,
UID_Process_41_Prefix,
UID_Process_43_Prefix,
UID_Process_45_Prefix,
UID_Process_47_Prefix,
UID_Process_49_Prefix,
UID_Process_51_Prefix,
UID_Process_53_Prefix,
UID_Process_55_Prefix,
UID_Process_57_Prefix,
UID_Process_59_Prefix,
UID_Process_61_Prefix,
UID_Process_63_Prefix,
UID_Process_65_Prefix,
UID_Process_67_Prefix,
UID_Process_69_Prefix,
UID_Process_71_Prefix,
UID_Process_73_Prefix,
UID_Process_75_Prefix,
UID_Process_77_Prefix,
UID_Process_79_Prefix,
UID_Process_81_Prefix,
UID_Process_83_Prefix,
UID_Process_85_Prefix,
UID_Process_87_Prefix,
UID_Process_89_Prefix,
UID_Process_91_Prefix,
UID_Process_93_Prefix,
UID_Process_95_Prefix,
UID_Process_97_Prefix,
UID_Process_99_Prefix,
UID_Process_101_Prefix,
UID_Process_103_Prefix,
UID_Process_105_Prefix,
UID_Process_107_Prefix,
UID_Process_109_Prefix,
UID_Process_111_Prefix,
UID_Process_113_Prefix,
UID_Process_115_Prefix,
UID_Process_117_Prefix,
UID_Process_119_Prefix,
UID_Process_121_Prefix,
UID_Process_123_Prefix,
UID_Process_125_Prefix,
UID_Process_127_Prefix,
UID_Process_129_Prefix,
UID_Process_131_Prefix,
UID_Process_133_Prefix,
UID_Process_135_Prefix,
UID_Process_137_Prefix,
UID_Process_139_Prefix,
UID_Process_141_Prefix,
UID_Process_143_Prefix,
UID_Process_145_Prefix,
UID_Process_147_Prefix,
UID_Process_149_Prefix,
UID_Process_151_Prefix,
UID_Process_153_Prefix,
UID_Process_155_Prefix,
UID_Process_157_Prefix,
UID_Process_159_Prefix,
UID_Process_161_Prefix,
UID_Process_163_Prefix,
UID_Process_165_Prefix,
UID_Process_167_Prefix,
UID_Process_169_Prefix,
UID_Process_171_Prefix,
UID_Process_173_Prefix,
UID_Process_175_Prefix,
UID_Process_177_Prefix,
UID_Process_179_Prefix,
UID_Process_181_Prefix,
UID_Process_183_Prefix,
UID_Process_185_Prefix,
UID_Process_187_Prefix,
UID_Process_189_Prefix,
UID_Process_191_Prefix,
UID_Process_193_Prefix,
UID_Process_195_Prefix,
UID_Process_197_Prefix,
UID_Process_199_Prefix,
UID_Process_201_Prefix,
UID_Process_203_Prefix,
UID_Process_205_Prefix,
UID_Process_207_Prefix,
UID_Process_209_Prefix,
UID_Process_211_Prefix,
UID_Process_213_Prefix,
UID_Process_215_Prefix,
UID_Process_217_Prefix,
UID_Process_219_Prefix,
UID_Process_221_Prefix,
UID_Process_223_Prefix,
UID_Process_225_Prefix,
UID_Process_227_Prefix,
UID_Process_229_Prefix,
UID_Process_231_Prefix,
UID_Process_233_Prefix,
UID_Process_235_Prefix,
UID_Process_237_Prefix,
UID_Process_239_Prefix,
UID_Process_241_Prefix,
UID_Process_243_Prefix,
UID_Process_245_Prefix,
UID_Process_247_Prefix,
UID_Process_249_Prefix,
UID_Process_251_Prefix,
UID_Process_253_Prefix,
UID_Process_255_Prefix,
UID_Process_257_Prefix,
UID_Process_259_Prefix,
UID_Process_261_Prefix,
UID_Process_263_Prefix,
UID_Process_265_Prefix,
UID_Process_267_Prefix,
UID_Process_269_Prefix,
UID_Process_271_Prefix,
UID_Process_273_Prefix,
UID_Process_275_Prefix,
UID_Process_277_Prefix,
UID_Process_279_Prefix,
UID_Process_281_Prefix,
UID_Process_283_Prefix,
UID_Process_285_Prefix,
UID_Process_287_Prefix,
UID_Process_289_Prefix,
UID_Process_291_Prefix,
UID_Process_293_Prefix,
UID_Process_295_Prefix,
UID_Process_297_Prefix,
UID_Process_299_Prefix,
UID_Process_301_Prefix,
UID_Process_303_Prefix,
UID_Process_305_Prefix,
UID_Process_307_Prefix,
UID_Process_309_Prefix,
UID_Process_311_Prefix,
UID_Process_313_Prefix,
UID_Process_315_Prefix,
UID_Process_317_Prefix,
UID_Process_319_Prefix,
UID_Process_321_Prefix,
UID_Process_323_Prefix,
UID_Process_325_Prefix,
UID_Process_327_Prefix,
UID_Process_329_Prefix,
UID_Process_331_Prefix,
UID_Process_333_Prefix,
UID_Process_335_Prefix,
UID_Process_337_Prefix,
UID_Process_339_Prefix,
UID_Process_341_Prefix,
UID_Process_343_Prefix,
UID_Process_345_Prefix,
UID_Process_347_Prefix,
UID_Process_349_Prefix,
UID_Process_351_Prefix,
UID_Process_353_Prefix,
UID_Process_355_Prefix,
UID_Process_357_Prefix,
UID_Process_359_Prefix,
UID_Process_361_Prefix,
UID_Process_363_Prefix,
UID_Process_365_Prefix,
UID_Process_367_Prefix,
UID_Process_369_Prefix,
UID_Process_371_Prefix,
UID_Process_373_Prefix,
UID_Process_375_Prefix,
UID_Process_377_Prefix,
UID_Process_379_Prefix,
UID_Process_381_Prefix,
UID_Process_383_Prefix,
UID_Process_385_Prefix,
UID_Process_387_Prefix,
UID_Process_389_Prefix,
UID_Process_391_Prefix,
UID_Process_393_Prefix,
UID_Process_395_Prefix,
UID_Process_397_Prefix,
UID_Process_399_Prefix,
UID_Process_401_Prefix,
UID_Process_403_Prefix,
UID_Process_405_Prefix,
UID_Process_407_Prefix,
UID_Process_409_Prefix,
UID_Process_411_Prefix,
UID_Process_413_Prefix,
UID_Process_415_Prefix,
UID_Process_417_Prefix,
UID_Process_419_Prefix,
UID_Process_421_Prefix,
UID_Process_423_Prefix,
UID_Process_425_Prefix,
UID_Process_427_Prefix,
UID_Process_429_Prefix,
UID_Process_431_Prefix,
UID_Process_433_Prefix,
UID_Process_435_Prefix,
UID_Process_437_Prefix,
UID_Process_439_Prefix,
UID_Process_441_Prefix,
UID_Process_443_Prefix,
UID_Process_445_Prefix,
UID_Process_447_Prefix,
UID_Process_449_Prefix,
UID_Process_451_Prefix,
UID_Process_453_Prefix,
UID_Process_455_Prefix,
UID_Process_457_Prefix,
UID_Process_459_Prefix,
UID_Process_461_Prefix,
UID_Process_463_Prefix,
UID_Process_465_Prefix,
UID_Process_467_Prefix,
UID_Process_469_Prefix,
UID_Process_471_Prefix,
UID_Process_473_Prefix,
UID_Process_475_Prefix,
UID_Process_477_Prefix,
UID_Process_479_Prefix,
UID_Process_481_Prefix,
UID_Process_483_Prefix,
UID_Process_485_Prefix,
UID_Process_487_Prefix,
UID_Process_489_Prefix,
UID_Process_491_Prefix,
UID_Process_493_Prefix,
UID_Process_495_Prefix,
UID_Process_497_Prefix,
UID_Process_499_Prefix,
UID_Process_501_Prefix,
UID_Process_503_Prefix,
UID_Process_505_Prefix,
UID_Process_507_Prefix,
UID_Process_509_Prefix,
UID_Process_511_Prefix,
UID_Process_513_Prefix,
UID_Process_515_Prefix,
UID_Process_517_Prefix,
UID_Process_519_Prefix,
UID_Process_521_Prefix,
UID_Process_523_Prefix,
UID_Process_525_Prefix,
UID_Process_527_Prefix,
UID_Process_529_Prefix,
UID_Process_531_Prefix,
UID_Process_533_Prefix,
UID_Process_535_Prefix,
UID_Process_537_Prefix,
UID_Process_539_Prefix,
UID_Process_541_Prefix,
UID_Process_543_Prefix,
UID_Process_545_Prefix,
UID_Process_547_Prefix,
UID_Process_549_Prefix,
UID_Process_551_Prefix,
UID_Process_553_Prefix,
UID_Process_555_Prefix,
UID_Process_557_Prefix,
UID_Process_559_Prefix,
UID_Process_561_Prefix,
UID_Process_563_Prefix,
UID_Process_565_Prefix,
UID_Process_567_Prefix,
UID_Process_569_Prefix,
UID_Process_571_Prefix,
UID_Process_573_Prefix,
UID_Process_575_Prefix,
UID_Process_577_Prefix,
UID_Process_579_Prefix,
UID_Process_581_Prefix,
UID_Process_583_Prefix,
UID_Process_585_Prefix,
UID_Process_587_Prefix,
UID_Process_589_Prefix,
UID_Process_591_Prefix,
UID_Process_593_Prefix,
UID_Process_595_Prefix,
UID_Process_597_Prefix,
UID_Process_599_Prefix,
UID_Process_601_Prefix,
UID_Process_603_Prefix,
UID_Process_605_Prefix,
UID_Process_607_Prefix,
UID_Process_609_Prefix,
UID_Process_611_Prefix,
UID_Process_613_Prefix,
UID_Process_615_Prefix,
UID_Process_617_Prefix,
UID_Process_619_Prefix,
UID_Process_621_Prefix,
UID_Process_623_Prefix,
UID_Process_625_Prefix,
UID_Process_627_Prefix,
UID_Process_629_Prefix,
UID_Process_631_Prefix,
UID_Process_633_Prefix,
UID_Process_635_Prefix,
UID_Process_637_Prefix,
UID_Process_639_Prefix,
UID_Process_641_Prefix,
UID_Process_643_Prefix,
UID_Process_645_Prefix,
UID_Process_647_Prefix,
UID_Process_649_Prefix,
UID_Process_651_Prefix,
UID_Process_653_Prefix,
UID_Process_655_Prefix,
UID_Process_657_Prefix,
UID_Process_659_Prefix,
UID_Process_661_Prefix,
UID_Process_663_Prefix,
UID_Process_665_Prefix,
UID_Process_667_Prefix,
UID_Process_669_Prefix,
UID_Process_671_Prefix,
UID_Process_673_Prefix,
UID_Process_675_Prefix,
UID_Process_677_Prefix,
UID_Process_679_Prefix,
UID_Process_681_Prefix,
UID_Process_683_Prefix,
UID_Process_685_Prefix,
UID_Process_687_Prefix,
UID_Process_689_Prefix,
UID_Process_691_Prefix,
UID_Process_693_Prefix,
UID_Process_695_Prefix,
UID_Process_697_Prefix,
UID_Process_699_Prefix,
UID_Process_701_Prefix,
UID_Process_703_Prefix,
UID_Process_705_Prefix,
UID_Process_707_Prefix,
UID_Process_709_Prefix,
UID_Process_711_Prefix,
UID_Process_713_Prefix,
UID_Process_715_Prefix,
UID_Process_717_Prefix,
UID_Process_719_Prefix,
UID_Process_721_Prefix,
UID_Process_723_Prefix,
UID_Process_725_Prefix,
UID_Process_727_Prefix,
UID_Process_729_Prefix,
UID_Process_731_Prefix,
UID_Process_733_Prefix,
UID_Process_735_Prefix,
UID_Process_737_Prefix,
UID_Process_739_Prefix,
UID_Process_741_Prefix,
UID_Process_743_Prefix,
UID_Process_745_Prefix,
UID_Process_747_Prefix,
UID_Process_749_Prefix,
UID_Process_751_Prefix,
UID_Process_753_Prefix,
UID_Process_755_Prefix,
UID_Process_757_Prefix,
UID_Process_759_Prefix,
UID_Process_761_Prefix,
UID_Process_763_Prefix,
UID_Process_765_Prefix,
UID_Process_767_Prefix,
UID_Process_771_Prefix,
UID_Process_775_Prefix
};

//namespace ScopeGeneratedClasses
//{
    // ColumnTypeID for UDT (IDs represent offsets into UDT type table)
    enum UDTColumnTypeID
    {
        
    };

#if defined(COMPILE_MANAGED)
// Explicit instantiations for templated functions that are defined in managed code
#endif // defined(COMPILE_MANAGED)


    class PartitionSchema_GetSStream_0
    {
    public:
        PartitionSchema_GetSStream_0();
        PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);


        static string GetDefinition()
        {
            return MakeBigString("");
        }

        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, PartitionSchema_GetSStream_0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, PartitionSchema_GetSStream_0 & row)
    {
        return os;
    }
#endif // defined(SCOPE_DEBUG)


    class GetSStream_0_Data0
    {
    public:
        ScopeDateTime m_PreciseTimeStamp;
        ScopeDateTime m_StartTime;
        ScopeDateTime m_EndTime;
        FString m_LogicalContainerId;
        FString m_RoleInstanceName;
        FString m_TenantName;
        FString m_RoleInstanceId;
        FString m_TenantId;
        FString m_NodeId;
        FString m_ContainerId;
        FString m_DataCenter;
        FString m_Cluster;
        FString m_RoleType;
        FString m_TransitionSignature;
        FString m_CADCategory;
        FString m_RCAEngineCategory;
        FString m_RCALevel1;
        FString m_RCALevel2;
        double m_Duration;
        FString m_RCA;
        FString m_EventList;
        GetSStream_0_Data0();
        GetSStream_0_Data0(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        GetSStream_0_Data0(const GetSStream_0_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);



        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, GetSStream_0_Data0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, GetSStream_0_Data0 & row)
    {
        os << "\tPreciseTimeStamp:\t" << row.m_PreciseTimeStamp << endl;
        os << "\tStartTime:\t" << row.m_StartTime << endl;
        os << "\tEndTime:\t" << row.m_EndTime << endl;
        os << "\tLogicalContainerId:\t" << row.m_LogicalContainerId << endl;
        os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
        os << "\tTenantName:\t" << row.m_TenantName << endl;
        os << "\tRoleInstanceId:\t" << row.m_RoleInstanceId << endl;
        os << "\tTenantId:\t" << row.m_TenantId << endl;
        os << "\tNodeId:\t" << row.m_NodeId << endl;
        os << "\tContainerId:\t" << row.m_ContainerId << endl;
        os << "\tDataCenter:\t" << row.m_DataCenter << endl;
        os << "\tCluster:\t" << row.m_Cluster << endl;
        os << "\tRoleType:\t" << row.m_RoleType << endl;
        os << "\tTransitionSignature:\t" << row.m_TransitionSignature << endl;
        os << "\tCADCategory:\t" << row.m_CADCategory << endl;
        os << "\tRCAEngineCategory:\t" << row.m_RCAEngineCategory << endl;
        os << "\tRCALevel1:\t" << row.m_RCALevel1 << endl;
        os << "\tRCALevel2:\t" << row.m_RCALevel2 << endl;
        os << "\tDuration:\t" << row.m_Duration << endl;
        os << "\tRCA:\t" << row.m_RCA << endl;
        os << "\tEventList:\t" << row.m_EventList << endl;
        return os;
    }
#endif // defined(SCOPE_DEBUG)


    class GetSStream_769_Data0
    {
    public:
        FString m_DeploymentName;
        GetSStream_769_Data0();
        GetSStream_769_Data0(const GetSStream_769_Data0 & c, IncrementalAllocator * alloc);

        template <typename Allocator>
        GetSStream_769_Data0(const GetSStream_769_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * mmng);

        template <typename Allocator>
        void Delete(FixedArrayTypeMemoryManager<Allocator> * mmng);



        static const bool containsUDT = false;

        UINT8 GetScopeCEPEventType() const { return 0; }
        ScopeDateTime GetScopeCEPEventStartTime() const { return ScopeDateTime::MinValue; }
        bool IsScopeCEPCTI() const { return false; }
        void ResetScopeCEPStatus(ScopeDateTime startTime, ScopeDateTime endTime, int type) { }
        
#if defined(SCOPE_DEBUG)
        friend ostream & operator<<(ostream & os, GetSStream_769_Data0 & row);
#endif // defined(SCOPE_DEBUG)
    };

#if defined(SCOPE_DEBUG)
    INLINE ostream & operator<<(ostream & os, GetSStream_769_Data0 & row)
    {
        os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
        return os;
    }
#endif // defined(SCOPE_DEBUG)


#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

//}

#if defined(COMPILE_NATIVE)
    template<> 
    class BinaryExtractPolicy<PartitionSchema_GetSStream_0>
    {
    public:
        static bool Deserialize(BinaryInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
        static bool DeserializeKeyForSS(MemoryInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
        static void DeserializeKey(ResourceInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            char type = 0, null = 0;
        }
        static void DeserializePartitionSpec(ResourceInputStream * input, PartitionSchema_GetSStream_0 & row)
        {
            return ;
        }

    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class BinaryOutputPolicy<PartitionSchema_GetSStream_0>
    {
    public:
        static void Serialize(BinaryOutputStream * output, PartitionSchema_GetSStream_0 & row)
        {
            char b = 0;
            output->Write(b);
        }
        static void SerializeKeyForSS(MemoryOutputStream* output, const PartitionSchema_GetSStream_0 & row)        
        {
            char weight = 0; // KeyWeight.Normal
            output->Write(weight);

            output->Write(false);
        }
    };

#if defined(COMPILE_NATIVE)
    template<> 
    class BinaryExtractPolicy<GetSStream_0_Data0>
    {
    public:
        static bool Deserialize(BinaryInputStream * input, GetSStream_0_Data0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
                if (b==0)
                {
                    input->Read(row.m_PreciseTimeStamp);
                    input->Read(row.m_StartTime);
                    input->Read(row.m_EndTime);
                    input->Read(row.m_LogicalContainerId);
                    input->Read(row.m_RoleInstanceName);
                    input->Read(row.m_TenantName);
                    input->Read(row.m_RoleInstanceId);
                    input->Read(row.m_TenantId);
                    input->Read(row.m_NodeId);
                    input->Read(row.m_ContainerId);
                    input->Read(row.m_DataCenter);
                    input->Read(row.m_Cluster);
                    input->Read(row.m_RoleType);
                    input->Read(row.m_TransitionSignature);
                    input->Read(row.m_CADCategory);
                    input->Read(row.m_RCAEngineCategory);
                    input->Read(row.m_RCALevel1);
                    input->Read(row.m_RCALevel2);
                    input->Read(row.m_Duration);
                    input->Read(row.m_RCA);
                    input->Read(row.m_EventList);
                }
                else
                {
                    char ___masking___[3];
                    ___masking___[0] = b;
                    input->Read(___masking___[1]); 
                    input->Read(___masking___[2]); 
                    input->Read(row.m_PreciseTimeStamp);
                    input->Read(row.m_StartTime);
                    input->Read(row.m_EndTime);
                    if ((___masking___[0] & 2 ) != 2)
                    {
                        input->Read(row.m_LogicalContainerId);
                    }
                    else
                    {
                        row.m_LogicalContainerId.SetNull();
                    }
                    if ((___masking___[0] & 4 ) != 4)
                    {
                        input->Read(row.m_RoleInstanceName);
                    }
                    else
                    {
                        row.m_RoleInstanceName.SetNull();
                    }
                    if ((___masking___[0] & 8 ) != 8)
                    {
                        input->Read(row.m_TenantName);
                    }
                    else
                    {
                        row.m_TenantName.SetNull();
                    }
                    if ((___masking___[0] & 16 ) != 16)
                    {
                        input->Read(row.m_RoleInstanceId);
                    }
                    else
                    {
                        row.m_RoleInstanceId.SetNull();
                    }
                    if ((___masking___[0] & 32 ) != 32)
                    {
                        input->Read(row.m_TenantId);
                    }
                    else
                    {
                        row.m_TenantId.SetNull();
                    }
                    if ((___masking___[0] & 64 ) != 64)
                    {
                        input->Read(row.m_NodeId);
                    }
                    else
                    {
                        row.m_NodeId.SetNull();
                    }
                    if ((___masking___[0] & 128 ) != 128)
                    {
                        input->Read(row.m_ContainerId);
                    }
                    else
                    {
                        row.m_ContainerId.SetNull();
                    }
                    if ((___masking___[1] & 1 ) != 1)
                    {
                        input->Read(row.m_DataCenter);
                    }
                    else
                    {
                        row.m_DataCenter.SetNull();
                    }
                    if ((___masking___[1] & 2 ) != 2)
                    {
                        input->Read(row.m_Cluster);
                    }
                    else
                    {
                        row.m_Cluster.SetNull();
                    }
                    if ((___masking___[1] & 4 ) != 4)
                    {
                        input->Read(row.m_RoleType);
                    }
                    else
                    {
                        row.m_RoleType.SetNull();
                    }
                    if ((___masking___[1] & 8 ) != 8)
                    {
                        input->Read(row.m_TransitionSignature);
                    }
                    else
                    {
                        row.m_TransitionSignature.SetNull();
                    }
                    if ((___masking___[1] & 16 ) != 16)
                    {
                        input->Read(row.m_CADCategory);
                    }
                    else
                    {
                        row.m_CADCategory.SetNull();
                    }
                    if ((___masking___[1] & 32 ) != 32)
                    {
                        input->Read(row.m_RCAEngineCategory);
                    }
                    else
                    {
                        row.m_RCAEngineCategory.SetNull();
                    }
                    if ((___masking___[1] & 64 ) != 64)
                    {
                        input->Read(row.m_RCALevel1);
                    }
                    else
                    {
                        row.m_RCALevel1.SetNull();
                    }
                    if ((___masking___[1] & 128 ) != 128)
                    {
                        input->Read(row.m_RCALevel2);
                    }
                    else
                    {
                        row.m_RCALevel2.SetNull();
                    }
                    input->Read(row.m_Duration);
                    if ((___masking___[2] & 1 ) != 1)
                    {
                        input->Read(row.m_RCA);
                    }
                    else
                    {
                        row.m_RCA.SetNull();
                    }
                    if ((___masking___[2] & 2 ) != 2)
                    {
                        input->Read(row.m_EventList);
                    }
                    else
                    {
                        row.m_EventList.SetNull();
                    }
                }
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class BinaryOutputPolicy<GetSStream_0_Data0>
    {
    public:
        static void Serialize(BinaryOutputStream * output, GetSStream_0_Data0 & row)
        {
            char b = 0;
            char ___masking___[3];
            ___masking___[0] = 1;
            ___masking___[1]=0; 
            ___masking___[2]=0; 
            bool hasNull = false;
            if (row.m_LogicalContainerId.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 2;
            }
            if (row.m_RoleInstanceName.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 4;
            }
            if (row.m_TenantName.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 8;
            }
            if (row.m_RoleInstanceId.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 16;
            }
            if (row.m_TenantId.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 32;
            }
            if (row.m_NodeId.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 64;
            }
            if (row.m_ContainerId.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 128;
            }
            if (row.m_DataCenter.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 1;
            }
            if (row.m_Cluster.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 2;
            }
            if (row.m_RoleType.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 4;
            }
            if (row.m_TransitionSignature.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 8;
            }
            if (row.m_CADCategory.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 16;
            }
            if (row.m_RCAEngineCategory.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 32;
            }
            if (row.m_RCALevel1.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 64;
            }
            if (row.m_RCALevel2.IsNull())
            {
                hasNull = true;
                ___masking___[1] |= 128;
            }
            if (row.m_RCA.IsNull())
            {
                hasNull = true;
                ___masking___[2] |= 1;
            }
            if (row.m_EventList.IsNull())
            {
                hasNull = true;
                ___masking___[2] |= 2;
            }
            if (hasNull)
            {
                output->Write(___masking___[0]);
                output->Write(___masking___[1]);
                output->Write(___masking___[2]);
            }
            else
            {
                output->Write(b);
            }
            output->Write(row.m_PreciseTimeStamp);
            output->Write(row.m_StartTime);
            output->Write(row.m_EndTime);
            if (!row.m_LogicalContainerId.IsNull())
            {
                output->Write(row.m_LogicalContainerId);
            }
            if (!row.m_RoleInstanceName.IsNull())
            {
                output->Write(row.m_RoleInstanceName);
            }
            if (!row.m_TenantName.IsNull())
            {
                output->Write(row.m_TenantName);
            }
            if (!row.m_RoleInstanceId.IsNull())
            {
                output->Write(row.m_RoleInstanceId);
            }
            if (!row.m_TenantId.IsNull())
            {
                output->Write(row.m_TenantId);
            }
            if (!row.m_NodeId.IsNull())
            {
                output->Write(row.m_NodeId);
            }
            if (!row.m_ContainerId.IsNull())
            {
                output->Write(row.m_ContainerId);
            }
            if (!row.m_DataCenter.IsNull())
            {
                output->Write(row.m_DataCenter);
            }
            if (!row.m_Cluster.IsNull())
            {
                output->Write(row.m_Cluster);
            }
            if (!row.m_RoleType.IsNull())
            {
                output->Write(row.m_RoleType);
            }
            if (!row.m_TransitionSignature.IsNull())
            {
                output->Write(row.m_TransitionSignature);
            }
            if (!row.m_CADCategory.IsNull())
            {
                output->Write(row.m_CADCategory);
            }
            if (!row.m_RCAEngineCategory.IsNull())
            {
                output->Write(row.m_RCAEngineCategory);
            }
            if (!row.m_RCALevel1.IsNull())
            {
                output->Write(row.m_RCALevel1);
            }
            if (!row.m_RCALevel2.IsNull())
            {
                output->Write(row.m_RCALevel2);
            }
            output->Write(row.m_Duration);
            if (!row.m_RCA.IsNull())
            {
                output->Write(row.m_RCA);
            }
            if (!row.m_EventList.IsNull())
            {
                output->Write(row.m_EventList);
            }
        }
            static void SerializeKeyForSS(MemoryOutputStream* output, const GetSStream_0_Data0 & row)
            {
                SCOPE_ASSERT(false); // there is no partition key in the schema
            }
    };

#if defined(COMPILE_NATIVE)
    template<> 
    class BinaryExtractPolicy<GetSStream_769_Data0>
    {
    public:
        static bool Deserialize(BinaryInputStream * input, GetSStream_769_Data0 & row)
        {
            try
            {
                char b = 0;
                input->Read(b);
                if (b==0)
                {
                    input->Read(row.m_DeploymentName);
                }
                else
                {
                    char ___masking___[1];
                    ___masking___[0] = b;
                    if ((___masking___[0] & 2 ) != 2)
                    {
                        input->Read(row.m_DeploymentName);
                    }
                    else
                    {
                        row.m_DeploymentName.SetNull();
                    }
                }
            }
            catch (ScopeStreamException &) 
            {
                // we reach the end of file
                return false;
            }

            return true;
        }
    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class BinaryOutputPolicy<GetSStream_769_Data0>
    {
    public:
        static void Serialize(BinaryOutputStream * output, GetSStream_769_Data0 & row)
        {
            char b = 0;
            char ___masking___[1];
            ___masking___[0] = 1;
            bool hasNull = false;
            if (row.m_DeploymentName.IsNull())
            {
                hasNull = true;
                ___masking___[0] |= 2;
            }
            if (hasNull)
            {
                output->Write(___masking___[0]);
            }
            else
            {
                output->Write(b);
            }
            if (!row.m_DeploymentName.IsNull())
            {
                output->Write(row.m_DeploymentName);
            }
        }
            static void SerializeKeyForSS(MemoryOutputStream* output, const GetSStream_769_Data0 & row)
            {
                SCOPE_ASSERT(false); // there is no partition key in the schema
            }
    };

#pragma region Schema Constructors

    INLINE PartitionSchema_GetSStream_0::PartitionSchema_GetSStream_0()
    {
    }
    INLINE PartitionSchema_GetSStream_0::PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, IncrementalAllocator * alloc)
    {
    }

    template <typename Allocator>
    INLINE PartitionSchema_GetSStream_0::PartitionSchema_GetSStream_0(const PartitionSchema_GetSStream_0 & c, FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {

    }

    template <typename Allocator>
    INLINE void PartitionSchema_GetSStream_0::Delete(FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {
    }



    INLINE GetSStream_0_Data0::GetSStream_0_Data0()
    {
        m_Duration = 0.0;
    }
    INLINE GetSStream_0_Data0::GetSStream_0_Data0(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
            m_PreciseTimeStamp(c.m_PreciseTimeStamp),
            m_StartTime(c.m_StartTime),
            m_EndTime(c.m_EndTime),
            m_LogicalContainerId(c.m_LogicalContainerId, alloc),
            m_RoleInstanceName(c.m_RoleInstanceName, alloc),
            m_TenantName(c.m_TenantName, alloc),
            m_RoleInstanceId(c.m_RoleInstanceId, alloc),
            m_TenantId(c.m_TenantId, alloc),
            m_NodeId(c.m_NodeId, alloc),
            m_ContainerId(c.m_ContainerId, alloc),
            m_DataCenter(c.m_DataCenter, alloc),
            m_Cluster(c.m_Cluster, alloc),
            m_RoleType(c.m_RoleType, alloc),
            m_TransitionSignature(c.m_TransitionSignature, alloc),
            m_CADCategory(c.m_CADCategory, alloc),
            m_RCAEngineCategory(c.m_RCAEngineCategory, alloc),
            m_RCALevel1(c.m_RCALevel1, alloc),
            m_RCALevel2(c.m_RCALevel2, alloc),
            m_RCA(c.m_RCA, alloc),
            m_EventList(c.m_EventList, alloc)
    {
        m_Duration = c.m_Duration;
    }

    template <typename Allocator>
    INLINE GetSStream_0_Data0::GetSStream_0_Data0(const GetSStream_0_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {

        m_PreciseTimeStamp = c.m_PreciseTimeStamp;
        m_StartTime = c.m_StartTime;
        m_EndTime = c.m_EndTime;
        m_LogicalContainerId = c.m_LogicalContainerId;
        memoryManager->Copy(m_LogicalContainerId);
        m_RoleInstanceName = c.m_RoleInstanceName;
        memoryManager->Copy(m_RoleInstanceName);
        m_TenantName = c.m_TenantName;
        memoryManager->Copy(m_TenantName);
        m_RoleInstanceId = c.m_RoleInstanceId;
        memoryManager->Copy(m_RoleInstanceId);
        m_TenantId = c.m_TenantId;
        memoryManager->Copy(m_TenantId);
        m_NodeId = c.m_NodeId;
        memoryManager->Copy(m_NodeId);
        m_ContainerId = c.m_ContainerId;
        memoryManager->Copy(m_ContainerId);
        m_DataCenter = c.m_DataCenter;
        memoryManager->Copy(m_DataCenter);
        m_Cluster = c.m_Cluster;
        memoryManager->Copy(m_Cluster);
        m_RoleType = c.m_RoleType;
        memoryManager->Copy(m_RoleType);
        m_TransitionSignature = c.m_TransitionSignature;
        memoryManager->Copy(m_TransitionSignature);
        m_CADCategory = c.m_CADCategory;
        memoryManager->Copy(m_CADCategory);
        m_RCAEngineCategory = c.m_RCAEngineCategory;
        memoryManager->Copy(m_RCAEngineCategory);
        m_RCALevel1 = c.m_RCALevel1;
        memoryManager->Copy(m_RCALevel1);
        m_RCALevel2 = c.m_RCALevel2;
        memoryManager->Copy(m_RCALevel2);
        m_Duration = c.m_Duration;
        m_RCA = c.m_RCA;
        memoryManager->Copy(m_RCA);
        m_EventList = c.m_EventList;
        memoryManager->Copy(m_EventList);
    }

    template <typename Allocator>
    INLINE void GetSStream_0_Data0::Delete(FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {
        memoryManager->Delete(m_LogicalContainerId);
        memoryManager->Delete(m_RoleInstanceName);
        memoryManager->Delete(m_TenantName);
        memoryManager->Delete(m_RoleInstanceId);
        memoryManager->Delete(m_TenantId);
        memoryManager->Delete(m_NodeId);
        memoryManager->Delete(m_ContainerId);
        memoryManager->Delete(m_DataCenter);
        memoryManager->Delete(m_Cluster);
        memoryManager->Delete(m_RoleType);
        memoryManager->Delete(m_TransitionSignature);
        memoryManager->Delete(m_CADCategory);
        memoryManager->Delete(m_RCAEngineCategory);
        memoryManager->Delete(m_RCALevel1);
        memoryManager->Delete(m_RCALevel2);
        memoryManager->Delete(m_RCA);
        memoryManager->Delete(m_EventList);
    }



    INLINE GetSStream_769_Data0::GetSStream_769_Data0()
    {
    }
    INLINE GetSStream_769_Data0::GetSStream_769_Data0(const GetSStream_769_Data0 & c, IncrementalAllocator * alloc) :
            m_DeploymentName(c.m_DeploymentName, alloc)
    {
    }

    template <typename Allocator>
    INLINE GetSStream_769_Data0::GetSStream_769_Data0(const GetSStream_769_Data0 & c, FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {

        m_DeploymentName = c.m_DeploymentName;
        memoryManager->Copy(m_DeploymentName);
    }

    template <typename Allocator>
    INLINE void GetSStream_769_Data0::Delete(FixedArrayTypeMemoryManager<Allocator> * memoryManager)
    {
        memoryManager->Delete(m_DeploymentName);
    }


#pragma endregion Schema Constructors
// SV1_EXTRACT SV2_EXTRACT SV3_EXTRACT SV4_EXTRACT SV5_EXTRACT SV6_EXTRACT SV7_EXTRACT SV8_EXTRACT SV9_EXTRACT SV10_EXTRACT SV11_EXTRACT 
// SV12_EXTRACT SV13_EXTRACT SV14_EXTRACT SV15_EXTRACT SV16_EXTRACT SV17_EXTRACT SV18_EXTRACT SV19_EXTRACT SV20_EXTRACT SV21_EXTRACT SV22_EXTRACT 
// SV23_EXTRACT SV24_EXTRACT SV25_EXTRACT SV26_EXTRACT SV27_EXTRACT SV28_EXTRACT SV29_EXTRACT SV30_EXTRACT SV31_EXTRACT SV32_EXTRACT SV33_EXTRACT 
// SV34_EXTRACT SV35_EXTRACT SV36_EXTRACT SV37_EXTRACT SV38_EXTRACT SV39_EXTRACT SV40_EXTRACT SV41_EXTRACT SV42_EXTRACT SV43_EXTRACT SV44_EXTRACT 
// SV45_EXTRACT SV46_EXTRACT SV47_EXTRACT SV48_EXTRACT SV49_EXTRACT SV50_EXTRACT SV51_EXTRACT SV52_EXTRACT SV53_EXTRACT SV54_EXTRACT SV55_EXTRACT 
// SV56_EXTRACT SV57_EXTRACT SV58_EXTRACT SV59_EXTRACT SV60_EXTRACT SV61_EXTRACT SV62_EXTRACT SV63_EXTRACT SV64_EXTRACT SV65_EXTRACT SV66_EXTRACT 
// SV67_EXTRACT SV68_EXTRACT SV69_EXTRACT SV70_EXTRACT SV71_EXTRACT SV72_EXTRACT SV73_EXTRACT SV74_EXTRACT SV75_EXTRACT SV76_EXTRACT SV77_EXTRACT 
// SV78_EXTRACT SV79_EXTRACT SV80_EXTRACT SV81_EXTRACT SV82_EXTRACT SV83_EXTRACT SV84_EXTRACT SV85_EXTRACT SV86_EXTRACT SV87_EXTRACT SV88_EXTRACT 
// SV89_EXTRACT SV90_EXTRACT SV91_EXTRACT SV92_EXTRACT SV93_EXTRACT SV94_EXTRACT SV95_EXTRACT SV96_EXTRACT SV97_EXTRACT SV98_EXTRACT SV99_EXTRACT 
// SV100_EXTRACT SV101_EXTRACT SV102_EXTRACT SV103_EXTRACT SV104_EXTRACT SV105_EXTRACT SV106_EXTRACT SV107_EXTRACT SV108_EXTRACT SV109_EXTRACT 
// SV110_EXTRACT SV111_EXTRACT SV112_EXTRACT SV113_EXTRACT SV114_EXTRACT SV115_EXTRACT SV116_EXTRACT SV117_EXTRACT SV118_EXTRACT SV119_EXTRACT 
// SV120_EXTRACT SV121_EXTRACT SV122_EXTRACT SV123_EXTRACT SV124_EXTRACT SV125_EXTRACT SV126_EXTRACT SV127_EXTRACT SV128_EXTRACT SV129_EXTRACT 
// SV130_EXTRACT SV131_EXTRACT SV132_EXTRACT SV133_EXTRACT SV134_EXTRACT SV135_EXTRACT SV136_EXTRACT SV137_EXTRACT SV138_EXTRACT SV139_EXTRACT 
// SV140_EXTRACT SV141_EXTRACT SV142_EXTRACT SV143_EXTRACT SV144_EXTRACT SV145_EXTRACT SV146_EXTRACT SV147_EXTRACT SV148_EXTRACT SV149_EXTRACT 
// SV150_EXTRACT SV151_EXTRACT SV152_EXTRACT SV153_EXTRACT SV154_EXTRACT SV155_EXTRACT SV156_EXTRACT SV157_EXTRACT SV158_EXTRACT SV159_EXTRACT 
// SV160_EXTRACT SV161_EXTRACT SV162_EXTRACT SV163_EXTRACT SV164_EXTRACT SV165_EXTRACT SV166_EXTRACT SV167_EXTRACT SV168_EXTRACT SV169_EXTRACT 
// SV170_EXTRACT SV171_EXTRACT SV172_EXTRACT SV173_EXTRACT SV174_EXTRACT SV175_EXTRACT SV176_EXTRACT SV177_EXTRACT SV178_EXTRACT SV179_EXTRACT 
// SV180_EXTRACT SV181_EXTRACT SV182_EXTRACT SV183_EXTRACT SV184_EXTRACT SV185_EXTRACT SV186_EXTRACT SV187_EXTRACT SV188_EXTRACT SV189_EXTRACT 
// SV190_EXTRACT SV191_EXTRACT SV192_EXTRACT SV193_EXTRACT SV194_EXTRACT SV195_EXTRACT SV196_EXTRACT SV197_EXTRACT SV198_EXTRACT SV199_EXTRACT 
// SV200_EXTRACT SV201_EXTRACT SV202_EXTRACT SV203_EXTRACT SV204_EXTRACT SV205_EXTRACT SV206_EXTRACT SV207_EXTRACT SV208_EXTRACT SV209_EXTRACT 
// SV210_EXTRACT SV211_EXTRACT SV212_EXTRACT SV213_EXTRACT SV214_EXTRACT SV215_EXTRACT SV216_EXTRACT SV217_EXTRACT SV218_EXTRACT SV219_EXTRACT 
// SV220_EXTRACT SV221_EXTRACT SV222_EXTRACT SV223_EXTRACT SV224_EXTRACT SV225_EXTRACT SV226_EXTRACT SV227_EXTRACT SV228_EXTRACT SV229_EXTRACT 
// SV230_EXTRACT SV231_EXTRACT SV232_EXTRACT SV233_EXTRACT SV234_EXTRACT SV235_EXTRACT SV236_EXTRACT SV237_EXTRACT SV238_EXTRACT SV239_EXTRACT 
// SV240_EXTRACT SV241_EXTRACT SV242_EXTRACT SV243_EXTRACT SV244_EXTRACT SV245_EXTRACT SV246_EXTRACT SV247_EXTRACT SV248_EXTRACT SV249_EXTRACT 
// SV250_EXTRACT SV251_EXTRACT SV252_EXTRACT SV253_EXTRACT SV254_EXTRACT SV255_EXTRACT SV256_EXTRACT SV257_EXTRACT SV258_EXTRACT SV259_EXTRACT 
// SV260_EXTRACT SV261_EXTRACT SV262_EXTRACT SV263_EXTRACT SV264_EXTRACT SV265_EXTRACT SV266_EXTRACT SV267_EXTRACT SV268_EXTRACT SV269_EXTRACT 
// SV270_EXTRACT SV271_EXTRACT SV272_EXTRACT SV273_EXTRACT SV274_EXTRACT SV275_EXTRACT SV276_EXTRACT SV277_EXTRACT SV278_EXTRACT SV279_EXTRACT 
// SV280_EXTRACT SV281_EXTRACT SV282_EXTRACT SV283_EXTRACT SV284_EXTRACT SV285_EXTRACT SV286_EXTRACT SV287_EXTRACT SV288_EXTRACT SV289_EXTRACT 
// SV290_EXTRACT SV291_EXTRACT SV292_EXTRACT SV293_EXTRACT SV294_EXTRACT SV295_EXTRACT SV296_EXTRACT SV297_EXTRACT SV298_EXTRACT SV299_EXTRACT 
// SV300_EXTRACT SV301_EXTRACT SV302_EXTRACT SV303_EXTRACT SV304_EXTRACT SV305_EXTRACT SV306_EXTRACT SV307_EXTRACT SV308_EXTRACT SV309_EXTRACT 
// SV310_EXTRACT SV311_EXTRACT SV312_EXTRACT SV313_EXTRACT SV314_EXTRACT SV315_EXTRACT SV316_EXTRACT SV317_EXTRACT SV318_EXTRACT SV319_EXTRACT 
// SV320_EXTRACT SV321_EXTRACT SV322_EXTRACT SV323_EXTRACT SV324_EXTRACT SV325_EXTRACT SV326_EXTRACT SV327_EXTRACT SV328_EXTRACT SV329_EXTRACT 
// SV330_EXTRACT SV331_EXTRACT SV332_EXTRACT SV333_EXTRACT SV334_EXTRACT SV335_EXTRACT SV336_EXTRACT SV337_EXTRACT SV338_EXTRACT SV339_EXTRACT 
// SV340_EXTRACT SV341_EXTRACT SV342_EXTRACT SV343_EXTRACT SV344_EXTRACT SV345_EXTRACT SV346_EXTRACT SV347_EXTRACT SV348_EXTRACT SV349_EXTRACT 
// SV350_EXTRACT SV351_EXTRACT SV352_EXTRACT SV353_EXTRACT SV354_EXTRACT SV355_EXTRACT SV356_EXTRACT SV357_EXTRACT SV358_EXTRACT SV359_EXTRACT 
// SV360_EXTRACT SV361_EXTRACT SV362_EXTRACT SV363_EXTRACT SV364_EXTRACT SV365_EXTRACT SV366_EXTRACT SV367_EXTRACT SV368_EXTRACT SV369_EXTRACT 
// SV370_EXTRACT SV371_EXTRACT SV372_EXTRACT SV373_EXTRACT SV374_EXTRACT SV375_EXTRACT SV376_EXTRACT SV377_EXTRACT SV378_EXTRACT SV379_EXTRACT 
// SV380_EXTRACT SV381_EXTRACT SV382_EXTRACT SV383_EXTRACT SV384_EXTRACT 
#pragma region shared code 
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_0_Data0, UID_GetSStream_0, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RandomPartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                8,
                8,
                8,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                0,
                0,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 21;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                // Hi Key
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 0 + 3;

        static UINT* SortKeys() { return nullptr; }
        static const UINT m_sortKeysCnt = 0;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_0_Data0 & row, IncrementalAllocator* alloc)
        {
                row.m_PreciseTimeStamp = iters[0].Data<ScopeDateTime>();
                iters[0].IncrementFixedNotNullable<8>();
                row.m_StartTime = iters[1].Data<ScopeDateTime>();
                iters[1].IncrementFixedNotNullable<8>();
                row.m_EndTime = iters[2].Data<ScopeDateTime>();
                iters[2].IncrementFixedNotNullable<8>();
                if (iters[3].IsNull())
                {
                    row.m_LogicalContainerId.SetNull();
                    iters[3].IncrementNull();
                }
                else
                {
                    row.m_LogicalContainerId.CopyFromNotNull((FString::PointerType)iters[3].DataRaw(), (int)iters[3].Length(), alloc);
                    iters[3].IncrementVariable();
                }
                if (iters[4].IsNull())
                {
                    row.m_RoleInstanceName.SetNull();
                    iters[4].IncrementNull();
                }
                else
                {
                    row.m_RoleInstanceName.CopyFromNotNull((FString::PointerType)iters[4].DataRaw(), (int)iters[4].Length(), alloc);
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    row.m_TenantName.SetNull();
                    iters[5].IncrementNull();
                }
                else
                {
                    row.m_TenantName.CopyFromNotNull((FString::PointerType)iters[5].DataRaw(), (int)iters[5].Length(), alloc);
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    row.m_RoleInstanceId.SetNull();
                    iters[6].IncrementNull();
                }
                else
                {
                    row.m_RoleInstanceId.CopyFromNotNull((FString::PointerType)iters[6].DataRaw(), (int)iters[6].Length(), alloc);
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                    row.m_TenantId.SetNull();
                    iters[7].IncrementNull();
                }
                else
                {
                    row.m_TenantId.CopyFromNotNull((FString::PointerType)iters[7].DataRaw(), (int)iters[7].Length(), alloc);
                    iters[7].IncrementVariable();
                }
                if (iters[8].IsNull())
                {
                    row.m_NodeId.SetNull();
                    iters[8].IncrementNull();
                }
                else
                {
                    row.m_NodeId.CopyFromNotNull((FString::PointerType)iters[8].DataRaw(), (int)iters[8].Length(), alloc);
                    iters[8].IncrementVariable();
                }
                if (iters[9].IsNull())
                {
                    row.m_ContainerId.SetNull();
                    iters[9].IncrementNull();
                }
                else
                {
                    row.m_ContainerId.CopyFromNotNull((FString::PointerType)iters[9].DataRaw(), (int)iters[9].Length(), alloc);
                    iters[9].IncrementVariable();
                }
                if (iters[10].IsNull())
                {
                    row.m_DataCenter.SetNull();
                    iters[10].IncrementNull();
                }
                else
                {
                    row.m_DataCenter.CopyFromNotNull((FString::PointerType)iters[10].DataRaw(), (int)iters[10].Length(), alloc);
                    iters[10].IncrementVariable();
                }
                if (iters[11].IsNull())
                {
                    row.m_Cluster.SetNull();
                    iters[11].IncrementNull();
                }
                else
                {
                    row.m_Cluster.CopyFromNotNull((FString::PointerType)iters[11].DataRaw(), (int)iters[11].Length(), alloc);
                    iters[11].IncrementVariable();
                }
                if (iters[12].IsNull())
                {
                    row.m_RoleType.SetNull();
                    iters[12].IncrementNull();
                }
                else
                {
                    row.m_RoleType.CopyFromNotNull((FString::PointerType)iters[12].DataRaw(), (int)iters[12].Length(), alloc);
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    row.m_TransitionSignature.SetNull();
                    iters[13].IncrementNull();
                }
                else
                {
                    row.m_TransitionSignature.CopyFromNotNull((FString::PointerType)iters[13].DataRaw(), (int)iters[13].Length(), alloc);
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    row.m_CADCategory.SetNull();
                    iters[14].IncrementNull();
                }
                else
                {
                    row.m_CADCategory.CopyFromNotNull((FString::PointerType)iters[14].DataRaw(), (int)iters[14].Length(), alloc);
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    row.m_RCAEngineCategory.SetNull();
                    iters[15].IncrementNull();
                }
                else
                {
                    row.m_RCAEngineCategory.CopyFromNotNull((FString::PointerType)iters[15].DataRaw(), (int)iters[15].Length(), alloc);
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    row.m_RCALevel1.SetNull();
                    iters[16].IncrementNull();
                }
                else
                {
                    row.m_RCALevel1.CopyFromNotNull((FString::PointerType)iters[16].DataRaw(), (int)iters[16].Length(), alloc);
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    row.m_RCALevel2.SetNull();
                    iters[17].IncrementNull();
                }
                else
                {
                    row.m_RCALevel2.CopyFromNotNull((FString::PointerType)iters[17].DataRaw(), (int)iters[17].Length(), alloc);
                    iters[17].IncrementVariable();
                }
                row.m_Duration = iters[18].Data<double>();
                iters[18].IncrementFixedNotNullable<8>();
                if (iters[19].IsNull())
                {
                    row.m_RCA.SetNull();
                    iters[19].IncrementNull();
                }
                else
                {
                    row.m_RCA.CopyFromNotNull((FString::PointerType)iters[19].DataRaw(), (int)iters[19].Length(), alloc);
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    row.m_EventList.SetNull();
                    iters[20].IncrementNull();
                }
                else
                {
                    row.m_EventList.CopyFromNotNull((FString::PointerType)iters[20].DataRaw(), (int)iters[20].Length(), alloc);
                    iters[20].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                iters[0].IncrementFixedNotNullable<8>();
                iters[1].IncrementFixedNotNullable<8>();
                iters[2].IncrementFixedNotNullable<8>();
                if (iters[3].IsNull())
                {
                    iters[3].IncrementNull();
                }
                else
                {
                    iters[3].IncrementVariable();
                }
                if (iters[4].IsNull())
                {
                    iters[4].IncrementNull();
                }
                else
                {
                    iters[4].IncrementVariable();
                }
                if (iters[5].IsNull())
                {
                    iters[5].IncrementNull();
                }
                else
                {
                    iters[5].IncrementVariable();
                }
                if (iters[6].IsNull())
                {
                    iters[6].IncrementNull();
                }
                else
                {
                    iters[6].IncrementVariable();
                }
                if (iters[7].IsNull())
                {
                    iters[7].IncrementNull();
                }
                else
                {
                    iters[7].IncrementVariable();
                }
                if (iters[8].IsNull())
                {
                    iters[8].IncrementNull();
                }
                else
                {
                    iters[8].IncrementVariable();
                }
                if (iters[9].IsNull())
                {
                    iters[9].IncrementNull();
                }
                else
                {
                    iters[9].IncrementVariable();
                }
                if (iters[10].IsNull())
                {
                    iters[10].IncrementNull();
                }
                else
                {
                    iters[10].IncrementVariable();
                }
                if (iters[11].IsNull())
                {
                    iters[11].IncrementNull();
                }
                else
                {
                    iters[11].IncrementVariable();
                }
                if (iters[12].IsNull())
                {
                    iters[12].IncrementNull();
                }
                else
                {
                    iters[12].IncrementVariable();
                }
                if (iters[13].IsNull())
                {
                    iters[13].IncrementNull();
                }
                else
                {
                    iters[13].IncrementVariable();
                }
                if (iters[14].IsNull())
                {
                    iters[14].IncrementNull();
                }
                else
                {
                    iters[14].IncrementVariable();
                }
                if (iters[15].IsNull())
                {
                    iters[15].IncrementNull();
                }
                else
                {
                    iters[15].IncrementVariable();
                }
                if (iters[16].IsNull())
                {
                    iters[16].IncrementNull();
                }
                else
                {
                    iters[16].IncrementVariable();
                }
                if (iters[17].IsNull())
                {
                    iters[17].IncrementNull();
                }
                else
                {
                    iters[17].IncrementVariable();
                }
                iters[18].IncrementFixedNotNullable<8>();
                if (iters[19].IsNull())
                {
                    iters[19].IncrementNull();
                }
                else
                {
                    iters[19].IncrementVariable();
                }
                if (iters[20].IsNull())
                {
                    iters[20].IncrementNull();
                }
                else
                {
                    iters[20].IncrementVariable();
                }
        }
        static PredFn* PredicatesLow() { return nullptr; }
        static PredFn* PredicatesHi() { return nullptr; }
        static const UINT m_predicateCnt = 0;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)
#pragma endregion shared code 
// SV1_EXTRACT SV2_EXTRACT SV3_EXTRACT SV4_EXTRACT SV5_EXTRACT SV6_EXTRACT SV7_EXTRACT SV8_EXTRACT SV9_EXTRACT SV10_EXTRACT SV11_EXTRACT 
// SV12_EXTRACT SV13_EXTRACT SV14_EXTRACT SV15_EXTRACT SV16_EXTRACT SV17_EXTRACT SV18_EXTRACT SV19_EXTRACT SV20_EXTRACT SV21_EXTRACT SV22_EXTRACT 
// SV23_EXTRACT SV24_EXTRACT SV25_EXTRACT SV26_EXTRACT SV27_EXTRACT SV28_EXTRACT SV29_EXTRACT SV30_EXTRACT SV31_EXTRACT SV32_EXTRACT SV33_EXTRACT 
// SV34_EXTRACT SV35_EXTRACT SV36_EXTRACT SV37_EXTRACT SV38_EXTRACT SV39_EXTRACT SV40_EXTRACT SV41_EXTRACT SV42_EXTRACT SV43_EXTRACT SV44_EXTRACT 
// SV45_EXTRACT SV46_EXTRACT SV47_EXTRACT SV48_EXTRACT SV49_EXTRACT SV50_EXTRACT SV51_EXTRACT SV52_EXTRACT SV53_EXTRACT SV54_EXTRACT SV55_EXTRACT 
// SV56_EXTRACT SV57_EXTRACT SV58_EXTRACT SV59_EXTRACT SV60_EXTRACT SV61_EXTRACT SV62_EXTRACT SV63_EXTRACT SV64_EXTRACT SV65_EXTRACT SV66_EXTRACT 
// SV67_EXTRACT SV68_EXTRACT SV69_EXTRACT SV70_EXTRACT SV71_EXTRACT SV72_EXTRACT SV73_EXTRACT SV74_EXTRACT SV75_EXTRACT SV76_EXTRACT SV77_EXTRACT 
// SV78_EXTRACT SV79_EXTRACT SV80_EXTRACT SV81_EXTRACT SV82_EXTRACT SV83_EXTRACT SV84_EXTRACT SV85_EXTRACT SV86_EXTRACT SV87_EXTRACT SV88_EXTRACT 
// SV89_EXTRACT SV90_EXTRACT SV91_EXTRACT SV92_EXTRACT SV93_EXTRACT SV94_EXTRACT SV95_EXTRACT SV96_EXTRACT SV97_EXTRACT SV98_EXTRACT SV99_EXTRACT 
// SV100_EXTRACT SV101_EXTRACT SV102_EXTRACT SV103_EXTRACT SV104_EXTRACT SV105_EXTRACT SV106_EXTRACT SV107_EXTRACT SV108_EXTRACT SV109_EXTRACT 
// SV110_EXTRACT SV111_EXTRACT SV112_EXTRACT SV113_EXTRACT SV114_EXTRACT SV115_EXTRACT SV116_EXTRACT SV117_EXTRACT SV118_EXTRACT SV119_EXTRACT 
// SV120_EXTRACT SV121_EXTRACT SV122_EXTRACT SV123_EXTRACT SV124_EXTRACT SV125_EXTRACT SV126_EXTRACT SV127_EXTRACT SV128_EXTRACT SV129_EXTRACT 
// SV130_EXTRACT SV131_EXTRACT SV132_EXTRACT SV133_EXTRACT SV134_EXTRACT SV135_EXTRACT SV136_EXTRACT SV137_EXTRACT SV138_EXTRACT SV139_EXTRACT 
// SV140_EXTRACT SV141_EXTRACT SV142_EXTRACT SV143_EXTRACT SV144_EXTRACT SV145_EXTRACT SV146_EXTRACT SV147_EXTRACT SV148_EXTRACT SV149_EXTRACT 
// SV150_EXTRACT SV151_EXTRACT SV152_EXTRACT SV153_EXTRACT SV154_EXTRACT SV155_EXTRACT SV156_EXTRACT SV157_EXTRACT SV158_EXTRACT SV159_EXTRACT 
// SV160_EXTRACT SV161_EXTRACT SV162_EXTRACT SV163_EXTRACT SV164_EXTRACT SV165_EXTRACT SV166_EXTRACT SV167_EXTRACT SV168_EXTRACT SV169_EXTRACT 
// SV170_EXTRACT SV171_EXTRACT SV172_EXTRACT SV173_EXTRACT SV174_EXTRACT SV175_EXTRACT SV176_EXTRACT SV177_EXTRACT SV178_EXTRACT SV179_EXTRACT 
// SV180_EXTRACT SV181_EXTRACT SV182_EXTRACT SV183_EXTRACT SV184_EXTRACT SV185_EXTRACT SV186_EXTRACT SV187_EXTRACT SV188_EXTRACT SV189_EXTRACT 
// SV190_EXTRACT SV191_EXTRACT SV192_EXTRACT SV193_EXTRACT SV194_EXTRACT SV195_EXTRACT SV196_EXTRACT SV197_EXTRACT SV198_EXTRACT SV199_EXTRACT 
// SV200_EXTRACT SV201_EXTRACT SV202_EXTRACT SV203_EXTRACT SV204_EXTRACT SV205_EXTRACT SV206_EXTRACT SV207_EXTRACT SV208_EXTRACT SV209_EXTRACT 
// SV210_EXTRACT SV211_EXTRACT SV212_EXTRACT SV213_EXTRACT SV214_EXTRACT SV215_EXTRACT SV216_EXTRACT SV217_EXTRACT SV218_EXTRACT SV219_EXTRACT 
// SV220_EXTRACT SV221_EXTRACT SV222_EXTRACT SV223_EXTRACT SV224_EXTRACT SV225_EXTRACT SV226_EXTRACT SV227_EXTRACT SV228_EXTRACT SV229_EXTRACT 
// SV230_EXTRACT SV231_EXTRACT SV232_EXTRACT SV233_EXTRACT SV234_EXTRACT SV235_EXTRACT SV236_EXTRACT SV237_EXTRACT SV238_EXTRACT SV239_EXTRACT 
// SV240_EXTRACT SV241_EXTRACT SV242_EXTRACT SV243_EXTRACT SV244_EXTRACT SV245_EXTRACT SV246_EXTRACT SV247_EXTRACT SV248_EXTRACT SV249_EXTRACT 
// SV250_EXTRACT SV251_EXTRACT SV252_EXTRACT SV253_EXTRACT SV254_EXTRACT SV255_EXTRACT SV256_EXTRACT SV257_EXTRACT SV258_EXTRACT SV259_EXTRACT 
// SV260_EXTRACT SV261_EXTRACT SV262_EXTRACT SV263_EXTRACT SV264_EXTRACT SV265_EXTRACT SV266_EXTRACT SV267_EXTRACT SV268_EXTRACT SV269_EXTRACT 
// SV270_EXTRACT SV271_EXTRACT SV272_EXTRACT SV273_EXTRACT SV274_EXTRACT SV275_EXTRACT SV276_EXTRACT SV277_EXTRACT SV278_EXTRACT SV279_EXTRACT 
// SV280_EXTRACT SV281_EXTRACT SV282_EXTRACT SV283_EXTRACT SV284_EXTRACT SV285_EXTRACT SV286_EXTRACT SV287_EXTRACT SV288_EXTRACT SV289_EXTRACT 
// SV290_EXTRACT SV291_EXTRACT SV292_EXTRACT SV293_EXTRACT SV294_EXTRACT SV295_EXTRACT SV296_EXTRACT SV297_EXTRACT SV298_EXTRACT SV299_EXTRACT 
// SV300_EXTRACT SV301_EXTRACT SV302_EXTRACT SV303_EXTRACT SV304_EXTRACT SV305_EXTRACT SV306_EXTRACT SV307_EXTRACT SV308_EXTRACT SV309_EXTRACT 
// SV310_EXTRACT SV311_EXTRACT SV312_EXTRACT SV313_EXTRACT SV314_EXTRACT SV315_EXTRACT SV316_EXTRACT SV317_EXTRACT SV318_EXTRACT SV319_EXTRACT 
// SV320_EXTRACT SV321_EXTRACT SV322_EXTRACT SV323_EXTRACT SV324_EXTRACT SV325_EXTRACT SV326_EXTRACT SV327_EXTRACT SV328_EXTRACT SV329_EXTRACT 
// SV330_EXTRACT SV331_EXTRACT SV332_EXTRACT SV333_EXTRACT SV334_EXTRACT SV335_EXTRACT SV336_EXTRACT SV337_EXTRACT SV338_EXTRACT SV339_EXTRACT 
// SV340_EXTRACT SV341_EXTRACT SV342_EXTRACT SV343_EXTRACT SV344_EXTRACT SV345_EXTRACT SV346_EXTRACT SV347_EXTRACT SV348_EXTRACT SV349_EXTRACT 
// SV350_EXTRACT SV351_EXTRACT SV352_EXTRACT SV353_EXTRACT SV354_EXTRACT SV355_EXTRACT SV356_EXTRACT SV357_EXTRACT SV358_EXTRACT SV359_EXTRACT 
// SV360_EXTRACT SV361_EXTRACT SV362_EXTRACT SV363_EXTRACT SV364_EXTRACT SV365_EXTRACT SV366_EXTRACT SV367_EXTRACT SV368_EXTRACT SV369_EXTRACT 
// SV370_EXTRACT SV371_EXTRACT SV372_EXTRACT SV373_EXTRACT SV374_EXTRACT SV375_EXTRACT SV376_EXTRACT SV377_EXTRACT SV378_EXTRACT SV379_EXTRACT 
// SV380_EXTRACT SV381_EXTRACT SV382_EXTRACT SV383_EXTRACT SV384_EXTRACT 
#pragma region shared code 

    template<> 
    class KeyComparePolicy<GetSStream_0_Data0,UID_Process_1>
    {
    public:
        struct KeyStruct
        {
            FString m_RoleInstanceName;

            KeyStruct(GetSStream_0_Data0 & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<KeyStruct&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct() :
                m_RoleInstanceName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_0_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceName, key.m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_0_Data0 * n1, GetSStream_0_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

        // Key function for MKQsort algorithm
        static __int64 Key(GetSStream_0_Data0 * p, int depth)
        {
            if (depth < 1 && (*p).m_RoleInstanceName.IsNull())
            {
                // Special case for "null" string
                return (__int64)(256);
            }
            else if (depth == (int) (*p).m_RoleInstanceName.size())
            {
                // Special case for end-of-string (field separator)
                return (__int64)(-1);
            }
            else if (depth < (int) (*p).m_RoleInstanceName.size())
            {
                // For string convert to unsigned char first. Otherwise, unicode will have negative value which will have different order than binary comparison.
                return (__int64)((unsigned char)((*p).m_RoleInstanceName.buffer()[depth]));
            }

            depth -= (int) ((*p).m_RoleInstanceName.size() + 1);


            return 0;
        }

        // End of Key function for MKQSort algorithm
        static bool EofKey(GetSStream_0_Data0 * p, int depth)
        {
            depth -= (int) ((*p).m_RoleInstanceName.size() + 1);
            if (depth < 0)
                return false;
            return true;
        }
    };

#pragma endregion shared code 
#pragma hdrstop
#if defined(COMPILE_INIT_SHUTDOWN)
#if defined(COMPILE_MANAGED)
extern "C" __declspec(dllexport) void __stdcall InitVertexManaged(std::string * argv, int argc)
{
#if defined(FORCEMANAGEDDATETIMESER)
    ScopeEngine::ScopeDateTime::ForceManagedSerialization = true;
#endif
    ScopeEngine::InitializeScopeRuntime(argv, argc);
}
extern "C" __declspec(dllexport) void __stdcall ShutdownVertexManaged(UINT64& peakManagedMemory)
{
    ScopeEngine::FinalizeScopeRuntime(peakManagedMemory);
}
#endif
#if defined(COMPILE_NATIVE)
ScopeEngine::ScopeCEPCheckpointManager* g_scopeCEPCheckpointManager = NULL;
extern "C" __declspec(dllexport) void __stdcall InitVertexNative(VertexExecutionInfo * vertexExecutionInfo)
{
#if defined(FORCEMANAGEDDATETIMESER)
    ScopeEngine::ScopeDateTime::ForceManagedSerialization = true;
#endif
}
extern "C" __declspec(dllexport) void __stdcall SV_CopyThrough_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
{
    SCOPE_ASSERT(inputCnt == 1 && outputCnt == 1);
    IOManager::CopyStream(IOManager::GetGlobal()->GetDevice(inputs[0].inputFileName), IOManager::GetGlobal()->GetDevice(outputFileNames[0]));
}
#endif
#endif
#pragma region SV1_Extract
#if defined(COMPILE_SV1_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_1>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV1_Extract_GetSStream_0;
    SStreamV3ExtractorType_SV1_Extract_GetSStream_0 * CreateExtractor_SV1_Extract_GetSStream_0(unique_ptr<SStreamV3ExtractorType_SV1_Extract_GetSStream_0> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV1_Extract_GetSStream_0(0, "", true/*100*/, UID_GetSStream_0));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV1_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV1_Extract_GetSStream_0> extractor_0_ptr;
        SStreamV3ExtractorType_SV1_Extract_GetSStream_0 * extractor_0 = CreateExtractor_SV1_Extract_GetSStream_0(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_1;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_1> sorter_Process_1_ptr (new SorterType_Process_1(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_1));
        SorterType_Process_1 * sorter_Process_1 = sorter_Process_1_ptr.get();
        ULONG sorter_Process_1_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_1, BinaryOutputPolicy<typename SorterType_Process_1::Schema>, BinaryOutputStream, false> OutputerType1_SV1_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV1_Extract> outputer_SV1_Extract_out0_ptr(new OutputerType1_SV1_Extract(sorter_Process_1, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV1_Extract_out0));
        OutputerType1_SV1_Extract * outputer_SV1_Extract_out0 = outputer_SV1_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV1_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_1::Schema row;
            outputer_SV1_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV1_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV1_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV1_Extract
#pragma region SV2_Extract
#if defined(COMPILE_SV2_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_3>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV2_Extract_GetSStream_2;
    SStreamV3ExtractorType_SV2_Extract_GetSStream_2 * CreateExtractor_SV2_Extract_GetSStream_2(unique_ptr<SStreamV3ExtractorType_SV2_Extract_GetSStream_2> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV2_Extract_GetSStream_2(2, "", true/*100*/, UID_GetSStream_2));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV2_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV2_Extract_GetSStream_2> extractor_0_ptr;
        SStreamV3ExtractorType_SV2_Extract_GetSStream_2 * extractor_0 = CreateExtractor_SV2_Extract_GetSStream_2(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_3;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_3> sorter_Process_3_ptr (new SorterType_Process_3(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_3));
        SorterType_Process_3 * sorter_Process_3 = sorter_Process_3_ptr.get();
        ULONG sorter_Process_3_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_3, BinaryOutputPolicy<typename SorterType_Process_3::Schema>, BinaryOutputStream, false> OutputerType1_SV2_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV2_Extract> outputer_SV2_Extract_out0_ptr(new OutputerType1_SV2_Extract(sorter_Process_3, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV2_Extract_out0));
        OutputerType1_SV2_Extract * outputer_SV2_Extract_out0 = outputer_SV2_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV2_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_3::Schema row;
            outputer_SV2_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV2_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV2_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV2_Extract
#pragma region SV3_Extract
#if defined(COMPILE_SV3_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_5>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV3_Extract_GetSStream_4;
    SStreamV3ExtractorType_SV3_Extract_GetSStream_4 * CreateExtractor_SV3_Extract_GetSStream_4(unique_ptr<SStreamV3ExtractorType_SV3_Extract_GetSStream_4> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV3_Extract_GetSStream_4(4, "", true/*100*/, UID_GetSStream_4));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV3_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV3_Extract_GetSStream_4> extractor_0_ptr;
        SStreamV3ExtractorType_SV3_Extract_GetSStream_4 * extractor_0 = CreateExtractor_SV3_Extract_GetSStream_4(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_5;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_5> sorter_Process_5_ptr (new SorterType_Process_5(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_5));
        SorterType_Process_5 * sorter_Process_5 = sorter_Process_5_ptr.get();
        ULONG sorter_Process_5_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_5, BinaryOutputPolicy<typename SorterType_Process_5::Schema>, BinaryOutputStream, false> OutputerType1_SV3_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV3_Extract> outputer_SV3_Extract_out0_ptr(new OutputerType1_SV3_Extract(sorter_Process_5, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV3_Extract_out0));
        OutputerType1_SV3_Extract * outputer_SV3_Extract_out0 = outputer_SV3_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV3_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_5::Schema row;
            outputer_SV3_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV3_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV3_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV3_Extract
#pragma region SV4_Extract
#if defined(COMPILE_SV4_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_7>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV4_Extract_GetSStream_6;
    SStreamV3ExtractorType_SV4_Extract_GetSStream_6 * CreateExtractor_SV4_Extract_GetSStream_6(unique_ptr<SStreamV3ExtractorType_SV4_Extract_GetSStream_6> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV4_Extract_GetSStream_6(6, "", true/*100*/, UID_GetSStream_6));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV4_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV4_Extract_GetSStream_6> extractor_0_ptr;
        SStreamV3ExtractorType_SV4_Extract_GetSStream_6 * extractor_0 = CreateExtractor_SV4_Extract_GetSStream_6(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_7;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_7> sorter_Process_7_ptr (new SorterType_Process_7(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_7));
        SorterType_Process_7 * sorter_Process_7 = sorter_Process_7_ptr.get();
        ULONG sorter_Process_7_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_7, BinaryOutputPolicy<typename SorterType_Process_7::Schema>, BinaryOutputStream, false> OutputerType1_SV4_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV4_Extract> outputer_SV4_Extract_out0_ptr(new OutputerType1_SV4_Extract(sorter_Process_7, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV4_Extract_out0));
        OutputerType1_SV4_Extract * outputer_SV4_Extract_out0 = outputer_SV4_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV4_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_7::Schema row;
            outputer_SV4_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV4_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV4_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV4_Extract
#pragma region SV5_Extract
#if defined(COMPILE_SV5_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_9>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV5_Extract_GetSStream_8;
    SStreamV3ExtractorType_SV5_Extract_GetSStream_8 * CreateExtractor_SV5_Extract_GetSStream_8(unique_ptr<SStreamV3ExtractorType_SV5_Extract_GetSStream_8> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV5_Extract_GetSStream_8(8, "", true/*100*/, UID_GetSStream_8));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV5_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV5_Extract_GetSStream_8> extractor_0_ptr;
        SStreamV3ExtractorType_SV5_Extract_GetSStream_8 * extractor_0 = CreateExtractor_SV5_Extract_GetSStream_8(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_9;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_9> sorter_Process_9_ptr (new SorterType_Process_9(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_9));
        SorterType_Process_9 * sorter_Process_9 = sorter_Process_9_ptr.get();
        ULONG sorter_Process_9_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_9, BinaryOutputPolicy<typename SorterType_Process_9::Schema>, BinaryOutputStream, false> OutputerType1_SV5_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV5_Extract> outputer_SV5_Extract_out0_ptr(new OutputerType1_SV5_Extract(sorter_Process_9, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV5_Extract_out0));
        OutputerType1_SV5_Extract * outputer_SV5_Extract_out0 = outputer_SV5_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV5_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_9::Schema row;
            outputer_SV5_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV5_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV5_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV5_Extract
#pragma region SV6_Extract
#if defined(COMPILE_SV6_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_11>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV6_Extract_GetSStream_10;
    SStreamV3ExtractorType_SV6_Extract_GetSStream_10 * CreateExtractor_SV6_Extract_GetSStream_10(unique_ptr<SStreamV3ExtractorType_SV6_Extract_GetSStream_10> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV6_Extract_GetSStream_10(10, "", true/*100*/, UID_GetSStream_10));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV6_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV6_Extract_GetSStream_10> extractor_0_ptr;
        SStreamV3ExtractorType_SV6_Extract_GetSStream_10 * extractor_0 = CreateExtractor_SV6_Extract_GetSStream_10(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_11;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_11> sorter_Process_11_ptr (new SorterType_Process_11(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_11));
        SorterType_Process_11 * sorter_Process_11 = sorter_Process_11_ptr.get();
        ULONG sorter_Process_11_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_11, BinaryOutputPolicy<typename SorterType_Process_11::Schema>, BinaryOutputStream, false> OutputerType1_SV6_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV6_Extract> outputer_SV6_Extract_out0_ptr(new OutputerType1_SV6_Extract(sorter_Process_11, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV6_Extract_out0));
        OutputerType1_SV6_Extract * outputer_SV6_Extract_out0 = outputer_SV6_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV6_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_11::Schema row;
            outputer_SV6_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV6_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV6_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV6_Extract
#pragma region SV7_Extract
#if defined(COMPILE_SV7_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_13>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV7_Extract_GetSStream_12;
    SStreamV3ExtractorType_SV7_Extract_GetSStream_12 * CreateExtractor_SV7_Extract_GetSStream_12(unique_ptr<SStreamV3ExtractorType_SV7_Extract_GetSStream_12> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV7_Extract_GetSStream_12(12, "", true/*100*/, UID_GetSStream_12));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV7_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV7_Extract_GetSStream_12> extractor_0_ptr;
        SStreamV3ExtractorType_SV7_Extract_GetSStream_12 * extractor_0 = CreateExtractor_SV7_Extract_GetSStream_12(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_13;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_13> sorter_Process_13_ptr (new SorterType_Process_13(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_13));
        SorterType_Process_13 * sorter_Process_13 = sorter_Process_13_ptr.get();
        ULONG sorter_Process_13_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_13, BinaryOutputPolicy<typename SorterType_Process_13::Schema>, BinaryOutputStream, false> OutputerType1_SV7_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV7_Extract> outputer_SV7_Extract_out0_ptr(new OutputerType1_SV7_Extract(sorter_Process_13, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV7_Extract_out0));
        OutputerType1_SV7_Extract * outputer_SV7_Extract_out0 = outputer_SV7_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV7_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_13::Schema row;
            outputer_SV7_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV7_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV7_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV7_Extract
#pragma region SV8_Extract
#if defined(COMPILE_SV8_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_15>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV8_Extract_GetSStream_14;
    SStreamV3ExtractorType_SV8_Extract_GetSStream_14 * CreateExtractor_SV8_Extract_GetSStream_14(unique_ptr<SStreamV3ExtractorType_SV8_Extract_GetSStream_14> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV8_Extract_GetSStream_14(14, "", true/*100*/, UID_GetSStream_14));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV8_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV8_Extract_GetSStream_14> extractor_0_ptr;
        SStreamV3ExtractorType_SV8_Extract_GetSStream_14 * extractor_0 = CreateExtractor_SV8_Extract_GetSStream_14(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_15;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_15> sorter_Process_15_ptr (new SorterType_Process_15(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_15));
        SorterType_Process_15 * sorter_Process_15 = sorter_Process_15_ptr.get();
        ULONG sorter_Process_15_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_15, BinaryOutputPolicy<typename SorterType_Process_15::Schema>, BinaryOutputStream, false> OutputerType1_SV8_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV8_Extract> outputer_SV8_Extract_out0_ptr(new OutputerType1_SV8_Extract(sorter_Process_15, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV8_Extract_out0));
        OutputerType1_SV8_Extract * outputer_SV8_Extract_out0 = outputer_SV8_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV8_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_15::Schema row;
            outputer_SV8_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV8_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV8_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV8_Extract
#pragma region SV9_Extract
#if defined(COMPILE_SV9_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_17>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV9_Extract_GetSStream_16;
    SStreamV3ExtractorType_SV9_Extract_GetSStream_16 * CreateExtractor_SV9_Extract_GetSStream_16(unique_ptr<SStreamV3ExtractorType_SV9_Extract_GetSStream_16> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV9_Extract_GetSStream_16(16, "", true/*100*/, UID_GetSStream_16));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV9_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV9_Extract_GetSStream_16> extractor_0_ptr;
        SStreamV3ExtractorType_SV9_Extract_GetSStream_16 * extractor_0 = CreateExtractor_SV9_Extract_GetSStream_16(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_17;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_17> sorter_Process_17_ptr (new SorterType_Process_17(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_17));
        SorterType_Process_17 * sorter_Process_17 = sorter_Process_17_ptr.get();
        ULONG sorter_Process_17_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_17, BinaryOutputPolicy<typename SorterType_Process_17::Schema>, BinaryOutputStream, false> OutputerType1_SV9_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV9_Extract> outputer_SV9_Extract_out0_ptr(new OutputerType1_SV9_Extract(sorter_Process_17, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV9_Extract_out0));
        OutputerType1_SV9_Extract * outputer_SV9_Extract_out0 = outputer_SV9_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV9_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_17::Schema row;
            outputer_SV9_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV9_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV9_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV9_Extract
#pragma region SV10_Extract
#if defined(COMPILE_SV10_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_19>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV10_Extract_GetSStream_18;
    SStreamV3ExtractorType_SV10_Extract_GetSStream_18 * CreateExtractor_SV10_Extract_GetSStream_18(unique_ptr<SStreamV3ExtractorType_SV10_Extract_GetSStream_18> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV10_Extract_GetSStream_18(18, "", true/*100*/, UID_GetSStream_18));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV10_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV10_Extract_GetSStream_18> extractor_0_ptr;
        SStreamV3ExtractorType_SV10_Extract_GetSStream_18 * extractor_0 = CreateExtractor_SV10_Extract_GetSStream_18(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_19;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_19> sorter_Process_19_ptr (new SorterType_Process_19(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_19));
        SorterType_Process_19 * sorter_Process_19 = sorter_Process_19_ptr.get();
        ULONG sorter_Process_19_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_19, BinaryOutputPolicy<typename SorterType_Process_19::Schema>, BinaryOutputStream, false> OutputerType1_SV10_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV10_Extract> outputer_SV10_Extract_out0_ptr(new OutputerType1_SV10_Extract(sorter_Process_19, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV10_Extract_out0));
        OutputerType1_SV10_Extract * outputer_SV10_Extract_out0 = outputer_SV10_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV10_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_19::Schema row;
            outputer_SV10_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV10_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV10_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV10_Extract
#pragma region SV11_Extract
#if defined(COMPILE_SV11_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_21>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV11_Extract_GetSStream_20;
    SStreamV3ExtractorType_SV11_Extract_GetSStream_20 * CreateExtractor_SV11_Extract_GetSStream_20(unique_ptr<SStreamV3ExtractorType_SV11_Extract_GetSStream_20> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV11_Extract_GetSStream_20(20, "", true/*100*/, UID_GetSStream_20));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV11_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV11_Extract_GetSStream_20> extractor_0_ptr;
        SStreamV3ExtractorType_SV11_Extract_GetSStream_20 * extractor_0 = CreateExtractor_SV11_Extract_GetSStream_20(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_21;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_21> sorter_Process_21_ptr (new SorterType_Process_21(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_21));
        SorterType_Process_21 * sorter_Process_21 = sorter_Process_21_ptr.get();
        ULONG sorter_Process_21_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_21, BinaryOutputPolicy<typename SorterType_Process_21::Schema>, BinaryOutputStream, false> OutputerType1_SV11_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV11_Extract> outputer_SV11_Extract_out0_ptr(new OutputerType1_SV11_Extract(sorter_Process_21, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV11_Extract_out0));
        OutputerType1_SV11_Extract * outputer_SV11_Extract_out0 = outputer_SV11_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV11_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_21::Schema row;
            outputer_SV11_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV11_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV11_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV11_Extract
#pragma region SV12_Extract
#if defined(COMPILE_SV12_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_23>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV12_Extract_GetSStream_22;
    SStreamV3ExtractorType_SV12_Extract_GetSStream_22 * CreateExtractor_SV12_Extract_GetSStream_22(unique_ptr<SStreamV3ExtractorType_SV12_Extract_GetSStream_22> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV12_Extract_GetSStream_22(22, "", true/*100*/, UID_GetSStream_22));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV12_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV12_Extract_GetSStream_22> extractor_0_ptr;
        SStreamV3ExtractorType_SV12_Extract_GetSStream_22 * extractor_0 = CreateExtractor_SV12_Extract_GetSStream_22(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_23;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_23> sorter_Process_23_ptr (new SorterType_Process_23(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_23));
        SorterType_Process_23 * sorter_Process_23 = sorter_Process_23_ptr.get();
        ULONG sorter_Process_23_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_23, BinaryOutputPolicy<typename SorterType_Process_23::Schema>, BinaryOutputStream, false> OutputerType1_SV12_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV12_Extract> outputer_SV12_Extract_out0_ptr(new OutputerType1_SV12_Extract(sorter_Process_23, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV12_Extract_out0));
        OutputerType1_SV12_Extract * outputer_SV12_Extract_out0 = outputer_SV12_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV12_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_23::Schema row;
            outputer_SV12_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV12_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV12_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV12_Extract
#pragma region SV13_Extract
#if defined(COMPILE_SV13_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_25>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV13_Extract_GetSStream_24;
    SStreamV3ExtractorType_SV13_Extract_GetSStream_24 * CreateExtractor_SV13_Extract_GetSStream_24(unique_ptr<SStreamV3ExtractorType_SV13_Extract_GetSStream_24> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV13_Extract_GetSStream_24(24, "", true/*100*/, UID_GetSStream_24));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV13_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV13_Extract_GetSStream_24> extractor_0_ptr;
        SStreamV3ExtractorType_SV13_Extract_GetSStream_24 * extractor_0 = CreateExtractor_SV13_Extract_GetSStream_24(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_25;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_25> sorter_Process_25_ptr (new SorterType_Process_25(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_25));
        SorterType_Process_25 * sorter_Process_25 = sorter_Process_25_ptr.get();
        ULONG sorter_Process_25_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_25, BinaryOutputPolicy<typename SorterType_Process_25::Schema>, BinaryOutputStream, false> OutputerType1_SV13_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV13_Extract> outputer_SV13_Extract_out0_ptr(new OutputerType1_SV13_Extract(sorter_Process_25, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV13_Extract_out0));
        OutputerType1_SV13_Extract * outputer_SV13_Extract_out0 = outputer_SV13_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV13_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_25::Schema row;
            outputer_SV13_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV13_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV13_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV13_Extract
#pragma region SV14_Extract
#if defined(COMPILE_SV14_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_27>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV14_Extract_GetSStream_26;
    SStreamV3ExtractorType_SV14_Extract_GetSStream_26 * CreateExtractor_SV14_Extract_GetSStream_26(unique_ptr<SStreamV3ExtractorType_SV14_Extract_GetSStream_26> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV14_Extract_GetSStream_26(26, "", true/*100*/, UID_GetSStream_26));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV14_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV14_Extract_GetSStream_26> extractor_0_ptr;
        SStreamV3ExtractorType_SV14_Extract_GetSStream_26 * extractor_0 = CreateExtractor_SV14_Extract_GetSStream_26(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_27;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_27> sorter_Process_27_ptr (new SorterType_Process_27(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_27));
        SorterType_Process_27 * sorter_Process_27 = sorter_Process_27_ptr.get();
        ULONG sorter_Process_27_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_27, BinaryOutputPolicy<typename SorterType_Process_27::Schema>, BinaryOutputStream, false> OutputerType1_SV14_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV14_Extract> outputer_SV14_Extract_out0_ptr(new OutputerType1_SV14_Extract(sorter_Process_27, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV14_Extract_out0));
        OutputerType1_SV14_Extract * outputer_SV14_Extract_out0 = outputer_SV14_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV14_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_27::Schema row;
            outputer_SV14_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV14_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV14_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV14_Extract
#pragma region SV15_Extract
#if defined(COMPILE_SV15_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_29>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV15_Extract_GetSStream_28;
    SStreamV3ExtractorType_SV15_Extract_GetSStream_28 * CreateExtractor_SV15_Extract_GetSStream_28(unique_ptr<SStreamV3ExtractorType_SV15_Extract_GetSStream_28> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV15_Extract_GetSStream_28(28, "", true/*100*/, UID_GetSStream_28));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV15_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV15_Extract_GetSStream_28> extractor_0_ptr;
        SStreamV3ExtractorType_SV15_Extract_GetSStream_28 * extractor_0 = CreateExtractor_SV15_Extract_GetSStream_28(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_29;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_29> sorter_Process_29_ptr (new SorterType_Process_29(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_29));
        SorterType_Process_29 * sorter_Process_29 = sorter_Process_29_ptr.get();
        ULONG sorter_Process_29_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_29, BinaryOutputPolicy<typename SorterType_Process_29::Schema>, BinaryOutputStream, false> OutputerType1_SV15_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV15_Extract> outputer_SV15_Extract_out0_ptr(new OutputerType1_SV15_Extract(sorter_Process_29, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV15_Extract_out0));
        OutputerType1_SV15_Extract * outputer_SV15_Extract_out0 = outputer_SV15_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV15_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_29::Schema row;
            outputer_SV15_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV15_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV15_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV15_Extract
#pragma region SV16_Extract
#if defined(COMPILE_SV16_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_31>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV16_Extract_GetSStream_30;
    SStreamV3ExtractorType_SV16_Extract_GetSStream_30 * CreateExtractor_SV16_Extract_GetSStream_30(unique_ptr<SStreamV3ExtractorType_SV16_Extract_GetSStream_30> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV16_Extract_GetSStream_30(30, "", true/*100*/, UID_GetSStream_30));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV16_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV16_Extract_GetSStream_30> extractor_0_ptr;
        SStreamV3ExtractorType_SV16_Extract_GetSStream_30 * extractor_0 = CreateExtractor_SV16_Extract_GetSStream_30(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_31;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_31> sorter_Process_31_ptr (new SorterType_Process_31(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_31));
        SorterType_Process_31 * sorter_Process_31 = sorter_Process_31_ptr.get();
        ULONG sorter_Process_31_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_31, BinaryOutputPolicy<typename SorterType_Process_31::Schema>, BinaryOutputStream, false> OutputerType1_SV16_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV16_Extract> outputer_SV16_Extract_out0_ptr(new OutputerType1_SV16_Extract(sorter_Process_31, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV16_Extract_out0));
        OutputerType1_SV16_Extract * outputer_SV16_Extract_out0 = outputer_SV16_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV16_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_31::Schema row;
            outputer_SV16_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV16_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV16_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV16_Extract
#pragma region SV17_Extract
#if defined(COMPILE_SV17_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_33>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV17_Extract_GetSStream_32;
    SStreamV3ExtractorType_SV17_Extract_GetSStream_32 * CreateExtractor_SV17_Extract_GetSStream_32(unique_ptr<SStreamV3ExtractorType_SV17_Extract_GetSStream_32> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV17_Extract_GetSStream_32(32, "", true/*100*/, UID_GetSStream_32));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV17_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV17_Extract_GetSStream_32> extractor_0_ptr;
        SStreamV3ExtractorType_SV17_Extract_GetSStream_32 * extractor_0 = CreateExtractor_SV17_Extract_GetSStream_32(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_33;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_33> sorter_Process_33_ptr (new SorterType_Process_33(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_33));
        SorterType_Process_33 * sorter_Process_33 = sorter_Process_33_ptr.get();
        ULONG sorter_Process_33_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_33, BinaryOutputPolicy<typename SorterType_Process_33::Schema>, BinaryOutputStream, false> OutputerType1_SV17_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV17_Extract> outputer_SV17_Extract_out0_ptr(new OutputerType1_SV17_Extract(sorter_Process_33, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV17_Extract_out0));
        OutputerType1_SV17_Extract * outputer_SV17_Extract_out0 = outputer_SV17_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV17_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_33::Schema row;
            outputer_SV17_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV17_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV17_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV17_Extract
#pragma region SV18_Extract
#if defined(COMPILE_SV18_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_35>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV18_Extract_GetSStream_34;
    SStreamV3ExtractorType_SV18_Extract_GetSStream_34 * CreateExtractor_SV18_Extract_GetSStream_34(unique_ptr<SStreamV3ExtractorType_SV18_Extract_GetSStream_34> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV18_Extract_GetSStream_34(34, "", true/*100*/, UID_GetSStream_34));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV18_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV18_Extract_GetSStream_34> extractor_0_ptr;
        SStreamV3ExtractorType_SV18_Extract_GetSStream_34 * extractor_0 = CreateExtractor_SV18_Extract_GetSStream_34(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_35;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_35> sorter_Process_35_ptr (new SorterType_Process_35(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_35));
        SorterType_Process_35 * sorter_Process_35 = sorter_Process_35_ptr.get();
        ULONG sorter_Process_35_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_35, BinaryOutputPolicy<typename SorterType_Process_35::Schema>, BinaryOutputStream, false> OutputerType1_SV18_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV18_Extract> outputer_SV18_Extract_out0_ptr(new OutputerType1_SV18_Extract(sorter_Process_35, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV18_Extract_out0));
        OutputerType1_SV18_Extract * outputer_SV18_Extract_out0 = outputer_SV18_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV18_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_35::Schema row;
            outputer_SV18_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV18_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV18_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV18_Extract
#pragma region SV19_Extract
#if defined(COMPILE_SV19_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_37>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV19_Extract_GetSStream_36;
    SStreamV3ExtractorType_SV19_Extract_GetSStream_36 * CreateExtractor_SV19_Extract_GetSStream_36(unique_ptr<SStreamV3ExtractorType_SV19_Extract_GetSStream_36> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV19_Extract_GetSStream_36(36, "", true/*100*/, UID_GetSStream_36));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV19_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV19_Extract_GetSStream_36> extractor_0_ptr;
        SStreamV3ExtractorType_SV19_Extract_GetSStream_36 * extractor_0 = CreateExtractor_SV19_Extract_GetSStream_36(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_37;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_37> sorter_Process_37_ptr (new SorterType_Process_37(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_37));
        SorterType_Process_37 * sorter_Process_37 = sorter_Process_37_ptr.get();
        ULONG sorter_Process_37_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_37, BinaryOutputPolicy<typename SorterType_Process_37::Schema>, BinaryOutputStream, false> OutputerType1_SV19_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV19_Extract> outputer_SV19_Extract_out0_ptr(new OutputerType1_SV19_Extract(sorter_Process_37, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV19_Extract_out0));
        OutputerType1_SV19_Extract * outputer_SV19_Extract_out0 = outputer_SV19_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV19_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_37::Schema row;
            outputer_SV19_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV19_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV19_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV19_Extract
#pragma region SV20_Extract
#if defined(COMPILE_SV20_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_39>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV20_Extract_GetSStream_38;
    SStreamV3ExtractorType_SV20_Extract_GetSStream_38 * CreateExtractor_SV20_Extract_GetSStream_38(unique_ptr<SStreamV3ExtractorType_SV20_Extract_GetSStream_38> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV20_Extract_GetSStream_38(38, "", true/*100*/, UID_GetSStream_38));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV20_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV20_Extract_GetSStream_38> extractor_0_ptr;
        SStreamV3ExtractorType_SV20_Extract_GetSStream_38 * extractor_0 = CreateExtractor_SV20_Extract_GetSStream_38(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_39;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_39> sorter_Process_39_ptr (new SorterType_Process_39(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_39));
        SorterType_Process_39 * sorter_Process_39 = sorter_Process_39_ptr.get();
        ULONG sorter_Process_39_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_39, BinaryOutputPolicy<typename SorterType_Process_39::Schema>, BinaryOutputStream, false> OutputerType1_SV20_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV20_Extract> outputer_SV20_Extract_out0_ptr(new OutputerType1_SV20_Extract(sorter_Process_39, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV20_Extract_out0));
        OutputerType1_SV20_Extract * outputer_SV20_Extract_out0 = outputer_SV20_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV20_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_39::Schema row;
            outputer_SV20_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV20_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV20_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV20_Extract
#pragma region SV21_Extract
#if defined(COMPILE_SV21_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_41>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV21_Extract_GetSStream_40;
    SStreamV3ExtractorType_SV21_Extract_GetSStream_40 * CreateExtractor_SV21_Extract_GetSStream_40(unique_ptr<SStreamV3ExtractorType_SV21_Extract_GetSStream_40> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV21_Extract_GetSStream_40(40, "", true/*100*/, UID_GetSStream_40));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV21_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV21_Extract_GetSStream_40> extractor_0_ptr;
        SStreamV3ExtractorType_SV21_Extract_GetSStream_40 * extractor_0 = CreateExtractor_SV21_Extract_GetSStream_40(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_41;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_41> sorter_Process_41_ptr (new SorterType_Process_41(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_41));
        SorterType_Process_41 * sorter_Process_41 = sorter_Process_41_ptr.get();
        ULONG sorter_Process_41_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_41, BinaryOutputPolicy<typename SorterType_Process_41::Schema>, BinaryOutputStream, false> OutputerType1_SV21_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV21_Extract> outputer_SV21_Extract_out0_ptr(new OutputerType1_SV21_Extract(sorter_Process_41, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV21_Extract_out0));
        OutputerType1_SV21_Extract * outputer_SV21_Extract_out0 = outputer_SV21_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV21_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_41::Schema row;
            outputer_SV21_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV21_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV21_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV21_Extract
#pragma region SV22_Extract
#if defined(COMPILE_SV22_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_43>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV22_Extract_GetSStream_42;
    SStreamV3ExtractorType_SV22_Extract_GetSStream_42 * CreateExtractor_SV22_Extract_GetSStream_42(unique_ptr<SStreamV3ExtractorType_SV22_Extract_GetSStream_42> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV22_Extract_GetSStream_42(42, "", true/*100*/, UID_GetSStream_42));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV22_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV22_Extract_GetSStream_42> extractor_0_ptr;
        SStreamV3ExtractorType_SV22_Extract_GetSStream_42 * extractor_0 = CreateExtractor_SV22_Extract_GetSStream_42(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_43;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_43> sorter_Process_43_ptr (new SorterType_Process_43(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_43));
        SorterType_Process_43 * sorter_Process_43 = sorter_Process_43_ptr.get();
        ULONG sorter_Process_43_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_43, BinaryOutputPolicy<typename SorterType_Process_43::Schema>, BinaryOutputStream, false> OutputerType1_SV22_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV22_Extract> outputer_SV22_Extract_out0_ptr(new OutputerType1_SV22_Extract(sorter_Process_43, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV22_Extract_out0));
        OutputerType1_SV22_Extract * outputer_SV22_Extract_out0 = outputer_SV22_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV22_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_43::Schema row;
            outputer_SV22_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV22_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV22_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV22_Extract
#pragma region SV23_Extract
#if defined(COMPILE_SV23_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_45>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV23_Extract_GetSStream_44;
    SStreamV3ExtractorType_SV23_Extract_GetSStream_44 * CreateExtractor_SV23_Extract_GetSStream_44(unique_ptr<SStreamV3ExtractorType_SV23_Extract_GetSStream_44> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV23_Extract_GetSStream_44(44, "", true/*100*/, UID_GetSStream_44));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV23_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV23_Extract_GetSStream_44> extractor_0_ptr;
        SStreamV3ExtractorType_SV23_Extract_GetSStream_44 * extractor_0 = CreateExtractor_SV23_Extract_GetSStream_44(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_45;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_45> sorter_Process_45_ptr (new SorterType_Process_45(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_45));
        SorterType_Process_45 * sorter_Process_45 = sorter_Process_45_ptr.get();
        ULONG sorter_Process_45_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_45, BinaryOutputPolicy<typename SorterType_Process_45::Schema>, BinaryOutputStream, false> OutputerType1_SV23_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV23_Extract> outputer_SV23_Extract_out0_ptr(new OutputerType1_SV23_Extract(sorter_Process_45, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV23_Extract_out0));
        OutputerType1_SV23_Extract * outputer_SV23_Extract_out0 = outputer_SV23_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV23_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_45::Schema row;
            outputer_SV23_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV23_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV23_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV23_Extract
#pragma region SV24_Extract
#if defined(COMPILE_SV24_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_47>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV24_Extract_GetSStream_46;
    SStreamV3ExtractorType_SV24_Extract_GetSStream_46 * CreateExtractor_SV24_Extract_GetSStream_46(unique_ptr<SStreamV3ExtractorType_SV24_Extract_GetSStream_46> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV24_Extract_GetSStream_46(46, "", true/*100*/, UID_GetSStream_46));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV24_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV24_Extract_GetSStream_46> extractor_0_ptr;
        SStreamV3ExtractorType_SV24_Extract_GetSStream_46 * extractor_0 = CreateExtractor_SV24_Extract_GetSStream_46(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_47;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_47> sorter_Process_47_ptr (new SorterType_Process_47(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_47));
        SorterType_Process_47 * sorter_Process_47 = sorter_Process_47_ptr.get();
        ULONG sorter_Process_47_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_47, BinaryOutputPolicy<typename SorterType_Process_47::Schema>, BinaryOutputStream, false> OutputerType1_SV24_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV24_Extract> outputer_SV24_Extract_out0_ptr(new OutputerType1_SV24_Extract(sorter_Process_47, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV24_Extract_out0));
        OutputerType1_SV24_Extract * outputer_SV24_Extract_out0 = outputer_SV24_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV24_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_47::Schema row;
            outputer_SV24_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV24_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV24_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV24_Extract
#pragma region SV25_Extract
#if defined(COMPILE_SV25_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_49>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV25_Extract_GetSStream_48;
    SStreamV3ExtractorType_SV25_Extract_GetSStream_48 * CreateExtractor_SV25_Extract_GetSStream_48(unique_ptr<SStreamV3ExtractorType_SV25_Extract_GetSStream_48> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV25_Extract_GetSStream_48(48, "", true/*100*/, UID_GetSStream_48));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV25_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV25_Extract_GetSStream_48> extractor_0_ptr;
        SStreamV3ExtractorType_SV25_Extract_GetSStream_48 * extractor_0 = CreateExtractor_SV25_Extract_GetSStream_48(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_49;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_49> sorter_Process_49_ptr (new SorterType_Process_49(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_49));
        SorterType_Process_49 * sorter_Process_49 = sorter_Process_49_ptr.get();
        ULONG sorter_Process_49_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_49, BinaryOutputPolicy<typename SorterType_Process_49::Schema>, BinaryOutputStream, false> OutputerType1_SV25_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV25_Extract> outputer_SV25_Extract_out0_ptr(new OutputerType1_SV25_Extract(sorter_Process_49, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV25_Extract_out0));
        OutputerType1_SV25_Extract * outputer_SV25_Extract_out0 = outputer_SV25_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV25_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_49::Schema row;
            outputer_SV25_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV25_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV25_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV25_Extract
#pragma region SV26_Extract
#if defined(COMPILE_SV26_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_51>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV26_Extract_GetSStream_50;
    SStreamV3ExtractorType_SV26_Extract_GetSStream_50 * CreateExtractor_SV26_Extract_GetSStream_50(unique_ptr<SStreamV3ExtractorType_SV26_Extract_GetSStream_50> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV26_Extract_GetSStream_50(50, "", true/*100*/, UID_GetSStream_50));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV26_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV26_Extract_GetSStream_50> extractor_0_ptr;
        SStreamV3ExtractorType_SV26_Extract_GetSStream_50 * extractor_0 = CreateExtractor_SV26_Extract_GetSStream_50(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_51;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_51> sorter_Process_51_ptr (new SorterType_Process_51(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_51));
        SorterType_Process_51 * sorter_Process_51 = sorter_Process_51_ptr.get();
        ULONG sorter_Process_51_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_51, BinaryOutputPolicy<typename SorterType_Process_51::Schema>, BinaryOutputStream, false> OutputerType1_SV26_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV26_Extract> outputer_SV26_Extract_out0_ptr(new OutputerType1_SV26_Extract(sorter_Process_51, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV26_Extract_out0));
        OutputerType1_SV26_Extract * outputer_SV26_Extract_out0 = outputer_SV26_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV26_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_51::Schema row;
            outputer_SV26_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV26_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV26_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV26_Extract
#pragma region SV27_Extract
#if defined(COMPILE_SV27_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_53>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV27_Extract_GetSStream_52;
    SStreamV3ExtractorType_SV27_Extract_GetSStream_52 * CreateExtractor_SV27_Extract_GetSStream_52(unique_ptr<SStreamV3ExtractorType_SV27_Extract_GetSStream_52> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV27_Extract_GetSStream_52(52, "", true/*100*/, UID_GetSStream_52));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV27_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV27_Extract_GetSStream_52> extractor_0_ptr;
        SStreamV3ExtractorType_SV27_Extract_GetSStream_52 * extractor_0 = CreateExtractor_SV27_Extract_GetSStream_52(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_53;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_53> sorter_Process_53_ptr (new SorterType_Process_53(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_53));
        SorterType_Process_53 * sorter_Process_53 = sorter_Process_53_ptr.get();
        ULONG sorter_Process_53_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_53, BinaryOutputPolicy<typename SorterType_Process_53::Schema>, BinaryOutputStream, false> OutputerType1_SV27_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV27_Extract> outputer_SV27_Extract_out0_ptr(new OutputerType1_SV27_Extract(sorter_Process_53, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV27_Extract_out0));
        OutputerType1_SV27_Extract * outputer_SV27_Extract_out0 = outputer_SV27_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV27_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_53::Schema row;
            outputer_SV27_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV27_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV27_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV27_Extract
#pragma region SV28_Extract
#if defined(COMPILE_SV28_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_55>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV28_Extract_GetSStream_54;
    SStreamV3ExtractorType_SV28_Extract_GetSStream_54 * CreateExtractor_SV28_Extract_GetSStream_54(unique_ptr<SStreamV3ExtractorType_SV28_Extract_GetSStream_54> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV28_Extract_GetSStream_54(54, "", true/*100*/, UID_GetSStream_54));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV28_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV28_Extract_GetSStream_54> extractor_0_ptr;
        SStreamV3ExtractorType_SV28_Extract_GetSStream_54 * extractor_0 = CreateExtractor_SV28_Extract_GetSStream_54(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_55;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_55> sorter_Process_55_ptr (new SorterType_Process_55(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_55));
        SorterType_Process_55 * sorter_Process_55 = sorter_Process_55_ptr.get();
        ULONG sorter_Process_55_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_55, BinaryOutputPolicy<typename SorterType_Process_55::Schema>, BinaryOutputStream, false> OutputerType1_SV28_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV28_Extract> outputer_SV28_Extract_out0_ptr(new OutputerType1_SV28_Extract(sorter_Process_55, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV28_Extract_out0));
        OutputerType1_SV28_Extract * outputer_SV28_Extract_out0 = outputer_SV28_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV28_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_55::Schema row;
            outputer_SV28_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV28_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV28_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV28_Extract
#pragma region SV29_Extract
#if defined(COMPILE_SV29_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_57>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV29_Extract_GetSStream_56;
    SStreamV3ExtractorType_SV29_Extract_GetSStream_56 * CreateExtractor_SV29_Extract_GetSStream_56(unique_ptr<SStreamV3ExtractorType_SV29_Extract_GetSStream_56> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV29_Extract_GetSStream_56(56, "", true/*100*/, UID_GetSStream_56));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV29_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV29_Extract_GetSStream_56> extractor_0_ptr;
        SStreamV3ExtractorType_SV29_Extract_GetSStream_56 * extractor_0 = CreateExtractor_SV29_Extract_GetSStream_56(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_57;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_57> sorter_Process_57_ptr (new SorterType_Process_57(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_57));
        SorterType_Process_57 * sorter_Process_57 = sorter_Process_57_ptr.get();
        ULONG sorter_Process_57_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_57, BinaryOutputPolicy<typename SorterType_Process_57::Schema>, BinaryOutputStream, false> OutputerType1_SV29_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV29_Extract> outputer_SV29_Extract_out0_ptr(new OutputerType1_SV29_Extract(sorter_Process_57, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV29_Extract_out0));
        OutputerType1_SV29_Extract * outputer_SV29_Extract_out0 = outputer_SV29_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV29_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_57::Schema row;
            outputer_SV29_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV29_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV29_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV29_Extract
#pragma region SV30_Extract
#if defined(COMPILE_SV30_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_59>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV30_Extract_GetSStream_58;
    SStreamV3ExtractorType_SV30_Extract_GetSStream_58 * CreateExtractor_SV30_Extract_GetSStream_58(unique_ptr<SStreamV3ExtractorType_SV30_Extract_GetSStream_58> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV30_Extract_GetSStream_58(58, "", true/*100*/, UID_GetSStream_58));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV30_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV30_Extract_GetSStream_58> extractor_0_ptr;
        SStreamV3ExtractorType_SV30_Extract_GetSStream_58 * extractor_0 = CreateExtractor_SV30_Extract_GetSStream_58(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_59;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_59> sorter_Process_59_ptr (new SorterType_Process_59(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_59));
        SorterType_Process_59 * sorter_Process_59 = sorter_Process_59_ptr.get();
        ULONG sorter_Process_59_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_59, BinaryOutputPolicy<typename SorterType_Process_59::Schema>, BinaryOutputStream, false> OutputerType1_SV30_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV30_Extract> outputer_SV30_Extract_out0_ptr(new OutputerType1_SV30_Extract(sorter_Process_59, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV30_Extract_out0));
        OutputerType1_SV30_Extract * outputer_SV30_Extract_out0 = outputer_SV30_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV30_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_59::Schema row;
            outputer_SV30_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV30_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV30_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV30_Extract
#pragma region SV31_Extract
#if defined(COMPILE_SV31_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_61>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV31_Extract_GetSStream_60;
    SStreamV3ExtractorType_SV31_Extract_GetSStream_60 * CreateExtractor_SV31_Extract_GetSStream_60(unique_ptr<SStreamV3ExtractorType_SV31_Extract_GetSStream_60> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV31_Extract_GetSStream_60(60, "", true/*100*/, UID_GetSStream_60));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV31_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV31_Extract_GetSStream_60> extractor_0_ptr;
        SStreamV3ExtractorType_SV31_Extract_GetSStream_60 * extractor_0 = CreateExtractor_SV31_Extract_GetSStream_60(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_61;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_61> sorter_Process_61_ptr (new SorterType_Process_61(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_61));
        SorterType_Process_61 * sorter_Process_61 = sorter_Process_61_ptr.get();
        ULONG sorter_Process_61_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_61, BinaryOutputPolicy<typename SorterType_Process_61::Schema>, BinaryOutputStream, false> OutputerType1_SV31_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV31_Extract> outputer_SV31_Extract_out0_ptr(new OutputerType1_SV31_Extract(sorter_Process_61, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV31_Extract_out0));
        OutputerType1_SV31_Extract * outputer_SV31_Extract_out0 = outputer_SV31_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV31_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_61::Schema row;
            outputer_SV31_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV31_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV31_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV31_Extract
#pragma region SV32_Extract
#if defined(COMPILE_SV32_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_63>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV32_Extract_GetSStream_62;
    SStreamV3ExtractorType_SV32_Extract_GetSStream_62 * CreateExtractor_SV32_Extract_GetSStream_62(unique_ptr<SStreamV3ExtractorType_SV32_Extract_GetSStream_62> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV32_Extract_GetSStream_62(62, "", true/*100*/, UID_GetSStream_62));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV32_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV32_Extract_GetSStream_62> extractor_0_ptr;
        SStreamV3ExtractorType_SV32_Extract_GetSStream_62 * extractor_0 = CreateExtractor_SV32_Extract_GetSStream_62(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_63;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_63> sorter_Process_63_ptr (new SorterType_Process_63(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_63));
        SorterType_Process_63 * sorter_Process_63 = sorter_Process_63_ptr.get();
        ULONG sorter_Process_63_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_63, BinaryOutputPolicy<typename SorterType_Process_63::Schema>, BinaryOutputStream, false> OutputerType1_SV32_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV32_Extract> outputer_SV32_Extract_out0_ptr(new OutputerType1_SV32_Extract(sorter_Process_63, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV32_Extract_out0));
        OutputerType1_SV32_Extract * outputer_SV32_Extract_out0 = outputer_SV32_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV32_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_63::Schema row;
            outputer_SV32_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV32_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV32_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV32_Extract
#pragma region SV33_Extract
#if defined(COMPILE_SV33_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_65>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV33_Extract_GetSStream_64;
    SStreamV3ExtractorType_SV33_Extract_GetSStream_64 * CreateExtractor_SV33_Extract_GetSStream_64(unique_ptr<SStreamV3ExtractorType_SV33_Extract_GetSStream_64> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV33_Extract_GetSStream_64(64, "", true/*100*/, UID_GetSStream_64));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV33_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV33_Extract_GetSStream_64> extractor_0_ptr;
        SStreamV3ExtractorType_SV33_Extract_GetSStream_64 * extractor_0 = CreateExtractor_SV33_Extract_GetSStream_64(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_65;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_65> sorter_Process_65_ptr (new SorterType_Process_65(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_65));
        SorterType_Process_65 * sorter_Process_65 = sorter_Process_65_ptr.get();
        ULONG sorter_Process_65_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_65, BinaryOutputPolicy<typename SorterType_Process_65::Schema>, BinaryOutputStream, false> OutputerType1_SV33_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV33_Extract> outputer_SV33_Extract_out0_ptr(new OutputerType1_SV33_Extract(sorter_Process_65, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV33_Extract_out0));
        OutputerType1_SV33_Extract * outputer_SV33_Extract_out0 = outputer_SV33_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV33_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_65::Schema row;
            outputer_SV33_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV33_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV33_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV33_Extract
#pragma region SV34_Extract
#if defined(COMPILE_SV34_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_67>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV34_Extract_GetSStream_66;
    SStreamV3ExtractorType_SV34_Extract_GetSStream_66 * CreateExtractor_SV34_Extract_GetSStream_66(unique_ptr<SStreamV3ExtractorType_SV34_Extract_GetSStream_66> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV34_Extract_GetSStream_66(66, "", true/*100*/, UID_GetSStream_66));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV34_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV34_Extract_GetSStream_66> extractor_0_ptr;
        SStreamV3ExtractorType_SV34_Extract_GetSStream_66 * extractor_0 = CreateExtractor_SV34_Extract_GetSStream_66(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_67;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_67> sorter_Process_67_ptr (new SorterType_Process_67(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_67));
        SorterType_Process_67 * sorter_Process_67 = sorter_Process_67_ptr.get();
        ULONG sorter_Process_67_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_67, BinaryOutputPolicy<typename SorterType_Process_67::Schema>, BinaryOutputStream, false> OutputerType1_SV34_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV34_Extract> outputer_SV34_Extract_out0_ptr(new OutputerType1_SV34_Extract(sorter_Process_67, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV34_Extract_out0));
        OutputerType1_SV34_Extract * outputer_SV34_Extract_out0 = outputer_SV34_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV34_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_67::Schema row;
            outputer_SV34_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV34_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV34_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV34_Extract
#pragma region SV35_Extract
#if defined(COMPILE_SV35_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_69>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV35_Extract_GetSStream_68;
    SStreamV3ExtractorType_SV35_Extract_GetSStream_68 * CreateExtractor_SV35_Extract_GetSStream_68(unique_ptr<SStreamV3ExtractorType_SV35_Extract_GetSStream_68> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV35_Extract_GetSStream_68(68, "", true/*100*/, UID_GetSStream_68));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV35_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV35_Extract_GetSStream_68> extractor_0_ptr;
        SStreamV3ExtractorType_SV35_Extract_GetSStream_68 * extractor_0 = CreateExtractor_SV35_Extract_GetSStream_68(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_69;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_69> sorter_Process_69_ptr (new SorterType_Process_69(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_69));
        SorterType_Process_69 * sorter_Process_69 = sorter_Process_69_ptr.get();
        ULONG sorter_Process_69_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_69, BinaryOutputPolicy<typename SorterType_Process_69::Schema>, BinaryOutputStream, false> OutputerType1_SV35_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV35_Extract> outputer_SV35_Extract_out0_ptr(new OutputerType1_SV35_Extract(sorter_Process_69, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV35_Extract_out0));
        OutputerType1_SV35_Extract * outputer_SV35_Extract_out0 = outputer_SV35_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV35_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_69::Schema row;
            outputer_SV35_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV35_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV35_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV35_Extract
#pragma region SV36_Extract
#if defined(COMPILE_SV36_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_71>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV36_Extract_GetSStream_70;
    SStreamV3ExtractorType_SV36_Extract_GetSStream_70 * CreateExtractor_SV36_Extract_GetSStream_70(unique_ptr<SStreamV3ExtractorType_SV36_Extract_GetSStream_70> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV36_Extract_GetSStream_70(70, "", true/*100*/, UID_GetSStream_70));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV36_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV36_Extract_GetSStream_70> extractor_0_ptr;
        SStreamV3ExtractorType_SV36_Extract_GetSStream_70 * extractor_0 = CreateExtractor_SV36_Extract_GetSStream_70(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_71;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_71> sorter_Process_71_ptr (new SorterType_Process_71(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_71));
        SorterType_Process_71 * sorter_Process_71 = sorter_Process_71_ptr.get();
        ULONG sorter_Process_71_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_71, BinaryOutputPolicy<typename SorterType_Process_71::Schema>, BinaryOutputStream, false> OutputerType1_SV36_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV36_Extract> outputer_SV36_Extract_out0_ptr(new OutputerType1_SV36_Extract(sorter_Process_71, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV36_Extract_out0));
        OutputerType1_SV36_Extract * outputer_SV36_Extract_out0 = outputer_SV36_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV36_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_71::Schema row;
            outputer_SV36_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV36_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV36_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV36_Extract
#pragma region SV37_Extract
#if defined(COMPILE_SV37_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_73>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV37_Extract_GetSStream_72;
    SStreamV3ExtractorType_SV37_Extract_GetSStream_72 * CreateExtractor_SV37_Extract_GetSStream_72(unique_ptr<SStreamV3ExtractorType_SV37_Extract_GetSStream_72> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV37_Extract_GetSStream_72(72, "", true/*100*/, UID_GetSStream_72));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV37_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV37_Extract_GetSStream_72> extractor_0_ptr;
        SStreamV3ExtractorType_SV37_Extract_GetSStream_72 * extractor_0 = CreateExtractor_SV37_Extract_GetSStream_72(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_73;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_73> sorter_Process_73_ptr (new SorterType_Process_73(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_73));
        SorterType_Process_73 * sorter_Process_73 = sorter_Process_73_ptr.get();
        ULONG sorter_Process_73_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_73, BinaryOutputPolicy<typename SorterType_Process_73::Schema>, BinaryOutputStream, false> OutputerType1_SV37_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV37_Extract> outputer_SV37_Extract_out0_ptr(new OutputerType1_SV37_Extract(sorter_Process_73, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV37_Extract_out0));
        OutputerType1_SV37_Extract * outputer_SV37_Extract_out0 = outputer_SV37_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV37_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_73::Schema row;
            outputer_SV37_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV37_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV37_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV37_Extract
#pragma region SV38_Extract
#if defined(COMPILE_SV38_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_75>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV38_Extract_GetSStream_74;
    SStreamV3ExtractorType_SV38_Extract_GetSStream_74 * CreateExtractor_SV38_Extract_GetSStream_74(unique_ptr<SStreamV3ExtractorType_SV38_Extract_GetSStream_74> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV38_Extract_GetSStream_74(74, "", true/*100*/, UID_GetSStream_74));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV38_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV38_Extract_GetSStream_74> extractor_0_ptr;
        SStreamV3ExtractorType_SV38_Extract_GetSStream_74 * extractor_0 = CreateExtractor_SV38_Extract_GetSStream_74(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_75;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_75> sorter_Process_75_ptr (new SorterType_Process_75(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_75));
        SorterType_Process_75 * sorter_Process_75 = sorter_Process_75_ptr.get();
        ULONG sorter_Process_75_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_75, BinaryOutputPolicy<typename SorterType_Process_75::Schema>, BinaryOutputStream, false> OutputerType1_SV38_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV38_Extract> outputer_SV38_Extract_out0_ptr(new OutputerType1_SV38_Extract(sorter_Process_75, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV38_Extract_out0));
        OutputerType1_SV38_Extract * outputer_SV38_Extract_out0 = outputer_SV38_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV38_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_75::Schema row;
            outputer_SV38_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV38_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV38_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV38_Extract
#pragma region SV39_Extract
#if defined(COMPILE_SV39_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_77>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV39_Extract_GetSStream_76;
    SStreamV3ExtractorType_SV39_Extract_GetSStream_76 * CreateExtractor_SV39_Extract_GetSStream_76(unique_ptr<SStreamV3ExtractorType_SV39_Extract_GetSStream_76> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV39_Extract_GetSStream_76(76, "", true/*100*/, UID_GetSStream_76));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV39_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV39_Extract_GetSStream_76> extractor_0_ptr;
        SStreamV3ExtractorType_SV39_Extract_GetSStream_76 * extractor_0 = CreateExtractor_SV39_Extract_GetSStream_76(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_77;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_77> sorter_Process_77_ptr (new SorterType_Process_77(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_77));
        SorterType_Process_77 * sorter_Process_77 = sorter_Process_77_ptr.get();
        ULONG sorter_Process_77_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_77, BinaryOutputPolicy<typename SorterType_Process_77::Schema>, BinaryOutputStream, false> OutputerType1_SV39_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV39_Extract> outputer_SV39_Extract_out0_ptr(new OutputerType1_SV39_Extract(sorter_Process_77, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV39_Extract_out0));
        OutputerType1_SV39_Extract * outputer_SV39_Extract_out0 = outputer_SV39_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV39_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_77::Schema row;
            outputer_SV39_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV39_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV39_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV39_Extract
#pragma region SV40_Extract
#if defined(COMPILE_SV40_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_79>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV40_Extract_GetSStream_78;
    SStreamV3ExtractorType_SV40_Extract_GetSStream_78 * CreateExtractor_SV40_Extract_GetSStream_78(unique_ptr<SStreamV3ExtractorType_SV40_Extract_GetSStream_78> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV40_Extract_GetSStream_78(78, "", true/*100*/, UID_GetSStream_78));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV40_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV40_Extract_GetSStream_78> extractor_0_ptr;
        SStreamV3ExtractorType_SV40_Extract_GetSStream_78 * extractor_0 = CreateExtractor_SV40_Extract_GetSStream_78(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_79;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_79> sorter_Process_79_ptr (new SorterType_Process_79(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_79));
        SorterType_Process_79 * sorter_Process_79 = sorter_Process_79_ptr.get();
        ULONG sorter_Process_79_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_79, BinaryOutputPolicy<typename SorterType_Process_79::Schema>, BinaryOutputStream, false> OutputerType1_SV40_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV40_Extract> outputer_SV40_Extract_out0_ptr(new OutputerType1_SV40_Extract(sorter_Process_79, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV40_Extract_out0));
        OutputerType1_SV40_Extract * outputer_SV40_Extract_out0 = outputer_SV40_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV40_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_79::Schema row;
            outputer_SV40_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV40_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV40_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV40_Extract
#pragma region SV41_Extract
#if defined(COMPILE_SV41_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_81>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV41_Extract_GetSStream_80;
    SStreamV3ExtractorType_SV41_Extract_GetSStream_80 * CreateExtractor_SV41_Extract_GetSStream_80(unique_ptr<SStreamV3ExtractorType_SV41_Extract_GetSStream_80> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV41_Extract_GetSStream_80(80, "", true/*100*/, UID_GetSStream_80));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV41_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV41_Extract_GetSStream_80> extractor_0_ptr;
        SStreamV3ExtractorType_SV41_Extract_GetSStream_80 * extractor_0 = CreateExtractor_SV41_Extract_GetSStream_80(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_81;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_81> sorter_Process_81_ptr (new SorterType_Process_81(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_81));
        SorterType_Process_81 * sorter_Process_81 = sorter_Process_81_ptr.get();
        ULONG sorter_Process_81_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_81, BinaryOutputPolicy<typename SorterType_Process_81::Schema>, BinaryOutputStream, false> OutputerType1_SV41_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV41_Extract> outputer_SV41_Extract_out0_ptr(new OutputerType1_SV41_Extract(sorter_Process_81, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV41_Extract_out0));
        OutputerType1_SV41_Extract * outputer_SV41_Extract_out0 = outputer_SV41_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV41_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_81::Schema row;
            outputer_SV41_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV41_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV41_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV41_Extract
#pragma region SV42_Extract
#if defined(COMPILE_SV42_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_83>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV42_Extract_GetSStream_82;
    SStreamV3ExtractorType_SV42_Extract_GetSStream_82 * CreateExtractor_SV42_Extract_GetSStream_82(unique_ptr<SStreamV3ExtractorType_SV42_Extract_GetSStream_82> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV42_Extract_GetSStream_82(82, "", true/*100*/, UID_GetSStream_82));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV42_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV42_Extract_GetSStream_82> extractor_0_ptr;
        SStreamV3ExtractorType_SV42_Extract_GetSStream_82 * extractor_0 = CreateExtractor_SV42_Extract_GetSStream_82(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_83;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_83> sorter_Process_83_ptr (new SorterType_Process_83(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_83));
        SorterType_Process_83 * sorter_Process_83 = sorter_Process_83_ptr.get();
        ULONG sorter_Process_83_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_83, BinaryOutputPolicy<typename SorterType_Process_83::Schema>, BinaryOutputStream, false> OutputerType1_SV42_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV42_Extract> outputer_SV42_Extract_out0_ptr(new OutputerType1_SV42_Extract(sorter_Process_83, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV42_Extract_out0));
        OutputerType1_SV42_Extract * outputer_SV42_Extract_out0 = outputer_SV42_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV42_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_83::Schema row;
            outputer_SV42_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV42_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV42_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV42_Extract
#pragma region SV43_Extract
#if defined(COMPILE_SV43_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_85>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV43_Extract_GetSStream_84;
    SStreamV3ExtractorType_SV43_Extract_GetSStream_84 * CreateExtractor_SV43_Extract_GetSStream_84(unique_ptr<SStreamV3ExtractorType_SV43_Extract_GetSStream_84> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV43_Extract_GetSStream_84(84, "", true/*100*/, UID_GetSStream_84));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV43_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV43_Extract_GetSStream_84> extractor_0_ptr;
        SStreamV3ExtractorType_SV43_Extract_GetSStream_84 * extractor_0 = CreateExtractor_SV43_Extract_GetSStream_84(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_85;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_85> sorter_Process_85_ptr (new SorterType_Process_85(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_85));
        SorterType_Process_85 * sorter_Process_85 = sorter_Process_85_ptr.get();
        ULONG sorter_Process_85_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_85, BinaryOutputPolicy<typename SorterType_Process_85::Schema>, BinaryOutputStream, false> OutputerType1_SV43_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV43_Extract> outputer_SV43_Extract_out0_ptr(new OutputerType1_SV43_Extract(sorter_Process_85, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV43_Extract_out0));
        OutputerType1_SV43_Extract * outputer_SV43_Extract_out0 = outputer_SV43_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV43_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_85::Schema row;
            outputer_SV43_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV43_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV43_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV43_Extract
#pragma region SV44_Extract
#if defined(COMPILE_SV44_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_87>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV44_Extract_GetSStream_86;
    SStreamV3ExtractorType_SV44_Extract_GetSStream_86 * CreateExtractor_SV44_Extract_GetSStream_86(unique_ptr<SStreamV3ExtractorType_SV44_Extract_GetSStream_86> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV44_Extract_GetSStream_86(86, "", true/*100*/, UID_GetSStream_86));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV44_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV44_Extract_GetSStream_86> extractor_0_ptr;
        SStreamV3ExtractorType_SV44_Extract_GetSStream_86 * extractor_0 = CreateExtractor_SV44_Extract_GetSStream_86(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_87;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_87> sorter_Process_87_ptr (new SorterType_Process_87(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_87));
        SorterType_Process_87 * sorter_Process_87 = sorter_Process_87_ptr.get();
        ULONG sorter_Process_87_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_87, BinaryOutputPolicy<typename SorterType_Process_87::Schema>, BinaryOutputStream, false> OutputerType1_SV44_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV44_Extract> outputer_SV44_Extract_out0_ptr(new OutputerType1_SV44_Extract(sorter_Process_87, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV44_Extract_out0));
        OutputerType1_SV44_Extract * outputer_SV44_Extract_out0 = outputer_SV44_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV44_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_87::Schema row;
            outputer_SV44_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV44_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV44_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV44_Extract
#pragma region SV45_Extract
#if defined(COMPILE_SV45_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_89>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV45_Extract_GetSStream_88;
    SStreamV3ExtractorType_SV45_Extract_GetSStream_88 * CreateExtractor_SV45_Extract_GetSStream_88(unique_ptr<SStreamV3ExtractorType_SV45_Extract_GetSStream_88> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV45_Extract_GetSStream_88(88, "", true/*100*/, UID_GetSStream_88));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV45_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV45_Extract_GetSStream_88> extractor_0_ptr;
        SStreamV3ExtractorType_SV45_Extract_GetSStream_88 * extractor_0 = CreateExtractor_SV45_Extract_GetSStream_88(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_89;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_89> sorter_Process_89_ptr (new SorterType_Process_89(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_89));
        SorterType_Process_89 * sorter_Process_89 = sorter_Process_89_ptr.get();
        ULONG sorter_Process_89_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_89, BinaryOutputPolicy<typename SorterType_Process_89::Schema>, BinaryOutputStream, false> OutputerType1_SV45_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV45_Extract> outputer_SV45_Extract_out0_ptr(new OutputerType1_SV45_Extract(sorter_Process_89, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV45_Extract_out0));
        OutputerType1_SV45_Extract * outputer_SV45_Extract_out0 = outputer_SV45_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV45_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_89::Schema row;
            outputer_SV45_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV45_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV45_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV45_Extract
#pragma region SV46_Extract
#if defined(COMPILE_SV46_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_91>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV46_Extract_GetSStream_90;
    SStreamV3ExtractorType_SV46_Extract_GetSStream_90 * CreateExtractor_SV46_Extract_GetSStream_90(unique_ptr<SStreamV3ExtractorType_SV46_Extract_GetSStream_90> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV46_Extract_GetSStream_90(90, "", true/*100*/, UID_GetSStream_90));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV46_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV46_Extract_GetSStream_90> extractor_0_ptr;
        SStreamV3ExtractorType_SV46_Extract_GetSStream_90 * extractor_0 = CreateExtractor_SV46_Extract_GetSStream_90(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_91;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_91> sorter_Process_91_ptr (new SorterType_Process_91(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_91));
        SorterType_Process_91 * sorter_Process_91 = sorter_Process_91_ptr.get();
        ULONG sorter_Process_91_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_91, BinaryOutputPolicy<typename SorterType_Process_91::Schema>, BinaryOutputStream, false> OutputerType1_SV46_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV46_Extract> outputer_SV46_Extract_out0_ptr(new OutputerType1_SV46_Extract(sorter_Process_91, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV46_Extract_out0));
        OutputerType1_SV46_Extract * outputer_SV46_Extract_out0 = outputer_SV46_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV46_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_91::Schema row;
            outputer_SV46_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV46_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV46_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV46_Extract
#pragma region SV47_Extract
#if defined(COMPILE_SV47_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_93>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV47_Extract_GetSStream_92;
    SStreamV3ExtractorType_SV47_Extract_GetSStream_92 * CreateExtractor_SV47_Extract_GetSStream_92(unique_ptr<SStreamV3ExtractorType_SV47_Extract_GetSStream_92> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV47_Extract_GetSStream_92(92, "", true/*100*/, UID_GetSStream_92));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV47_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV47_Extract_GetSStream_92> extractor_0_ptr;
        SStreamV3ExtractorType_SV47_Extract_GetSStream_92 * extractor_0 = CreateExtractor_SV47_Extract_GetSStream_92(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_93;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_93> sorter_Process_93_ptr (new SorterType_Process_93(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_93));
        SorterType_Process_93 * sorter_Process_93 = sorter_Process_93_ptr.get();
        ULONG sorter_Process_93_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_93, BinaryOutputPolicy<typename SorterType_Process_93::Schema>, BinaryOutputStream, false> OutputerType1_SV47_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV47_Extract> outputer_SV47_Extract_out0_ptr(new OutputerType1_SV47_Extract(sorter_Process_93, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV47_Extract_out0));
        OutputerType1_SV47_Extract * outputer_SV47_Extract_out0 = outputer_SV47_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV47_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_93::Schema row;
            outputer_SV47_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV47_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV47_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV47_Extract
#pragma region SV48_Extract
#if defined(COMPILE_SV48_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_95>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV48_Extract_GetSStream_94;
    SStreamV3ExtractorType_SV48_Extract_GetSStream_94 * CreateExtractor_SV48_Extract_GetSStream_94(unique_ptr<SStreamV3ExtractorType_SV48_Extract_GetSStream_94> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV48_Extract_GetSStream_94(94, "", true/*100*/, UID_GetSStream_94));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV48_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV48_Extract_GetSStream_94> extractor_0_ptr;
        SStreamV3ExtractorType_SV48_Extract_GetSStream_94 * extractor_0 = CreateExtractor_SV48_Extract_GetSStream_94(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_95;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_95> sorter_Process_95_ptr (new SorterType_Process_95(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_95));
        SorterType_Process_95 * sorter_Process_95 = sorter_Process_95_ptr.get();
        ULONG sorter_Process_95_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_95, BinaryOutputPolicy<typename SorterType_Process_95::Schema>, BinaryOutputStream, false> OutputerType1_SV48_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV48_Extract> outputer_SV48_Extract_out0_ptr(new OutputerType1_SV48_Extract(sorter_Process_95, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV48_Extract_out0));
        OutputerType1_SV48_Extract * outputer_SV48_Extract_out0 = outputer_SV48_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV48_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_95::Schema row;
            outputer_SV48_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV48_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV48_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV48_Extract
#pragma region SV49_Extract
#if defined(COMPILE_SV49_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_97>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV49_Extract_GetSStream_96;
    SStreamV3ExtractorType_SV49_Extract_GetSStream_96 * CreateExtractor_SV49_Extract_GetSStream_96(unique_ptr<SStreamV3ExtractorType_SV49_Extract_GetSStream_96> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV49_Extract_GetSStream_96(96, "", true/*100*/, UID_GetSStream_96));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV49_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV49_Extract_GetSStream_96> extractor_0_ptr;
        SStreamV3ExtractorType_SV49_Extract_GetSStream_96 * extractor_0 = CreateExtractor_SV49_Extract_GetSStream_96(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_97;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_97> sorter_Process_97_ptr (new SorterType_Process_97(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_97));
        SorterType_Process_97 * sorter_Process_97 = sorter_Process_97_ptr.get();
        ULONG sorter_Process_97_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_97, BinaryOutputPolicy<typename SorterType_Process_97::Schema>, BinaryOutputStream, false> OutputerType1_SV49_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV49_Extract> outputer_SV49_Extract_out0_ptr(new OutputerType1_SV49_Extract(sorter_Process_97, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV49_Extract_out0));
        OutputerType1_SV49_Extract * outputer_SV49_Extract_out0 = outputer_SV49_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV49_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_97::Schema row;
            outputer_SV49_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV49_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV49_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV49_Extract
#pragma region SV50_Extract
#if defined(COMPILE_SV50_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_99>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV50_Extract_GetSStream_98;
    SStreamV3ExtractorType_SV50_Extract_GetSStream_98 * CreateExtractor_SV50_Extract_GetSStream_98(unique_ptr<SStreamV3ExtractorType_SV50_Extract_GetSStream_98> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV50_Extract_GetSStream_98(98, "", true/*100*/, UID_GetSStream_98));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV50_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV50_Extract_GetSStream_98> extractor_0_ptr;
        SStreamV3ExtractorType_SV50_Extract_GetSStream_98 * extractor_0 = CreateExtractor_SV50_Extract_GetSStream_98(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_99;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_99> sorter_Process_99_ptr (new SorterType_Process_99(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_99));
        SorterType_Process_99 * sorter_Process_99 = sorter_Process_99_ptr.get();
        ULONG sorter_Process_99_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_99, BinaryOutputPolicy<typename SorterType_Process_99::Schema>, BinaryOutputStream, false> OutputerType1_SV50_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV50_Extract> outputer_SV50_Extract_out0_ptr(new OutputerType1_SV50_Extract(sorter_Process_99, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV50_Extract_out0));
        OutputerType1_SV50_Extract * outputer_SV50_Extract_out0 = outputer_SV50_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV50_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_99::Schema row;
            outputer_SV50_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV50_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV50_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV50_Extract
#pragma region SV51_Extract
#if defined(COMPILE_SV51_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_101>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV51_Extract_GetSStream_100;
    SStreamV3ExtractorType_SV51_Extract_GetSStream_100 * CreateExtractor_SV51_Extract_GetSStream_100(unique_ptr<SStreamV3ExtractorType_SV51_Extract_GetSStream_100> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV51_Extract_GetSStream_100(100, "", true/*100*/, UID_GetSStream_100));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV51_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV51_Extract_GetSStream_100> extractor_0_ptr;
        SStreamV3ExtractorType_SV51_Extract_GetSStream_100 * extractor_0 = CreateExtractor_SV51_Extract_GetSStream_100(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_101;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_101> sorter_Process_101_ptr (new SorterType_Process_101(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_101));
        SorterType_Process_101 * sorter_Process_101 = sorter_Process_101_ptr.get();
        ULONG sorter_Process_101_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_101, BinaryOutputPolicy<typename SorterType_Process_101::Schema>, BinaryOutputStream, false> OutputerType1_SV51_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV51_Extract> outputer_SV51_Extract_out0_ptr(new OutputerType1_SV51_Extract(sorter_Process_101, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV51_Extract_out0));
        OutputerType1_SV51_Extract * outputer_SV51_Extract_out0 = outputer_SV51_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV51_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_101::Schema row;
            outputer_SV51_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV51_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV51_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV51_Extract
#pragma region SV52_Extract
#if defined(COMPILE_SV52_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_103>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV52_Extract_GetSStream_102;
    SStreamV3ExtractorType_SV52_Extract_GetSStream_102 * CreateExtractor_SV52_Extract_GetSStream_102(unique_ptr<SStreamV3ExtractorType_SV52_Extract_GetSStream_102> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV52_Extract_GetSStream_102(102, "", true/*100*/, UID_GetSStream_102));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV52_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV52_Extract_GetSStream_102> extractor_0_ptr;
        SStreamV3ExtractorType_SV52_Extract_GetSStream_102 * extractor_0 = CreateExtractor_SV52_Extract_GetSStream_102(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_103;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_103> sorter_Process_103_ptr (new SorterType_Process_103(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_103));
        SorterType_Process_103 * sorter_Process_103 = sorter_Process_103_ptr.get();
        ULONG sorter_Process_103_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_103, BinaryOutputPolicy<typename SorterType_Process_103::Schema>, BinaryOutputStream, false> OutputerType1_SV52_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV52_Extract> outputer_SV52_Extract_out0_ptr(new OutputerType1_SV52_Extract(sorter_Process_103, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV52_Extract_out0));
        OutputerType1_SV52_Extract * outputer_SV52_Extract_out0 = outputer_SV52_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV52_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_103::Schema row;
            outputer_SV52_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV52_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV52_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV52_Extract
#pragma region SV53_Extract
#if defined(COMPILE_SV53_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_105>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV53_Extract_GetSStream_104;
    SStreamV3ExtractorType_SV53_Extract_GetSStream_104 * CreateExtractor_SV53_Extract_GetSStream_104(unique_ptr<SStreamV3ExtractorType_SV53_Extract_GetSStream_104> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV53_Extract_GetSStream_104(104, "", true/*100*/, UID_GetSStream_104));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV53_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV53_Extract_GetSStream_104> extractor_0_ptr;
        SStreamV3ExtractorType_SV53_Extract_GetSStream_104 * extractor_0 = CreateExtractor_SV53_Extract_GetSStream_104(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_105;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_105> sorter_Process_105_ptr (new SorterType_Process_105(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_105));
        SorterType_Process_105 * sorter_Process_105 = sorter_Process_105_ptr.get();
        ULONG sorter_Process_105_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_105, BinaryOutputPolicy<typename SorterType_Process_105::Schema>, BinaryOutputStream, false> OutputerType1_SV53_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV53_Extract> outputer_SV53_Extract_out0_ptr(new OutputerType1_SV53_Extract(sorter_Process_105, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV53_Extract_out0));
        OutputerType1_SV53_Extract * outputer_SV53_Extract_out0 = outputer_SV53_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV53_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_105::Schema row;
            outputer_SV53_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV53_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV53_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV53_Extract
#pragma region SV54_Extract
#if defined(COMPILE_SV54_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_107>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV54_Extract_GetSStream_106;
    SStreamV3ExtractorType_SV54_Extract_GetSStream_106 * CreateExtractor_SV54_Extract_GetSStream_106(unique_ptr<SStreamV3ExtractorType_SV54_Extract_GetSStream_106> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV54_Extract_GetSStream_106(106, "", true/*100*/, UID_GetSStream_106));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV54_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV54_Extract_GetSStream_106> extractor_0_ptr;
        SStreamV3ExtractorType_SV54_Extract_GetSStream_106 * extractor_0 = CreateExtractor_SV54_Extract_GetSStream_106(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_107;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_107> sorter_Process_107_ptr (new SorterType_Process_107(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_107));
        SorterType_Process_107 * sorter_Process_107 = sorter_Process_107_ptr.get();
        ULONG sorter_Process_107_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_107, BinaryOutputPolicy<typename SorterType_Process_107::Schema>, BinaryOutputStream, false> OutputerType1_SV54_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV54_Extract> outputer_SV54_Extract_out0_ptr(new OutputerType1_SV54_Extract(sorter_Process_107, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV54_Extract_out0));
        OutputerType1_SV54_Extract * outputer_SV54_Extract_out0 = outputer_SV54_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV54_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_107::Schema row;
            outputer_SV54_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV54_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV54_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV54_Extract
#pragma region SV55_Extract
#if defined(COMPILE_SV55_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_109>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV55_Extract_GetSStream_108;
    SStreamV3ExtractorType_SV55_Extract_GetSStream_108 * CreateExtractor_SV55_Extract_GetSStream_108(unique_ptr<SStreamV3ExtractorType_SV55_Extract_GetSStream_108> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV55_Extract_GetSStream_108(108, "", true/*100*/, UID_GetSStream_108));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV55_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV55_Extract_GetSStream_108> extractor_0_ptr;
        SStreamV3ExtractorType_SV55_Extract_GetSStream_108 * extractor_0 = CreateExtractor_SV55_Extract_GetSStream_108(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_109;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_109> sorter_Process_109_ptr (new SorterType_Process_109(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_109));
        SorterType_Process_109 * sorter_Process_109 = sorter_Process_109_ptr.get();
        ULONG sorter_Process_109_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_109, BinaryOutputPolicy<typename SorterType_Process_109::Schema>, BinaryOutputStream, false> OutputerType1_SV55_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV55_Extract> outputer_SV55_Extract_out0_ptr(new OutputerType1_SV55_Extract(sorter_Process_109, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV55_Extract_out0));
        OutputerType1_SV55_Extract * outputer_SV55_Extract_out0 = outputer_SV55_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV55_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_109::Schema row;
            outputer_SV55_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV55_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV55_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV55_Extract
#pragma region SV56_Extract
#if defined(COMPILE_SV56_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_111>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV56_Extract_GetSStream_110;
    SStreamV3ExtractorType_SV56_Extract_GetSStream_110 * CreateExtractor_SV56_Extract_GetSStream_110(unique_ptr<SStreamV3ExtractorType_SV56_Extract_GetSStream_110> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV56_Extract_GetSStream_110(110, "", true/*100*/, UID_GetSStream_110));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV56_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV56_Extract_GetSStream_110> extractor_0_ptr;
        SStreamV3ExtractorType_SV56_Extract_GetSStream_110 * extractor_0 = CreateExtractor_SV56_Extract_GetSStream_110(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_111;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_111> sorter_Process_111_ptr (new SorterType_Process_111(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_111));
        SorterType_Process_111 * sorter_Process_111 = sorter_Process_111_ptr.get();
        ULONG sorter_Process_111_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_111, BinaryOutputPolicy<typename SorterType_Process_111::Schema>, BinaryOutputStream, false> OutputerType1_SV56_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV56_Extract> outputer_SV56_Extract_out0_ptr(new OutputerType1_SV56_Extract(sorter_Process_111, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV56_Extract_out0));
        OutputerType1_SV56_Extract * outputer_SV56_Extract_out0 = outputer_SV56_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV56_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_111::Schema row;
            outputer_SV56_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV56_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV56_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV56_Extract
#pragma region SV57_Extract
#if defined(COMPILE_SV57_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_113>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV57_Extract_GetSStream_112;
    SStreamV3ExtractorType_SV57_Extract_GetSStream_112 * CreateExtractor_SV57_Extract_GetSStream_112(unique_ptr<SStreamV3ExtractorType_SV57_Extract_GetSStream_112> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV57_Extract_GetSStream_112(112, "", true/*100*/, UID_GetSStream_112));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV57_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV57_Extract_GetSStream_112> extractor_0_ptr;
        SStreamV3ExtractorType_SV57_Extract_GetSStream_112 * extractor_0 = CreateExtractor_SV57_Extract_GetSStream_112(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_113;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_113> sorter_Process_113_ptr (new SorterType_Process_113(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_113));
        SorterType_Process_113 * sorter_Process_113 = sorter_Process_113_ptr.get();
        ULONG sorter_Process_113_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_113, BinaryOutputPolicy<typename SorterType_Process_113::Schema>, BinaryOutputStream, false> OutputerType1_SV57_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV57_Extract> outputer_SV57_Extract_out0_ptr(new OutputerType1_SV57_Extract(sorter_Process_113, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV57_Extract_out0));
        OutputerType1_SV57_Extract * outputer_SV57_Extract_out0 = outputer_SV57_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV57_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_113::Schema row;
            outputer_SV57_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV57_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV57_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV57_Extract
#pragma region SV58_Extract
#if defined(COMPILE_SV58_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_115>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV58_Extract_GetSStream_114;
    SStreamV3ExtractorType_SV58_Extract_GetSStream_114 * CreateExtractor_SV58_Extract_GetSStream_114(unique_ptr<SStreamV3ExtractorType_SV58_Extract_GetSStream_114> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV58_Extract_GetSStream_114(114, "", true/*100*/, UID_GetSStream_114));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV58_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV58_Extract_GetSStream_114> extractor_0_ptr;
        SStreamV3ExtractorType_SV58_Extract_GetSStream_114 * extractor_0 = CreateExtractor_SV58_Extract_GetSStream_114(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_115;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_115> sorter_Process_115_ptr (new SorterType_Process_115(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_115));
        SorterType_Process_115 * sorter_Process_115 = sorter_Process_115_ptr.get();
        ULONG sorter_Process_115_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_115, BinaryOutputPolicy<typename SorterType_Process_115::Schema>, BinaryOutputStream, false> OutputerType1_SV58_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV58_Extract> outputer_SV58_Extract_out0_ptr(new OutputerType1_SV58_Extract(sorter_Process_115, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV58_Extract_out0));
        OutputerType1_SV58_Extract * outputer_SV58_Extract_out0 = outputer_SV58_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV58_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_115::Schema row;
            outputer_SV58_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV58_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV58_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV58_Extract
#pragma region SV59_Extract
#if defined(COMPILE_SV59_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_117>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV59_Extract_GetSStream_116;
    SStreamV3ExtractorType_SV59_Extract_GetSStream_116 * CreateExtractor_SV59_Extract_GetSStream_116(unique_ptr<SStreamV3ExtractorType_SV59_Extract_GetSStream_116> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV59_Extract_GetSStream_116(116, "", true/*100*/, UID_GetSStream_116));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV59_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV59_Extract_GetSStream_116> extractor_0_ptr;
        SStreamV3ExtractorType_SV59_Extract_GetSStream_116 * extractor_0 = CreateExtractor_SV59_Extract_GetSStream_116(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_117;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_117> sorter_Process_117_ptr (new SorterType_Process_117(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_117));
        SorterType_Process_117 * sorter_Process_117 = sorter_Process_117_ptr.get();
        ULONG sorter_Process_117_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_117, BinaryOutputPolicy<typename SorterType_Process_117::Schema>, BinaryOutputStream, false> OutputerType1_SV59_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV59_Extract> outputer_SV59_Extract_out0_ptr(new OutputerType1_SV59_Extract(sorter_Process_117, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV59_Extract_out0));
        OutputerType1_SV59_Extract * outputer_SV59_Extract_out0 = outputer_SV59_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV59_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_117::Schema row;
            outputer_SV59_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV59_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV59_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV59_Extract
#pragma region SV60_Extract
#if defined(COMPILE_SV60_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_119>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV60_Extract_GetSStream_118;
    SStreamV3ExtractorType_SV60_Extract_GetSStream_118 * CreateExtractor_SV60_Extract_GetSStream_118(unique_ptr<SStreamV3ExtractorType_SV60_Extract_GetSStream_118> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV60_Extract_GetSStream_118(118, "", true/*100*/, UID_GetSStream_118));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV60_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV60_Extract_GetSStream_118> extractor_0_ptr;
        SStreamV3ExtractorType_SV60_Extract_GetSStream_118 * extractor_0 = CreateExtractor_SV60_Extract_GetSStream_118(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_119;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_119> sorter_Process_119_ptr (new SorterType_Process_119(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_119));
        SorterType_Process_119 * sorter_Process_119 = sorter_Process_119_ptr.get();
        ULONG sorter_Process_119_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_119, BinaryOutputPolicy<typename SorterType_Process_119::Schema>, BinaryOutputStream, false> OutputerType1_SV60_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV60_Extract> outputer_SV60_Extract_out0_ptr(new OutputerType1_SV60_Extract(sorter_Process_119, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV60_Extract_out0));
        OutputerType1_SV60_Extract * outputer_SV60_Extract_out0 = outputer_SV60_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV60_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_119::Schema row;
            outputer_SV60_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV60_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV60_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV60_Extract
#pragma region SV61_Extract
#if defined(COMPILE_SV61_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_121>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV61_Extract_GetSStream_120;
    SStreamV3ExtractorType_SV61_Extract_GetSStream_120 * CreateExtractor_SV61_Extract_GetSStream_120(unique_ptr<SStreamV3ExtractorType_SV61_Extract_GetSStream_120> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV61_Extract_GetSStream_120(120, "", true/*100*/, UID_GetSStream_120));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV61_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV61_Extract_GetSStream_120> extractor_0_ptr;
        SStreamV3ExtractorType_SV61_Extract_GetSStream_120 * extractor_0 = CreateExtractor_SV61_Extract_GetSStream_120(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_121;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_121> sorter_Process_121_ptr (new SorterType_Process_121(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_121));
        SorterType_Process_121 * sorter_Process_121 = sorter_Process_121_ptr.get();
        ULONG sorter_Process_121_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_121, BinaryOutputPolicy<typename SorterType_Process_121::Schema>, BinaryOutputStream, false> OutputerType1_SV61_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV61_Extract> outputer_SV61_Extract_out0_ptr(new OutputerType1_SV61_Extract(sorter_Process_121, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV61_Extract_out0));
        OutputerType1_SV61_Extract * outputer_SV61_Extract_out0 = outputer_SV61_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV61_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_121::Schema row;
            outputer_SV61_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV61_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV61_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV61_Extract
#pragma region SV62_Extract
#if defined(COMPILE_SV62_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_123>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV62_Extract_GetSStream_122;
    SStreamV3ExtractorType_SV62_Extract_GetSStream_122 * CreateExtractor_SV62_Extract_GetSStream_122(unique_ptr<SStreamV3ExtractorType_SV62_Extract_GetSStream_122> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV62_Extract_GetSStream_122(122, "", true/*100*/, UID_GetSStream_122));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV62_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV62_Extract_GetSStream_122> extractor_0_ptr;
        SStreamV3ExtractorType_SV62_Extract_GetSStream_122 * extractor_0 = CreateExtractor_SV62_Extract_GetSStream_122(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_123;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_123> sorter_Process_123_ptr (new SorterType_Process_123(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_123));
        SorterType_Process_123 * sorter_Process_123 = sorter_Process_123_ptr.get();
        ULONG sorter_Process_123_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_123, BinaryOutputPolicy<typename SorterType_Process_123::Schema>, BinaryOutputStream, false> OutputerType1_SV62_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV62_Extract> outputer_SV62_Extract_out0_ptr(new OutputerType1_SV62_Extract(sorter_Process_123, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV62_Extract_out0));
        OutputerType1_SV62_Extract * outputer_SV62_Extract_out0 = outputer_SV62_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV62_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_123::Schema row;
            outputer_SV62_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV62_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV62_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV62_Extract
#pragma region SV63_Extract
#if defined(COMPILE_SV63_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_125>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV63_Extract_GetSStream_124;
    SStreamV3ExtractorType_SV63_Extract_GetSStream_124 * CreateExtractor_SV63_Extract_GetSStream_124(unique_ptr<SStreamV3ExtractorType_SV63_Extract_GetSStream_124> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV63_Extract_GetSStream_124(124, "", true/*100*/, UID_GetSStream_124));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV63_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV63_Extract_GetSStream_124> extractor_0_ptr;
        SStreamV3ExtractorType_SV63_Extract_GetSStream_124 * extractor_0 = CreateExtractor_SV63_Extract_GetSStream_124(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_125;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_125> sorter_Process_125_ptr (new SorterType_Process_125(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_125));
        SorterType_Process_125 * sorter_Process_125 = sorter_Process_125_ptr.get();
        ULONG sorter_Process_125_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_125, BinaryOutputPolicy<typename SorterType_Process_125::Schema>, BinaryOutputStream, false> OutputerType1_SV63_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV63_Extract> outputer_SV63_Extract_out0_ptr(new OutputerType1_SV63_Extract(sorter_Process_125, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV63_Extract_out0));
        OutputerType1_SV63_Extract * outputer_SV63_Extract_out0 = outputer_SV63_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV63_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_125::Schema row;
            outputer_SV63_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV63_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV63_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV63_Extract
#pragma region SV64_Extract
#if defined(COMPILE_SV64_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_127>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV64_Extract_GetSStream_126;
    SStreamV3ExtractorType_SV64_Extract_GetSStream_126 * CreateExtractor_SV64_Extract_GetSStream_126(unique_ptr<SStreamV3ExtractorType_SV64_Extract_GetSStream_126> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV64_Extract_GetSStream_126(126, "", true/*100*/, UID_GetSStream_126));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV64_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV64_Extract_GetSStream_126> extractor_0_ptr;
        SStreamV3ExtractorType_SV64_Extract_GetSStream_126 * extractor_0 = CreateExtractor_SV64_Extract_GetSStream_126(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_127;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_127> sorter_Process_127_ptr (new SorterType_Process_127(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_127));
        SorterType_Process_127 * sorter_Process_127 = sorter_Process_127_ptr.get();
        ULONG sorter_Process_127_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_127, BinaryOutputPolicy<typename SorterType_Process_127::Schema>, BinaryOutputStream, false> OutputerType1_SV64_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV64_Extract> outputer_SV64_Extract_out0_ptr(new OutputerType1_SV64_Extract(sorter_Process_127, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV64_Extract_out0));
        OutputerType1_SV64_Extract * outputer_SV64_Extract_out0 = outputer_SV64_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV64_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_127::Schema row;
            outputer_SV64_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV64_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV64_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV64_Extract
#pragma region SV65_Extract
#if defined(COMPILE_SV65_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_129>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV65_Extract_GetSStream_128;
    SStreamV3ExtractorType_SV65_Extract_GetSStream_128 * CreateExtractor_SV65_Extract_GetSStream_128(unique_ptr<SStreamV3ExtractorType_SV65_Extract_GetSStream_128> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV65_Extract_GetSStream_128(128, "", true/*100*/, UID_GetSStream_128));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV65_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV65_Extract_GetSStream_128> extractor_0_ptr;
        SStreamV3ExtractorType_SV65_Extract_GetSStream_128 * extractor_0 = CreateExtractor_SV65_Extract_GetSStream_128(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_129;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_129> sorter_Process_129_ptr (new SorterType_Process_129(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_129));
        SorterType_Process_129 * sorter_Process_129 = sorter_Process_129_ptr.get();
        ULONG sorter_Process_129_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_129, BinaryOutputPolicy<typename SorterType_Process_129::Schema>, BinaryOutputStream, false> OutputerType1_SV65_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV65_Extract> outputer_SV65_Extract_out0_ptr(new OutputerType1_SV65_Extract(sorter_Process_129, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV65_Extract_out0));
        OutputerType1_SV65_Extract * outputer_SV65_Extract_out0 = outputer_SV65_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV65_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_129::Schema row;
            outputer_SV65_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV65_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV65_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV65_Extract
#pragma region SV66_Extract
#if defined(COMPILE_SV66_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_131>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV66_Extract_GetSStream_130;
    SStreamV3ExtractorType_SV66_Extract_GetSStream_130 * CreateExtractor_SV66_Extract_GetSStream_130(unique_ptr<SStreamV3ExtractorType_SV66_Extract_GetSStream_130> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV66_Extract_GetSStream_130(130, "", true/*100*/, UID_GetSStream_130));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV66_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV66_Extract_GetSStream_130> extractor_0_ptr;
        SStreamV3ExtractorType_SV66_Extract_GetSStream_130 * extractor_0 = CreateExtractor_SV66_Extract_GetSStream_130(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_131;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_131> sorter_Process_131_ptr (new SorterType_Process_131(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_131));
        SorterType_Process_131 * sorter_Process_131 = sorter_Process_131_ptr.get();
        ULONG sorter_Process_131_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_131, BinaryOutputPolicy<typename SorterType_Process_131::Schema>, BinaryOutputStream, false> OutputerType1_SV66_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV66_Extract> outputer_SV66_Extract_out0_ptr(new OutputerType1_SV66_Extract(sorter_Process_131, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV66_Extract_out0));
        OutputerType1_SV66_Extract * outputer_SV66_Extract_out0 = outputer_SV66_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV66_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_131::Schema row;
            outputer_SV66_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV66_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV66_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV66_Extract
#pragma region SV67_Extract
#if defined(COMPILE_SV67_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_133>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV67_Extract_GetSStream_132;
    SStreamV3ExtractorType_SV67_Extract_GetSStream_132 * CreateExtractor_SV67_Extract_GetSStream_132(unique_ptr<SStreamV3ExtractorType_SV67_Extract_GetSStream_132> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV67_Extract_GetSStream_132(132, "", true/*100*/, UID_GetSStream_132));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV67_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV67_Extract_GetSStream_132> extractor_0_ptr;
        SStreamV3ExtractorType_SV67_Extract_GetSStream_132 * extractor_0 = CreateExtractor_SV67_Extract_GetSStream_132(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_133;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_133> sorter_Process_133_ptr (new SorterType_Process_133(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_133));
        SorterType_Process_133 * sorter_Process_133 = sorter_Process_133_ptr.get();
        ULONG sorter_Process_133_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_133, BinaryOutputPolicy<typename SorterType_Process_133::Schema>, BinaryOutputStream, false> OutputerType1_SV67_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV67_Extract> outputer_SV67_Extract_out0_ptr(new OutputerType1_SV67_Extract(sorter_Process_133, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV67_Extract_out0));
        OutputerType1_SV67_Extract * outputer_SV67_Extract_out0 = outputer_SV67_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV67_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_133::Schema row;
            outputer_SV67_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV67_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV67_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV67_Extract
#pragma region SV68_Extract
#if defined(COMPILE_SV68_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_135>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV68_Extract_GetSStream_134;
    SStreamV3ExtractorType_SV68_Extract_GetSStream_134 * CreateExtractor_SV68_Extract_GetSStream_134(unique_ptr<SStreamV3ExtractorType_SV68_Extract_GetSStream_134> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV68_Extract_GetSStream_134(134, "", true/*100*/, UID_GetSStream_134));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV68_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV68_Extract_GetSStream_134> extractor_0_ptr;
        SStreamV3ExtractorType_SV68_Extract_GetSStream_134 * extractor_0 = CreateExtractor_SV68_Extract_GetSStream_134(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_135;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_135> sorter_Process_135_ptr (new SorterType_Process_135(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_135));
        SorterType_Process_135 * sorter_Process_135 = sorter_Process_135_ptr.get();
        ULONG sorter_Process_135_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_135, BinaryOutputPolicy<typename SorterType_Process_135::Schema>, BinaryOutputStream, false> OutputerType1_SV68_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV68_Extract> outputer_SV68_Extract_out0_ptr(new OutputerType1_SV68_Extract(sorter_Process_135, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV68_Extract_out0));
        OutputerType1_SV68_Extract * outputer_SV68_Extract_out0 = outputer_SV68_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV68_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_135::Schema row;
            outputer_SV68_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV68_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV68_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV68_Extract
#pragma region SV69_Extract
#if defined(COMPILE_SV69_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_137>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV69_Extract_GetSStream_136;
    SStreamV3ExtractorType_SV69_Extract_GetSStream_136 * CreateExtractor_SV69_Extract_GetSStream_136(unique_ptr<SStreamV3ExtractorType_SV69_Extract_GetSStream_136> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV69_Extract_GetSStream_136(136, "", true/*100*/, UID_GetSStream_136));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV69_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV69_Extract_GetSStream_136> extractor_0_ptr;
        SStreamV3ExtractorType_SV69_Extract_GetSStream_136 * extractor_0 = CreateExtractor_SV69_Extract_GetSStream_136(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_137;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_137> sorter_Process_137_ptr (new SorterType_Process_137(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_137));
        SorterType_Process_137 * sorter_Process_137 = sorter_Process_137_ptr.get();
        ULONG sorter_Process_137_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_137, BinaryOutputPolicy<typename SorterType_Process_137::Schema>, BinaryOutputStream, false> OutputerType1_SV69_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV69_Extract> outputer_SV69_Extract_out0_ptr(new OutputerType1_SV69_Extract(sorter_Process_137, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV69_Extract_out0));
        OutputerType1_SV69_Extract * outputer_SV69_Extract_out0 = outputer_SV69_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV69_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_137::Schema row;
            outputer_SV69_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV69_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV69_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV69_Extract
#pragma region SV70_Extract
#if defined(COMPILE_SV70_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_139>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV70_Extract_GetSStream_138;
    SStreamV3ExtractorType_SV70_Extract_GetSStream_138 * CreateExtractor_SV70_Extract_GetSStream_138(unique_ptr<SStreamV3ExtractorType_SV70_Extract_GetSStream_138> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV70_Extract_GetSStream_138(138, "", true/*100*/, UID_GetSStream_138));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV70_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV70_Extract_GetSStream_138> extractor_0_ptr;
        SStreamV3ExtractorType_SV70_Extract_GetSStream_138 * extractor_0 = CreateExtractor_SV70_Extract_GetSStream_138(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_139;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_139> sorter_Process_139_ptr (new SorterType_Process_139(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_139));
        SorterType_Process_139 * sorter_Process_139 = sorter_Process_139_ptr.get();
        ULONG sorter_Process_139_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_139, BinaryOutputPolicy<typename SorterType_Process_139::Schema>, BinaryOutputStream, false> OutputerType1_SV70_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV70_Extract> outputer_SV70_Extract_out0_ptr(new OutputerType1_SV70_Extract(sorter_Process_139, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV70_Extract_out0));
        OutputerType1_SV70_Extract * outputer_SV70_Extract_out0 = outputer_SV70_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV70_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_139::Schema row;
            outputer_SV70_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV70_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV70_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV70_Extract
#pragma region SV71_Extract
#if defined(COMPILE_SV71_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_141>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV71_Extract_GetSStream_140;
    SStreamV3ExtractorType_SV71_Extract_GetSStream_140 * CreateExtractor_SV71_Extract_GetSStream_140(unique_ptr<SStreamV3ExtractorType_SV71_Extract_GetSStream_140> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV71_Extract_GetSStream_140(140, "", true/*100*/, UID_GetSStream_140));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV71_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV71_Extract_GetSStream_140> extractor_0_ptr;
        SStreamV3ExtractorType_SV71_Extract_GetSStream_140 * extractor_0 = CreateExtractor_SV71_Extract_GetSStream_140(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_141;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_141> sorter_Process_141_ptr (new SorterType_Process_141(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_141));
        SorterType_Process_141 * sorter_Process_141 = sorter_Process_141_ptr.get();
        ULONG sorter_Process_141_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_141, BinaryOutputPolicy<typename SorterType_Process_141::Schema>, BinaryOutputStream, false> OutputerType1_SV71_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV71_Extract> outputer_SV71_Extract_out0_ptr(new OutputerType1_SV71_Extract(sorter_Process_141, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV71_Extract_out0));
        OutputerType1_SV71_Extract * outputer_SV71_Extract_out0 = outputer_SV71_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV71_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_141::Schema row;
            outputer_SV71_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV71_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV71_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV71_Extract
#pragma region SV72_Extract
#if defined(COMPILE_SV72_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_143>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV72_Extract_GetSStream_142;
    SStreamV3ExtractorType_SV72_Extract_GetSStream_142 * CreateExtractor_SV72_Extract_GetSStream_142(unique_ptr<SStreamV3ExtractorType_SV72_Extract_GetSStream_142> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV72_Extract_GetSStream_142(142, "", true/*100*/, UID_GetSStream_142));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV72_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV72_Extract_GetSStream_142> extractor_0_ptr;
        SStreamV3ExtractorType_SV72_Extract_GetSStream_142 * extractor_0 = CreateExtractor_SV72_Extract_GetSStream_142(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_143;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_143> sorter_Process_143_ptr (new SorterType_Process_143(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_143));
        SorterType_Process_143 * sorter_Process_143 = sorter_Process_143_ptr.get();
        ULONG sorter_Process_143_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_143, BinaryOutputPolicy<typename SorterType_Process_143::Schema>, BinaryOutputStream, false> OutputerType1_SV72_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV72_Extract> outputer_SV72_Extract_out0_ptr(new OutputerType1_SV72_Extract(sorter_Process_143, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV72_Extract_out0));
        OutputerType1_SV72_Extract * outputer_SV72_Extract_out0 = outputer_SV72_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV72_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_143::Schema row;
            outputer_SV72_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV72_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV72_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV72_Extract
#pragma region SV73_Extract
#if defined(COMPILE_SV73_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_145>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV73_Extract_GetSStream_144;
    SStreamV3ExtractorType_SV73_Extract_GetSStream_144 * CreateExtractor_SV73_Extract_GetSStream_144(unique_ptr<SStreamV3ExtractorType_SV73_Extract_GetSStream_144> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV73_Extract_GetSStream_144(144, "", true/*100*/, UID_GetSStream_144));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV73_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV73_Extract_GetSStream_144> extractor_0_ptr;
        SStreamV3ExtractorType_SV73_Extract_GetSStream_144 * extractor_0 = CreateExtractor_SV73_Extract_GetSStream_144(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_145;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_145> sorter_Process_145_ptr (new SorterType_Process_145(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_145));
        SorterType_Process_145 * sorter_Process_145 = sorter_Process_145_ptr.get();
        ULONG sorter_Process_145_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_145, BinaryOutputPolicy<typename SorterType_Process_145::Schema>, BinaryOutputStream, false> OutputerType1_SV73_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV73_Extract> outputer_SV73_Extract_out0_ptr(new OutputerType1_SV73_Extract(sorter_Process_145, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV73_Extract_out0));
        OutputerType1_SV73_Extract * outputer_SV73_Extract_out0 = outputer_SV73_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV73_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_145::Schema row;
            outputer_SV73_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV73_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV73_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV73_Extract
#pragma region SV74_Extract
#if defined(COMPILE_SV74_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_147>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV74_Extract_GetSStream_146;
    SStreamV3ExtractorType_SV74_Extract_GetSStream_146 * CreateExtractor_SV74_Extract_GetSStream_146(unique_ptr<SStreamV3ExtractorType_SV74_Extract_GetSStream_146> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV74_Extract_GetSStream_146(146, "", true/*100*/, UID_GetSStream_146));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV74_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV74_Extract_GetSStream_146> extractor_0_ptr;
        SStreamV3ExtractorType_SV74_Extract_GetSStream_146 * extractor_0 = CreateExtractor_SV74_Extract_GetSStream_146(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_147;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_147> sorter_Process_147_ptr (new SorterType_Process_147(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_147));
        SorterType_Process_147 * sorter_Process_147 = sorter_Process_147_ptr.get();
        ULONG sorter_Process_147_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_147, BinaryOutputPolicy<typename SorterType_Process_147::Schema>, BinaryOutputStream, false> OutputerType1_SV74_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV74_Extract> outputer_SV74_Extract_out0_ptr(new OutputerType1_SV74_Extract(sorter_Process_147, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV74_Extract_out0));
        OutputerType1_SV74_Extract * outputer_SV74_Extract_out0 = outputer_SV74_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV74_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_147::Schema row;
            outputer_SV74_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV74_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV74_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV74_Extract
#pragma region SV75_Extract
#if defined(COMPILE_SV75_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_149>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV75_Extract_GetSStream_148;
    SStreamV3ExtractorType_SV75_Extract_GetSStream_148 * CreateExtractor_SV75_Extract_GetSStream_148(unique_ptr<SStreamV3ExtractorType_SV75_Extract_GetSStream_148> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV75_Extract_GetSStream_148(148, "", true/*100*/, UID_GetSStream_148));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV75_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV75_Extract_GetSStream_148> extractor_0_ptr;
        SStreamV3ExtractorType_SV75_Extract_GetSStream_148 * extractor_0 = CreateExtractor_SV75_Extract_GetSStream_148(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_149;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_149> sorter_Process_149_ptr (new SorterType_Process_149(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_149));
        SorterType_Process_149 * sorter_Process_149 = sorter_Process_149_ptr.get();
        ULONG sorter_Process_149_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_149, BinaryOutputPolicy<typename SorterType_Process_149::Schema>, BinaryOutputStream, false> OutputerType1_SV75_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV75_Extract> outputer_SV75_Extract_out0_ptr(new OutputerType1_SV75_Extract(sorter_Process_149, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV75_Extract_out0));
        OutputerType1_SV75_Extract * outputer_SV75_Extract_out0 = outputer_SV75_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV75_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_149::Schema row;
            outputer_SV75_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV75_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV75_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV75_Extract
#pragma region SV76_Extract
#if defined(COMPILE_SV76_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_151>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV76_Extract_GetSStream_150;
    SStreamV3ExtractorType_SV76_Extract_GetSStream_150 * CreateExtractor_SV76_Extract_GetSStream_150(unique_ptr<SStreamV3ExtractorType_SV76_Extract_GetSStream_150> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV76_Extract_GetSStream_150(150, "", true/*100*/, UID_GetSStream_150));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV76_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV76_Extract_GetSStream_150> extractor_0_ptr;
        SStreamV3ExtractorType_SV76_Extract_GetSStream_150 * extractor_0 = CreateExtractor_SV76_Extract_GetSStream_150(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_151;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_151> sorter_Process_151_ptr (new SorterType_Process_151(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_151));
        SorterType_Process_151 * sorter_Process_151 = sorter_Process_151_ptr.get();
        ULONG sorter_Process_151_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_151, BinaryOutputPolicy<typename SorterType_Process_151::Schema>, BinaryOutputStream, false> OutputerType1_SV76_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV76_Extract> outputer_SV76_Extract_out0_ptr(new OutputerType1_SV76_Extract(sorter_Process_151, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV76_Extract_out0));
        OutputerType1_SV76_Extract * outputer_SV76_Extract_out0 = outputer_SV76_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV76_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_151::Schema row;
            outputer_SV76_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV76_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV76_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV76_Extract
#pragma region SV77_Extract
#if defined(COMPILE_SV77_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_153>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV77_Extract_GetSStream_152;
    SStreamV3ExtractorType_SV77_Extract_GetSStream_152 * CreateExtractor_SV77_Extract_GetSStream_152(unique_ptr<SStreamV3ExtractorType_SV77_Extract_GetSStream_152> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV77_Extract_GetSStream_152(152, "", true/*100*/, UID_GetSStream_152));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV77_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV77_Extract_GetSStream_152> extractor_0_ptr;
        SStreamV3ExtractorType_SV77_Extract_GetSStream_152 * extractor_0 = CreateExtractor_SV77_Extract_GetSStream_152(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_153;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_153> sorter_Process_153_ptr (new SorterType_Process_153(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_153));
        SorterType_Process_153 * sorter_Process_153 = sorter_Process_153_ptr.get();
        ULONG sorter_Process_153_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_153, BinaryOutputPolicy<typename SorterType_Process_153::Schema>, BinaryOutputStream, false> OutputerType1_SV77_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV77_Extract> outputer_SV77_Extract_out0_ptr(new OutputerType1_SV77_Extract(sorter_Process_153, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV77_Extract_out0));
        OutputerType1_SV77_Extract * outputer_SV77_Extract_out0 = outputer_SV77_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV77_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_153::Schema row;
            outputer_SV77_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV77_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV77_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV77_Extract
#pragma region SV78_Extract
#if defined(COMPILE_SV78_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_155>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV78_Extract_GetSStream_154;
    SStreamV3ExtractorType_SV78_Extract_GetSStream_154 * CreateExtractor_SV78_Extract_GetSStream_154(unique_ptr<SStreamV3ExtractorType_SV78_Extract_GetSStream_154> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV78_Extract_GetSStream_154(154, "", true/*100*/, UID_GetSStream_154));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV78_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV78_Extract_GetSStream_154> extractor_0_ptr;
        SStreamV3ExtractorType_SV78_Extract_GetSStream_154 * extractor_0 = CreateExtractor_SV78_Extract_GetSStream_154(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_155;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_155> sorter_Process_155_ptr (new SorterType_Process_155(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_155));
        SorterType_Process_155 * sorter_Process_155 = sorter_Process_155_ptr.get();
        ULONG sorter_Process_155_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_155, BinaryOutputPolicy<typename SorterType_Process_155::Schema>, BinaryOutputStream, false> OutputerType1_SV78_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV78_Extract> outputer_SV78_Extract_out0_ptr(new OutputerType1_SV78_Extract(sorter_Process_155, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV78_Extract_out0));
        OutputerType1_SV78_Extract * outputer_SV78_Extract_out0 = outputer_SV78_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV78_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_155::Schema row;
            outputer_SV78_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV78_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV78_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV78_Extract
#pragma region SV79_Extract
#if defined(COMPILE_SV79_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_157>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV79_Extract_GetSStream_156;
    SStreamV3ExtractorType_SV79_Extract_GetSStream_156 * CreateExtractor_SV79_Extract_GetSStream_156(unique_ptr<SStreamV3ExtractorType_SV79_Extract_GetSStream_156> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV79_Extract_GetSStream_156(156, "", true/*100*/, UID_GetSStream_156));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV79_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV79_Extract_GetSStream_156> extractor_0_ptr;
        SStreamV3ExtractorType_SV79_Extract_GetSStream_156 * extractor_0 = CreateExtractor_SV79_Extract_GetSStream_156(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_157;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_157> sorter_Process_157_ptr (new SorterType_Process_157(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_157));
        SorterType_Process_157 * sorter_Process_157 = sorter_Process_157_ptr.get();
        ULONG sorter_Process_157_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_157, BinaryOutputPolicy<typename SorterType_Process_157::Schema>, BinaryOutputStream, false> OutputerType1_SV79_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV79_Extract> outputer_SV79_Extract_out0_ptr(new OutputerType1_SV79_Extract(sorter_Process_157, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV79_Extract_out0));
        OutputerType1_SV79_Extract * outputer_SV79_Extract_out0 = outputer_SV79_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV79_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_157::Schema row;
            outputer_SV79_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV79_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV79_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV79_Extract
#pragma region SV80_Extract
#if defined(COMPILE_SV80_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_159>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV80_Extract_GetSStream_158;
    SStreamV3ExtractorType_SV80_Extract_GetSStream_158 * CreateExtractor_SV80_Extract_GetSStream_158(unique_ptr<SStreamV3ExtractorType_SV80_Extract_GetSStream_158> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV80_Extract_GetSStream_158(158, "", true/*100*/, UID_GetSStream_158));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV80_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV80_Extract_GetSStream_158> extractor_0_ptr;
        SStreamV3ExtractorType_SV80_Extract_GetSStream_158 * extractor_0 = CreateExtractor_SV80_Extract_GetSStream_158(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_159;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_159> sorter_Process_159_ptr (new SorterType_Process_159(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_159));
        SorterType_Process_159 * sorter_Process_159 = sorter_Process_159_ptr.get();
        ULONG sorter_Process_159_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_159, BinaryOutputPolicy<typename SorterType_Process_159::Schema>, BinaryOutputStream, false> OutputerType1_SV80_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV80_Extract> outputer_SV80_Extract_out0_ptr(new OutputerType1_SV80_Extract(sorter_Process_159, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV80_Extract_out0));
        OutputerType1_SV80_Extract * outputer_SV80_Extract_out0 = outputer_SV80_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV80_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_159::Schema row;
            outputer_SV80_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV80_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV80_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV80_Extract
#pragma region SV81_Extract
#if defined(COMPILE_SV81_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_161>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV81_Extract_GetSStream_160;
    SStreamV3ExtractorType_SV81_Extract_GetSStream_160 * CreateExtractor_SV81_Extract_GetSStream_160(unique_ptr<SStreamV3ExtractorType_SV81_Extract_GetSStream_160> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV81_Extract_GetSStream_160(160, "", true/*100*/, UID_GetSStream_160));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV81_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV81_Extract_GetSStream_160> extractor_0_ptr;
        SStreamV3ExtractorType_SV81_Extract_GetSStream_160 * extractor_0 = CreateExtractor_SV81_Extract_GetSStream_160(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_161;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_161> sorter_Process_161_ptr (new SorterType_Process_161(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_161));
        SorterType_Process_161 * sorter_Process_161 = sorter_Process_161_ptr.get();
        ULONG sorter_Process_161_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_161, BinaryOutputPolicy<typename SorterType_Process_161::Schema>, BinaryOutputStream, false> OutputerType1_SV81_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV81_Extract> outputer_SV81_Extract_out0_ptr(new OutputerType1_SV81_Extract(sorter_Process_161, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV81_Extract_out0));
        OutputerType1_SV81_Extract * outputer_SV81_Extract_out0 = outputer_SV81_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV81_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_161::Schema row;
            outputer_SV81_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV81_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV81_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV81_Extract
#pragma region SV82_Extract
#if defined(COMPILE_SV82_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_163>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV82_Extract_GetSStream_162;
    SStreamV3ExtractorType_SV82_Extract_GetSStream_162 * CreateExtractor_SV82_Extract_GetSStream_162(unique_ptr<SStreamV3ExtractorType_SV82_Extract_GetSStream_162> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV82_Extract_GetSStream_162(162, "", true/*100*/, UID_GetSStream_162));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV82_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV82_Extract_GetSStream_162> extractor_0_ptr;
        SStreamV3ExtractorType_SV82_Extract_GetSStream_162 * extractor_0 = CreateExtractor_SV82_Extract_GetSStream_162(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_163;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_163> sorter_Process_163_ptr (new SorterType_Process_163(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_163));
        SorterType_Process_163 * sorter_Process_163 = sorter_Process_163_ptr.get();
        ULONG sorter_Process_163_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_163, BinaryOutputPolicy<typename SorterType_Process_163::Schema>, BinaryOutputStream, false> OutputerType1_SV82_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV82_Extract> outputer_SV82_Extract_out0_ptr(new OutputerType1_SV82_Extract(sorter_Process_163, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV82_Extract_out0));
        OutputerType1_SV82_Extract * outputer_SV82_Extract_out0 = outputer_SV82_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV82_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_163::Schema row;
            outputer_SV82_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV82_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV82_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV82_Extract
#pragma region SV83_Extract
#if defined(COMPILE_SV83_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_165>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV83_Extract_GetSStream_164;
    SStreamV3ExtractorType_SV83_Extract_GetSStream_164 * CreateExtractor_SV83_Extract_GetSStream_164(unique_ptr<SStreamV3ExtractorType_SV83_Extract_GetSStream_164> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV83_Extract_GetSStream_164(164, "", true/*100*/, UID_GetSStream_164));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV83_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV83_Extract_GetSStream_164> extractor_0_ptr;
        SStreamV3ExtractorType_SV83_Extract_GetSStream_164 * extractor_0 = CreateExtractor_SV83_Extract_GetSStream_164(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_165;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_165> sorter_Process_165_ptr (new SorterType_Process_165(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_165));
        SorterType_Process_165 * sorter_Process_165 = sorter_Process_165_ptr.get();
        ULONG sorter_Process_165_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_165, BinaryOutputPolicy<typename SorterType_Process_165::Schema>, BinaryOutputStream, false> OutputerType1_SV83_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV83_Extract> outputer_SV83_Extract_out0_ptr(new OutputerType1_SV83_Extract(sorter_Process_165, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV83_Extract_out0));
        OutputerType1_SV83_Extract * outputer_SV83_Extract_out0 = outputer_SV83_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV83_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_165::Schema row;
            outputer_SV83_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV83_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV83_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV83_Extract
#pragma region SV84_Extract
#if defined(COMPILE_SV84_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_167>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV84_Extract_GetSStream_166;
    SStreamV3ExtractorType_SV84_Extract_GetSStream_166 * CreateExtractor_SV84_Extract_GetSStream_166(unique_ptr<SStreamV3ExtractorType_SV84_Extract_GetSStream_166> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV84_Extract_GetSStream_166(166, "", true/*100*/, UID_GetSStream_166));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV84_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV84_Extract_GetSStream_166> extractor_0_ptr;
        SStreamV3ExtractorType_SV84_Extract_GetSStream_166 * extractor_0 = CreateExtractor_SV84_Extract_GetSStream_166(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_167;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_167> sorter_Process_167_ptr (new SorterType_Process_167(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_167));
        SorterType_Process_167 * sorter_Process_167 = sorter_Process_167_ptr.get();
        ULONG sorter_Process_167_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_167, BinaryOutputPolicy<typename SorterType_Process_167::Schema>, BinaryOutputStream, false> OutputerType1_SV84_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV84_Extract> outputer_SV84_Extract_out0_ptr(new OutputerType1_SV84_Extract(sorter_Process_167, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV84_Extract_out0));
        OutputerType1_SV84_Extract * outputer_SV84_Extract_out0 = outputer_SV84_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV84_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_167::Schema row;
            outputer_SV84_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV84_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV84_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV84_Extract
#pragma region SV85_Extract
#if defined(COMPILE_SV85_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_169>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV85_Extract_GetSStream_168;
    SStreamV3ExtractorType_SV85_Extract_GetSStream_168 * CreateExtractor_SV85_Extract_GetSStream_168(unique_ptr<SStreamV3ExtractorType_SV85_Extract_GetSStream_168> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV85_Extract_GetSStream_168(168, "", true/*100*/, UID_GetSStream_168));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV85_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV85_Extract_GetSStream_168> extractor_0_ptr;
        SStreamV3ExtractorType_SV85_Extract_GetSStream_168 * extractor_0 = CreateExtractor_SV85_Extract_GetSStream_168(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_169;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_169> sorter_Process_169_ptr (new SorterType_Process_169(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_169));
        SorterType_Process_169 * sorter_Process_169 = sorter_Process_169_ptr.get();
        ULONG sorter_Process_169_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_169, BinaryOutputPolicy<typename SorterType_Process_169::Schema>, BinaryOutputStream, false> OutputerType1_SV85_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV85_Extract> outputer_SV85_Extract_out0_ptr(new OutputerType1_SV85_Extract(sorter_Process_169, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV85_Extract_out0));
        OutputerType1_SV85_Extract * outputer_SV85_Extract_out0 = outputer_SV85_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV85_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_169::Schema row;
            outputer_SV85_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV85_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV85_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV85_Extract
#pragma region SV86_Extract
#if defined(COMPILE_SV86_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_171>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV86_Extract_GetSStream_170;
    SStreamV3ExtractorType_SV86_Extract_GetSStream_170 * CreateExtractor_SV86_Extract_GetSStream_170(unique_ptr<SStreamV3ExtractorType_SV86_Extract_GetSStream_170> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV86_Extract_GetSStream_170(170, "", true/*100*/, UID_GetSStream_170));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV86_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV86_Extract_GetSStream_170> extractor_0_ptr;
        SStreamV3ExtractorType_SV86_Extract_GetSStream_170 * extractor_0 = CreateExtractor_SV86_Extract_GetSStream_170(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_171;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_171> sorter_Process_171_ptr (new SorterType_Process_171(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_171));
        SorterType_Process_171 * sorter_Process_171 = sorter_Process_171_ptr.get();
        ULONG sorter_Process_171_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_171, BinaryOutputPolicy<typename SorterType_Process_171::Schema>, BinaryOutputStream, false> OutputerType1_SV86_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV86_Extract> outputer_SV86_Extract_out0_ptr(new OutputerType1_SV86_Extract(sorter_Process_171, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV86_Extract_out0));
        OutputerType1_SV86_Extract * outputer_SV86_Extract_out0 = outputer_SV86_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV86_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_171::Schema row;
            outputer_SV86_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV86_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV86_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV86_Extract
#pragma region SV87_Extract
#if defined(COMPILE_SV87_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_173>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV87_Extract_GetSStream_172;
    SStreamV3ExtractorType_SV87_Extract_GetSStream_172 * CreateExtractor_SV87_Extract_GetSStream_172(unique_ptr<SStreamV3ExtractorType_SV87_Extract_GetSStream_172> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV87_Extract_GetSStream_172(172, "", true/*100*/, UID_GetSStream_172));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV87_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV87_Extract_GetSStream_172> extractor_0_ptr;
        SStreamV3ExtractorType_SV87_Extract_GetSStream_172 * extractor_0 = CreateExtractor_SV87_Extract_GetSStream_172(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_173;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_173> sorter_Process_173_ptr (new SorterType_Process_173(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_173));
        SorterType_Process_173 * sorter_Process_173 = sorter_Process_173_ptr.get();
        ULONG sorter_Process_173_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_173, BinaryOutputPolicy<typename SorterType_Process_173::Schema>, BinaryOutputStream, false> OutputerType1_SV87_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV87_Extract> outputer_SV87_Extract_out0_ptr(new OutputerType1_SV87_Extract(sorter_Process_173, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV87_Extract_out0));
        OutputerType1_SV87_Extract * outputer_SV87_Extract_out0 = outputer_SV87_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV87_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_173::Schema row;
            outputer_SV87_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV87_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV87_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV87_Extract
#pragma region SV88_Extract
#if defined(COMPILE_SV88_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_175>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV88_Extract_GetSStream_174;
    SStreamV3ExtractorType_SV88_Extract_GetSStream_174 * CreateExtractor_SV88_Extract_GetSStream_174(unique_ptr<SStreamV3ExtractorType_SV88_Extract_GetSStream_174> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV88_Extract_GetSStream_174(174, "", true/*100*/, UID_GetSStream_174));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV88_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV88_Extract_GetSStream_174> extractor_0_ptr;
        SStreamV3ExtractorType_SV88_Extract_GetSStream_174 * extractor_0 = CreateExtractor_SV88_Extract_GetSStream_174(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_175;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_175> sorter_Process_175_ptr (new SorterType_Process_175(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_175));
        SorterType_Process_175 * sorter_Process_175 = sorter_Process_175_ptr.get();
        ULONG sorter_Process_175_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_175, BinaryOutputPolicy<typename SorterType_Process_175::Schema>, BinaryOutputStream, false> OutputerType1_SV88_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV88_Extract> outputer_SV88_Extract_out0_ptr(new OutputerType1_SV88_Extract(sorter_Process_175, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV88_Extract_out0));
        OutputerType1_SV88_Extract * outputer_SV88_Extract_out0 = outputer_SV88_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV88_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_175::Schema row;
            outputer_SV88_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV88_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV88_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV88_Extract
#pragma region SV89_Extract
#if defined(COMPILE_SV89_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_177>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV89_Extract_GetSStream_176;
    SStreamV3ExtractorType_SV89_Extract_GetSStream_176 * CreateExtractor_SV89_Extract_GetSStream_176(unique_ptr<SStreamV3ExtractorType_SV89_Extract_GetSStream_176> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV89_Extract_GetSStream_176(176, "", true/*100*/, UID_GetSStream_176));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV89_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV89_Extract_GetSStream_176> extractor_0_ptr;
        SStreamV3ExtractorType_SV89_Extract_GetSStream_176 * extractor_0 = CreateExtractor_SV89_Extract_GetSStream_176(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_177;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_177> sorter_Process_177_ptr (new SorterType_Process_177(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_177));
        SorterType_Process_177 * sorter_Process_177 = sorter_Process_177_ptr.get();
        ULONG sorter_Process_177_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_177, BinaryOutputPolicy<typename SorterType_Process_177::Schema>, BinaryOutputStream, false> OutputerType1_SV89_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV89_Extract> outputer_SV89_Extract_out0_ptr(new OutputerType1_SV89_Extract(sorter_Process_177, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV89_Extract_out0));
        OutputerType1_SV89_Extract * outputer_SV89_Extract_out0 = outputer_SV89_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV89_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_177::Schema row;
            outputer_SV89_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV89_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV89_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV89_Extract
#pragma region SV90_Extract
#if defined(COMPILE_SV90_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_179>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV90_Extract_GetSStream_178;
    SStreamV3ExtractorType_SV90_Extract_GetSStream_178 * CreateExtractor_SV90_Extract_GetSStream_178(unique_ptr<SStreamV3ExtractorType_SV90_Extract_GetSStream_178> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV90_Extract_GetSStream_178(178, "", true/*100*/, UID_GetSStream_178));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV90_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV90_Extract_GetSStream_178> extractor_0_ptr;
        SStreamV3ExtractorType_SV90_Extract_GetSStream_178 * extractor_0 = CreateExtractor_SV90_Extract_GetSStream_178(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_179;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_179> sorter_Process_179_ptr (new SorterType_Process_179(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_179));
        SorterType_Process_179 * sorter_Process_179 = sorter_Process_179_ptr.get();
        ULONG sorter_Process_179_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_179, BinaryOutputPolicy<typename SorterType_Process_179::Schema>, BinaryOutputStream, false> OutputerType1_SV90_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV90_Extract> outputer_SV90_Extract_out0_ptr(new OutputerType1_SV90_Extract(sorter_Process_179, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV90_Extract_out0));
        OutputerType1_SV90_Extract * outputer_SV90_Extract_out0 = outputer_SV90_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV90_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_179::Schema row;
            outputer_SV90_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV90_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV90_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV90_Extract
#pragma region SV91_Extract
#if defined(COMPILE_SV91_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_181>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV91_Extract_GetSStream_180;
    SStreamV3ExtractorType_SV91_Extract_GetSStream_180 * CreateExtractor_SV91_Extract_GetSStream_180(unique_ptr<SStreamV3ExtractorType_SV91_Extract_GetSStream_180> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV91_Extract_GetSStream_180(180, "", true/*100*/, UID_GetSStream_180));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV91_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV91_Extract_GetSStream_180> extractor_0_ptr;
        SStreamV3ExtractorType_SV91_Extract_GetSStream_180 * extractor_0 = CreateExtractor_SV91_Extract_GetSStream_180(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_181;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_181> sorter_Process_181_ptr (new SorterType_Process_181(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_181));
        SorterType_Process_181 * sorter_Process_181 = sorter_Process_181_ptr.get();
        ULONG sorter_Process_181_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_181, BinaryOutputPolicy<typename SorterType_Process_181::Schema>, BinaryOutputStream, false> OutputerType1_SV91_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV91_Extract> outputer_SV91_Extract_out0_ptr(new OutputerType1_SV91_Extract(sorter_Process_181, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV91_Extract_out0));
        OutputerType1_SV91_Extract * outputer_SV91_Extract_out0 = outputer_SV91_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV91_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_181::Schema row;
            outputer_SV91_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV91_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV91_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV91_Extract
#pragma region SV92_Extract
#if defined(COMPILE_SV92_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_183>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV92_Extract_GetSStream_182;
    SStreamV3ExtractorType_SV92_Extract_GetSStream_182 * CreateExtractor_SV92_Extract_GetSStream_182(unique_ptr<SStreamV3ExtractorType_SV92_Extract_GetSStream_182> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV92_Extract_GetSStream_182(182, "", true/*100*/, UID_GetSStream_182));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV92_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV92_Extract_GetSStream_182> extractor_0_ptr;
        SStreamV3ExtractorType_SV92_Extract_GetSStream_182 * extractor_0 = CreateExtractor_SV92_Extract_GetSStream_182(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_183;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_183> sorter_Process_183_ptr (new SorterType_Process_183(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_183));
        SorterType_Process_183 * sorter_Process_183 = sorter_Process_183_ptr.get();
        ULONG sorter_Process_183_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_183, BinaryOutputPolicy<typename SorterType_Process_183::Schema>, BinaryOutputStream, false> OutputerType1_SV92_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV92_Extract> outputer_SV92_Extract_out0_ptr(new OutputerType1_SV92_Extract(sorter_Process_183, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV92_Extract_out0));
        OutputerType1_SV92_Extract * outputer_SV92_Extract_out0 = outputer_SV92_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV92_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_183::Schema row;
            outputer_SV92_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV92_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV92_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV92_Extract
#pragma region SV93_Extract
#if defined(COMPILE_SV93_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_185>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV93_Extract_GetSStream_184;
    SStreamV3ExtractorType_SV93_Extract_GetSStream_184 * CreateExtractor_SV93_Extract_GetSStream_184(unique_ptr<SStreamV3ExtractorType_SV93_Extract_GetSStream_184> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV93_Extract_GetSStream_184(184, "", true/*100*/, UID_GetSStream_184));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV93_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV93_Extract_GetSStream_184> extractor_0_ptr;
        SStreamV3ExtractorType_SV93_Extract_GetSStream_184 * extractor_0 = CreateExtractor_SV93_Extract_GetSStream_184(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_185;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_185> sorter_Process_185_ptr (new SorterType_Process_185(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_185));
        SorterType_Process_185 * sorter_Process_185 = sorter_Process_185_ptr.get();
        ULONG sorter_Process_185_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_185, BinaryOutputPolicy<typename SorterType_Process_185::Schema>, BinaryOutputStream, false> OutputerType1_SV93_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV93_Extract> outputer_SV93_Extract_out0_ptr(new OutputerType1_SV93_Extract(sorter_Process_185, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV93_Extract_out0));
        OutputerType1_SV93_Extract * outputer_SV93_Extract_out0 = outputer_SV93_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV93_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_185::Schema row;
            outputer_SV93_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV93_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV93_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV93_Extract
#pragma region SV94_Extract
#if defined(COMPILE_SV94_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_187>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV94_Extract_GetSStream_186;
    SStreamV3ExtractorType_SV94_Extract_GetSStream_186 * CreateExtractor_SV94_Extract_GetSStream_186(unique_ptr<SStreamV3ExtractorType_SV94_Extract_GetSStream_186> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV94_Extract_GetSStream_186(186, "", true/*100*/, UID_GetSStream_186));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV94_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV94_Extract_GetSStream_186> extractor_0_ptr;
        SStreamV3ExtractorType_SV94_Extract_GetSStream_186 * extractor_0 = CreateExtractor_SV94_Extract_GetSStream_186(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_187;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_187> sorter_Process_187_ptr (new SorterType_Process_187(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_187));
        SorterType_Process_187 * sorter_Process_187 = sorter_Process_187_ptr.get();
        ULONG sorter_Process_187_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_187, BinaryOutputPolicy<typename SorterType_Process_187::Schema>, BinaryOutputStream, false> OutputerType1_SV94_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV94_Extract> outputer_SV94_Extract_out0_ptr(new OutputerType1_SV94_Extract(sorter_Process_187, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV94_Extract_out0));
        OutputerType1_SV94_Extract * outputer_SV94_Extract_out0 = outputer_SV94_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV94_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_187::Schema row;
            outputer_SV94_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV94_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV94_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV94_Extract
#pragma region SV95_Extract
#if defined(COMPILE_SV95_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_189>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV95_Extract_GetSStream_188;
    SStreamV3ExtractorType_SV95_Extract_GetSStream_188 * CreateExtractor_SV95_Extract_GetSStream_188(unique_ptr<SStreamV3ExtractorType_SV95_Extract_GetSStream_188> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV95_Extract_GetSStream_188(188, "", true/*100*/, UID_GetSStream_188));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV95_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV95_Extract_GetSStream_188> extractor_0_ptr;
        SStreamV3ExtractorType_SV95_Extract_GetSStream_188 * extractor_0 = CreateExtractor_SV95_Extract_GetSStream_188(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_189;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_189> sorter_Process_189_ptr (new SorterType_Process_189(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_189));
        SorterType_Process_189 * sorter_Process_189 = sorter_Process_189_ptr.get();
        ULONG sorter_Process_189_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_189, BinaryOutputPolicy<typename SorterType_Process_189::Schema>, BinaryOutputStream, false> OutputerType1_SV95_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV95_Extract> outputer_SV95_Extract_out0_ptr(new OutputerType1_SV95_Extract(sorter_Process_189, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV95_Extract_out0));
        OutputerType1_SV95_Extract * outputer_SV95_Extract_out0 = outputer_SV95_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV95_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_189::Schema row;
            outputer_SV95_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV95_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV95_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV95_Extract
#pragma region SV96_Extract
#if defined(COMPILE_SV96_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_191>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV96_Extract_GetSStream_190;
    SStreamV3ExtractorType_SV96_Extract_GetSStream_190 * CreateExtractor_SV96_Extract_GetSStream_190(unique_ptr<SStreamV3ExtractorType_SV96_Extract_GetSStream_190> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV96_Extract_GetSStream_190(190, "", true/*100*/, UID_GetSStream_190));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV96_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV96_Extract_GetSStream_190> extractor_0_ptr;
        SStreamV3ExtractorType_SV96_Extract_GetSStream_190 * extractor_0 = CreateExtractor_SV96_Extract_GetSStream_190(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_191;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_191> sorter_Process_191_ptr (new SorterType_Process_191(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_191));
        SorterType_Process_191 * sorter_Process_191 = sorter_Process_191_ptr.get();
        ULONG sorter_Process_191_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_191, BinaryOutputPolicy<typename SorterType_Process_191::Schema>, BinaryOutputStream, false> OutputerType1_SV96_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV96_Extract> outputer_SV96_Extract_out0_ptr(new OutputerType1_SV96_Extract(sorter_Process_191, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV96_Extract_out0));
        OutputerType1_SV96_Extract * outputer_SV96_Extract_out0 = outputer_SV96_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV96_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_191::Schema row;
            outputer_SV96_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV96_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV96_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV96_Extract
#pragma region SV97_Extract
#if defined(COMPILE_SV97_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_193>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV97_Extract_GetSStream_192;
    SStreamV3ExtractorType_SV97_Extract_GetSStream_192 * CreateExtractor_SV97_Extract_GetSStream_192(unique_ptr<SStreamV3ExtractorType_SV97_Extract_GetSStream_192> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV97_Extract_GetSStream_192(192, "", true/*100*/, UID_GetSStream_192));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV97_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV97_Extract_GetSStream_192> extractor_0_ptr;
        SStreamV3ExtractorType_SV97_Extract_GetSStream_192 * extractor_0 = CreateExtractor_SV97_Extract_GetSStream_192(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_193;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_193> sorter_Process_193_ptr (new SorterType_Process_193(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_193));
        SorterType_Process_193 * sorter_Process_193 = sorter_Process_193_ptr.get();
        ULONG sorter_Process_193_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_193, BinaryOutputPolicy<typename SorterType_Process_193::Schema>, BinaryOutputStream, false> OutputerType1_SV97_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV97_Extract> outputer_SV97_Extract_out0_ptr(new OutputerType1_SV97_Extract(sorter_Process_193, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV97_Extract_out0));
        OutputerType1_SV97_Extract * outputer_SV97_Extract_out0 = outputer_SV97_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV97_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_193::Schema row;
            outputer_SV97_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV97_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV97_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV97_Extract
#pragma region SV98_Extract
#if defined(COMPILE_SV98_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_195>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV98_Extract_GetSStream_194;
    SStreamV3ExtractorType_SV98_Extract_GetSStream_194 * CreateExtractor_SV98_Extract_GetSStream_194(unique_ptr<SStreamV3ExtractorType_SV98_Extract_GetSStream_194> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV98_Extract_GetSStream_194(194, "", true/*100*/, UID_GetSStream_194));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV98_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV98_Extract_GetSStream_194> extractor_0_ptr;
        SStreamV3ExtractorType_SV98_Extract_GetSStream_194 * extractor_0 = CreateExtractor_SV98_Extract_GetSStream_194(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_195;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_195> sorter_Process_195_ptr (new SorterType_Process_195(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_195));
        SorterType_Process_195 * sorter_Process_195 = sorter_Process_195_ptr.get();
        ULONG sorter_Process_195_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_195, BinaryOutputPolicy<typename SorterType_Process_195::Schema>, BinaryOutputStream, false> OutputerType1_SV98_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV98_Extract> outputer_SV98_Extract_out0_ptr(new OutputerType1_SV98_Extract(sorter_Process_195, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV98_Extract_out0));
        OutputerType1_SV98_Extract * outputer_SV98_Extract_out0 = outputer_SV98_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV98_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_195::Schema row;
            outputer_SV98_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV98_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV98_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV98_Extract
#pragma region SV99_Extract
#if defined(COMPILE_SV99_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_197>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV99_Extract_GetSStream_196;
    SStreamV3ExtractorType_SV99_Extract_GetSStream_196 * CreateExtractor_SV99_Extract_GetSStream_196(unique_ptr<SStreamV3ExtractorType_SV99_Extract_GetSStream_196> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV99_Extract_GetSStream_196(196, "", true/*100*/, UID_GetSStream_196));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV99_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV99_Extract_GetSStream_196> extractor_0_ptr;
        SStreamV3ExtractorType_SV99_Extract_GetSStream_196 * extractor_0 = CreateExtractor_SV99_Extract_GetSStream_196(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_197;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_197> sorter_Process_197_ptr (new SorterType_Process_197(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_197));
        SorterType_Process_197 * sorter_Process_197 = sorter_Process_197_ptr.get();
        ULONG sorter_Process_197_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_197, BinaryOutputPolicy<typename SorterType_Process_197::Schema>, BinaryOutputStream, false> OutputerType1_SV99_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV99_Extract> outputer_SV99_Extract_out0_ptr(new OutputerType1_SV99_Extract(sorter_Process_197, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV99_Extract_out0));
        OutputerType1_SV99_Extract * outputer_SV99_Extract_out0 = outputer_SV99_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV99_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_197::Schema row;
            outputer_SV99_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV99_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV99_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV99_Extract
#pragma region SV100_Extract
#if defined(COMPILE_SV100_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_199>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV100_Extract_GetSStream_198;
    SStreamV3ExtractorType_SV100_Extract_GetSStream_198 * CreateExtractor_SV100_Extract_GetSStream_198(unique_ptr<SStreamV3ExtractorType_SV100_Extract_GetSStream_198> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV100_Extract_GetSStream_198(198, "", true/*100*/, UID_GetSStream_198));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV100_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV100_Extract_GetSStream_198> extractor_0_ptr;
        SStreamV3ExtractorType_SV100_Extract_GetSStream_198 * extractor_0 = CreateExtractor_SV100_Extract_GetSStream_198(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_199;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_199> sorter_Process_199_ptr (new SorterType_Process_199(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_199));
        SorterType_Process_199 * sorter_Process_199 = sorter_Process_199_ptr.get();
        ULONG sorter_Process_199_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_199, BinaryOutputPolicy<typename SorterType_Process_199::Schema>, BinaryOutputStream, false> OutputerType1_SV100_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV100_Extract> outputer_SV100_Extract_out0_ptr(new OutputerType1_SV100_Extract(sorter_Process_199, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV100_Extract_out0));
        OutputerType1_SV100_Extract * outputer_SV100_Extract_out0 = outputer_SV100_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV100_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_199::Schema row;
            outputer_SV100_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV100_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV100_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV100_Extract
#pragma region SV101_Extract
#if defined(COMPILE_SV101_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_201>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV101_Extract_GetSStream_200;
    SStreamV3ExtractorType_SV101_Extract_GetSStream_200 * CreateExtractor_SV101_Extract_GetSStream_200(unique_ptr<SStreamV3ExtractorType_SV101_Extract_GetSStream_200> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV101_Extract_GetSStream_200(200, "", true/*100*/, UID_GetSStream_200));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV101_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV101_Extract_GetSStream_200> extractor_0_ptr;
        SStreamV3ExtractorType_SV101_Extract_GetSStream_200 * extractor_0 = CreateExtractor_SV101_Extract_GetSStream_200(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_201;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_201> sorter_Process_201_ptr (new SorterType_Process_201(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_201));
        SorterType_Process_201 * sorter_Process_201 = sorter_Process_201_ptr.get();
        ULONG sorter_Process_201_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_201, BinaryOutputPolicy<typename SorterType_Process_201::Schema>, BinaryOutputStream, false> OutputerType1_SV101_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV101_Extract> outputer_SV101_Extract_out0_ptr(new OutputerType1_SV101_Extract(sorter_Process_201, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV101_Extract_out0));
        OutputerType1_SV101_Extract * outputer_SV101_Extract_out0 = outputer_SV101_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV101_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_201::Schema row;
            outputer_SV101_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV101_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV101_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV101_Extract
#pragma region SV102_Extract
#if defined(COMPILE_SV102_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_203>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV102_Extract_GetSStream_202;
    SStreamV3ExtractorType_SV102_Extract_GetSStream_202 * CreateExtractor_SV102_Extract_GetSStream_202(unique_ptr<SStreamV3ExtractorType_SV102_Extract_GetSStream_202> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV102_Extract_GetSStream_202(202, "", true/*100*/, UID_GetSStream_202));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV102_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV102_Extract_GetSStream_202> extractor_0_ptr;
        SStreamV3ExtractorType_SV102_Extract_GetSStream_202 * extractor_0 = CreateExtractor_SV102_Extract_GetSStream_202(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_203;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_203> sorter_Process_203_ptr (new SorterType_Process_203(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_203));
        SorterType_Process_203 * sorter_Process_203 = sorter_Process_203_ptr.get();
        ULONG sorter_Process_203_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_203, BinaryOutputPolicy<typename SorterType_Process_203::Schema>, BinaryOutputStream, false> OutputerType1_SV102_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV102_Extract> outputer_SV102_Extract_out0_ptr(new OutputerType1_SV102_Extract(sorter_Process_203, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV102_Extract_out0));
        OutputerType1_SV102_Extract * outputer_SV102_Extract_out0 = outputer_SV102_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV102_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_203::Schema row;
            outputer_SV102_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV102_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV102_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV102_Extract
#pragma region SV103_Extract
#if defined(COMPILE_SV103_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_205>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV103_Extract_GetSStream_204;
    SStreamV3ExtractorType_SV103_Extract_GetSStream_204 * CreateExtractor_SV103_Extract_GetSStream_204(unique_ptr<SStreamV3ExtractorType_SV103_Extract_GetSStream_204> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV103_Extract_GetSStream_204(204, "", true/*100*/, UID_GetSStream_204));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV103_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV103_Extract_GetSStream_204> extractor_0_ptr;
        SStreamV3ExtractorType_SV103_Extract_GetSStream_204 * extractor_0 = CreateExtractor_SV103_Extract_GetSStream_204(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_205;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_205> sorter_Process_205_ptr (new SorterType_Process_205(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_205));
        SorterType_Process_205 * sorter_Process_205 = sorter_Process_205_ptr.get();
        ULONG sorter_Process_205_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_205, BinaryOutputPolicy<typename SorterType_Process_205::Schema>, BinaryOutputStream, false> OutputerType1_SV103_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV103_Extract> outputer_SV103_Extract_out0_ptr(new OutputerType1_SV103_Extract(sorter_Process_205, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV103_Extract_out0));
        OutputerType1_SV103_Extract * outputer_SV103_Extract_out0 = outputer_SV103_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV103_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_205::Schema row;
            outputer_SV103_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV103_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV103_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV103_Extract
#pragma region SV104_Extract
#if defined(COMPILE_SV104_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_207>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV104_Extract_GetSStream_206;
    SStreamV3ExtractorType_SV104_Extract_GetSStream_206 * CreateExtractor_SV104_Extract_GetSStream_206(unique_ptr<SStreamV3ExtractorType_SV104_Extract_GetSStream_206> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV104_Extract_GetSStream_206(206, "", true/*100*/, UID_GetSStream_206));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV104_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV104_Extract_GetSStream_206> extractor_0_ptr;
        SStreamV3ExtractorType_SV104_Extract_GetSStream_206 * extractor_0 = CreateExtractor_SV104_Extract_GetSStream_206(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_207;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_207> sorter_Process_207_ptr (new SorterType_Process_207(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_207));
        SorterType_Process_207 * sorter_Process_207 = sorter_Process_207_ptr.get();
        ULONG sorter_Process_207_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_207, BinaryOutputPolicy<typename SorterType_Process_207::Schema>, BinaryOutputStream, false> OutputerType1_SV104_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV104_Extract> outputer_SV104_Extract_out0_ptr(new OutputerType1_SV104_Extract(sorter_Process_207, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV104_Extract_out0));
        OutputerType1_SV104_Extract * outputer_SV104_Extract_out0 = outputer_SV104_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV104_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_207::Schema row;
            outputer_SV104_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV104_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV104_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV104_Extract
#pragma region SV105_Extract
#if defined(COMPILE_SV105_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_209>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV105_Extract_GetSStream_208;
    SStreamV3ExtractorType_SV105_Extract_GetSStream_208 * CreateExtractor_SV105_Extract_GetSStream_208(unique_ptr<SStreamV3ExtractorType_SV105_Extract_GetSStream_208> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV105_Extract_GetSStream_208(208, "", true/*100*/, UID_GetSStream_208));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV105_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV105_Extract_GetSStream_208> extractor_0_ptr;
        SStreamV3ExtractorType_SV105_Extract_GetSStream_208 * extractor_0 = CreateExtractor_SV105_Extract_GetSStream_208(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_209;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_209> sorter_Process_209_ptr (new SorterType_Process_209(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_209));
        SorterType_Process_209 * sorter_Process_209 = sorter_Process_209_ptr.get();
        ULONG sorter_Process_209_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_209, BinaryOutputPolicy<typename SorterType_Process_209::Schema>, BinaryOutputStream, false> OutputerType1_SV105_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV105_Extract> outputer_SV105_Extract_out0_ptr(new OutputerType1_SV105_Extract(sorter_Process_209, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV105_Extract_out0));
        OutputerType1_SV105_Extract * outputer_SV105_Extract_out0 = outputer_SV105_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV105_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_209::Schema row;
            outputer_SV105_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV105_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV105_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV105_Extract
#pragma region SV106_Extract
#if defined(COMPILE_SV106_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_211>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV106_Extract_GetSStream_210;
    SStreamV3ExtractorType_SV106_Extract_GetSStream_210 * CreateExtractor_SV106_Extract_GetSStream_210(unique_ptr<SStreamV3ExtractorType_SV106_Extract_GetSStream_210> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV106_Extract_GetSStream_210(210, "", true/*100*/, UID_GetSStream_210));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV106_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV106_Extract_GetSStream_210> extractor_0_ptr;
        SStreamV3ExtractorType_SV106_Extract_GetSStream_210 * extractor_0 = CreateExtractor_SV106_Extract_GetSStream_210(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_211;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_211> sorter_Process_211_ptr (new SorterType_Process_211(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_211));
        SorterType_Process_211 * sorter_Process_211 = sorter_Process_211_ptr.get();
        ULONG sorter_Process_211_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_211, BinaryOutputPolicy<typename SorterType_Process_211::Schema>, BinaryOutputStream, false> OutputerType1_SV106_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV106_Extract> outputer_SV106_Extract_out0_ptr(new OutputerType1_SV106_Extract(sorter_Process_211, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV106_Extract_out0));
        OutputerType1_SV106_Extract * outputer_SV106_Extract_out0 = outputer_SV106_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV106_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_211::Schema row;
            outputer_SV106_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV106_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV106_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV106_Extract
#pragma region SV107_Extract
#if defined(COMPILE_SV107_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_213>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV107_Extract_GetSStream_212;
    SStreamV3ExtractorType_SV107_Extract_GetSStream_212 * CreateExtractor_SV107_Extract_GetSStream_212(unique_ptr<SStreamV3ExtractorType_SV107_Extract_GetSStream_212> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV107_Extract_GetSStream_212(212, "", true/*100*/, UID_GetSStream_212));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV107_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV107_Extract_GetSStream_212> extractor_0_ptr;
        SStreamV3ExtractorType_SV107_Extract_GetSStream_212 * extractor_0 = CreateExtractor_SV107_Extract_GetSStream_212(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_213;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_213> sorter_Process_213_ptr (new SorterType_Process_213(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_213));
        SorterType_Process_213 * sorter_Process_213 = sorter_Process_213_ptr.get();
        ULONG sorter_Process_213_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_213, BinaryOutputPolicy<typename SorterType_Process_213::Schema>, BinaryOutputStream, false> OutputerType1_SV107_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV107_Extract> outputer_SV107_Extract_out0_ptr(new OutputerType1_SV107_Extract(sorter_Process_213, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV107_Extract_out0));
        OutputerType1_SV107_Extract * outputer_SV107_Extract_out0 = outputer_SV107_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV107_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_213::Schema row;
            outputer_SV107_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV107_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV107_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV107_Extract
#pragma region SV108_Extract
#if defined(COMPILE_SV108_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_215>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV108_Extract_GetSStream_214;
    SStreamV3ExtractorType_SV108_Extract_GetSStream_214 * CreateExtractor_SV108_Extract_GetSStream_214(unique_ptr<SStreamV3ExtractorType_SV108_Extract_GetSStream_214> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV108_Extract_GetSStream_214(214, "", true/*100*/, UID_GetSStream_214));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV108_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV108_Extract_GetSStream_214> extractor_0_ptr;
        SStreamV3ExtractorType_SV108_Extract_GetSStream_214 * extractor_0 = CreateExtractor_SV108_Extract_GetSStream_214(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_215;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_215> sorter_Process_215_ptr (new SorterType_Process_215(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_215));
        SorterType_Process_215 * sorter_Process_215 = sorter_Process_215_ptr.get();
        ULONG sorter_Process_215_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_215, BinaryOutputPolicy<typename SorterType_Process_215::Schema>, BinaryOutputStream, false> OutputerType1_SV108_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV108_Extract> outputer_SV108_Extract_out0_ptr(new OutputerType1_SV108_Extract(sorter_Process_215, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV108_Extract_out0));
        OutputerType1_SV108_Extract * outputer_SV108_Extract_out0 = outputer_SV108_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV108_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_215::Schema row;
            outputer_SV108_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV108_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV108_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV108_Extract
#pragma region SV109_Extract
#if defined(COMPILE_SV109_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_217>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV109_Extract_GetSStream_216;
    SStreamV3ExtractorType_SV109_Extract_GetSStream_216 * CreateExtractor_SV109_Extract_GetSStream_216(unique_ptr<SStreamV3ExtractorType_SV109_Extract_GetSStream_216> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV109_Extract_GetSStream_216(216, "", true/*100*/, UID_GetSStream_216));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV109_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV109_Extract_GetSStream_216> extractor_0_ptr;
        SStreamV3ExtractorType_SV109_Extract_GetSStream_216 * extractor_0 = CreateExtractor_SV109_Extract_GetSStream_216(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_217;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_217> sorter_Process_217_ptr (new SorterType_Process_217(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_217));
        SorterType_Process_217 * sorter_Process_217 = sorter_Process_217_ptr.get();
        ULONG sorter_Process_217_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_217, BinaryOutputPolicy<typename SorterType_Process_217::Schema>, BinaryOutputStream, false> OutputerType1_SV109_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV109_Extract> outputer_SV109_Extract_out0_ptr(new OutputerType1_SV109_Extract(sorter_Process_217, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV109_Extract_out0));
        OutputerType1_SV109_Extract * outputer_SV109_Extract_out0 = outputer_SV109_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV109_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_217::Schema row;
            outputer_SV109_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV109_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV109_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV109_Extract
#pragma region SV110_Extract
#if defined(COMPILE_SV110_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_219>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV110_Extract_GetSStream_218;
    SStreamV3ExtractorType_SV110_Extract_GetSStream_218 * CreateExtractor_SV110_Extract_GetSStream_218(unique_ptr<SStreamV3ExtractorType_SV110_Extract_GetSStream_218> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV110_Extract_GetSStream_218(218, "", true/*100*/, UID_GetSStream_218));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV110_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV110_Extract_GetSStream_218> extractor_0_ptr;
        SStreamV3ExtractorType_SV110_Extract_GetSStream_218 * extractor_0 = CreateExtractor_SV110_Extract_GetSStream_218(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_219;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_219> sorter_Process_219_ptr (new SorterType_Process_219(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_219));
        SorterType_Process_219 * sorter_Process_219 = sorter_Process_219_ptr.get();
        ULONG sorter_Process_219_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_219, BinaryOutputPolicy<typename SorterType_Process_219::Schema>, BinaryOutputStream, false> OutputerType1_SV110_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV110_Extract> outputer_SV110_Extract_out0_ptr(new OutputerType1_SV110_Extract(sorter_Process_219, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV110_Extract_out0));
        OutputerType1_SV110_Extract * outputer_SV110_Extract_out0 = outputer_SV110_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV110_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_219::Schema row;
            outputer_SV110_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV110_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV110_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV110_Extract
#pragma region SV111_Extract
#if defined(COMPILE_SV111_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_221>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV111_Extract_GetSStream_220;
    SStreamV3ExtractorType_SV111_Extract_GetSStream_220 * CreateExtractor_SV111_Extract_GetSStream_220(unique_ptr<SStreamV3ExtractorType_SV111_Extract_GetSStream_220> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV111_Extract_GetSStream_220(220, "", true/*100*/, UID_GetSStream_220));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV111_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV111_Extract_GetSStream_220> extractor_0_ptr;
        SStreamV3ExtractorType_SV111_Extract_GetSStream_220 * extractor_0 = CreateExtractor_SV111_Extract_GetSStream_220(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_221;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_221> sorter_Process_221_ptr (new SorterType_Process_221(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_221));
        SorterType_Process_221 * sorter_Process_221 = sorter_Process_221_ptr.get();
        ULONG sorter_Process_221_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_221, BinaryOutputPolicy<typename SorterType_Process_221::Schema>, BinaryOutputStream, false> OutputerType1_SV111_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV111_Extract> outputer_SV111_Extract_out0_ptr(new OutputerType1_SV111_Extract(sorter_Process_221, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV111_Extract_out0));
        OutputerType1_SV111_Extract * outputer_SV111_Extract_out0 = outputer_SV111_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV111_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_221::Schema row;
            outputer_SV111_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV111_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV111_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV111_Extract
#pragma region SV112_Extract
#if defined(COMPILE_SV112_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_223>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV112_Extract_GetSStream_222;
    SStreamV3ExtractorType_SV112_Extract_GetSStream_222 * CreateExtractor_SV112_Extract_GetSStream_222(unique_ptr<SStreamV3ExtractorType_SV112_Extract_GetSStream_222> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV112_Extract_GetSStream_222(222, "", true/*100*/, UID_GetSStream_222));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV112_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV112_Extract_GetSStream_222> extractor_0_ptr;
        SStreamV3ExtractorType_SV112_Extract_GetSStream_222 * extractor_0 = CreateExtractor_SV112_Extract_GetSStream_222(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_223;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_223> sorter_Process_223_ptr (new SorterType_Process_223(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_223));
        SorterType_Process_223 * sorter_Process_223 = sorter_Process_223_ptr.get();
        ULONG sorter_Process_223_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_223, BinaryOutputPolicy<typename SorterType_Process_223::Schema>, BinaryOutputStream, false> OutputerType1_SV112_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV112_Extract> outputer_SV112_Extract_out0_ptr(new OutputerType1_SV112_Extract(sorter_Process_223, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV112_Extract_out0));
        OutputerType1_SV112_Extract * outputer_SV112_Extract_out0 = outputer_SV112_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV112_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_223::Schema row;
            outputer_SV112_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV112_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV112_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV112_Extract
#pragma region SV113_Extract
#if defined(COMPILE_SV113_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_225>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV113_Extract_GetSStream_224;
    SStreamV3ExtractorType_SV113_Extract_GetSStream_224 * CreateExtractor_SV113_Extract_GetSStream_224(unique_ptr<SStreamV3ExtractorType_SV113_Extract_GetSStream_224> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV113_Extract_GetSStream_224(224, "", true/*100*/, UID_GetSStream_224));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV113_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV113_Extract_GetSStream_224> extractor_0_ptr;
        SStreamV3ExtractorType_SV113_Extract_GetSStream_224 * extractor_0 = CreateExtractor_SV113_Extract_GetSStream_224(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_225;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_225> sorter_Process_225_ptr (new SorterType_Process_225(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_225));
        SorterType_Process_225 * sorter_Process_225 = sorter_Process_225_ptr.get();
        ULONG sorter_Process_225_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_225, BinaryOutputPolicy<typename SorterType_Process_225::Schema>, BinaryOutputStream, false> OutputerType1_SV113_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV113_Extract> outputer_SV113_Extract_out0_ptr(new OutputerType1_SV113_Extract(sorter_Process_225, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV113_Extract_out0));
        OutputerType1_SV113_Extract * outputer_SV113_Extract_out0 = outputer_SV113_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV113_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_225::Schema row;
            outputer_SV113_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV113_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV113_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV113_Extract
#pragma region SV114_Extract
#if defined(COMPILE_SV114_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_227>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV114_Extract_GetSStream_226;
    SStreamV3ExtractorType_SV114_Extract_GetSStream_226 * CreateExtractor_SV114_Extract_GetSStream_226(unique_ptr<SStreamV3ExtractorType_SV114_Extract_GetSStream_226> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV114_Extract_GetSStream_226(226, "", true/*100*/, UID_GetSStream_226));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV114_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV114_Extract_GetSStream_226> extractor_0_ptr;
        SStreamV3ExtractorType_SV114_Extract_GetSStream_226 * extractor_0 = CreateExtractor_SV114_Extract_GetSStream_226(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_227;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_227> sorter_Process_227_ptr (new SorterType_Process_227(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_227));
        SorterType_Process_227 * sorter_Process_227 = sorter_Process_227_ptr.get();
        ULONG sorter_Process_227_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_227, BinaryOutputPolicy<typename SorterType_Process_227::Schema>, BinaryOutputStream, false> OutputerType1_SV114_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV114_Extract> outputer_SV114_Extract_out0_ptr(new OutputerType1_SV114_Extract(sorter_Process_227, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV114_Extract_out0));
        OutputerType1_SV114_Extract * outputer_SV114_Extract_out0 = outputer_SV114_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV114_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_227::Schema row;
            outputer_SV114_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV114_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV114_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV114_Extract
#pragma region SV115_Extract
#if defined(COMPILE_SV115_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_229>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV115_Extract_GetSStream_228;
    SStreamV3ExtractorType_SV115_Extract_GetSStream_228 * CreateExtractor_SV115_Extract_GetSStream_228(unique_ptr<SStreamV3ExtractorType_SV115_Extract_GetSStream_228> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV115_Extract_GetSStream_228(228, "", true/*100*/, UID_GetSStream_228));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV115_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV115_Extract_GetSStream_228> extractor_0_ptr;
        SStreamV3ExtractorType_SV115_Extract_GetSStream_228 * extractor_0 = CreateExtractor_SV115_Extract_GetSStream_228(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_229;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_229> sorter_Process_229_ptr (new SorterType_Process_229(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_229));
        SorterType_Process_229 * sorter_Process_229 = sorter_Process_229_ptr.get();
        ULONG sorter_Process_229_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_229, BinaryOutputPolicy<typename SorterType_Process_229::Schema>, BinaryOutputStream, false> OutputerType1_SV115_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV115_Extract> outputer_SV115_Extract_out0_ptr(new OutputerType1_SV115_Extract(sorter_Process_229, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV115_Extract_out0));
        OutputerType1_SV115_Extract * outputer_SV115_Extract_out0 = outputer_SV115_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV115_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_229::Schema row;
            outputer_SV115_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV115_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV115_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV115_Extract
#pragma region SV116_Extract
#if defined(COMPILE_SV116_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_231>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV116_Extract_GetSStream_230;
    SStreamV3ExtractorType_SV116_Extract_GetSStream_230 * CreateExtractor_SV116_Extract_GetSStream_230(unique_ptr<SStreamV3ExtractorType_SV116_Extract_GetSStream_230> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV116_Extract_GetSStream_230(230, "", true/*100*/, UID_GetSStream_230));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV116_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV116_Extract_GetSStream_230> extractor_0_ptr;
        SStreamV3ExtractorType_SV116_Extract_GetSStream_230 * extractor_0 = CreateExtractor_SV116_Extract_GetSStream_230(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_231;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_231> sorter_Process_231_ptr (new SorterType_Process_231(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_231));
        SorterType_Process_231 * sorter_Process_231 = sorter_Process_231_ptr.get();
        ULONG sorter_Process_231_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_231, BinaryOutputPolicy<typename SorterType_Process_231::Schema>, BinaryOutputStream, false> OutputerType1_SV116_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV116_Extract> outputer_SV116_Extract_out0_ptr(new OutputerType1_SV116_Extract(sorter_Process_231, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV116_Extract_out0));
        OutputerType1_SV116_Extract * outputer_SV116_Extract_out0 = outputer_SV116_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV116_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_231::Schema row;
            outputer_SV116_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV116_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV116_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV116_Extract
#pragma region SV117_Extract
#if defined(COMPILE_SV117_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_233>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV117_Extract_GetSStream_232;
    SStreamV3ExtractorType_SV117_Extract_GetSStream_232 * CreateExtractor_SV117_Extract_GetSStream_232(unique_ptr<SStreamV3ExtractorType_SV117_Extract_GetSStream_232> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV117_Extract_GetSStream_232(232, "", true/*100*/, UID_GetSStream_232));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV117_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV117_Extract_GetSStream_232> extractor_0_ptr;
        SStreamV3ExtractorType_SV117_Extract_GetSStream_232 * extractor_0 = CreateExtractor_SV117_Extract_GetSStream_232(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_233;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_233> sorter_Process_233_ptr (new SorterType_Process_233(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_233));
        SorterType_Process_233 * sorter_Process_233 = sorter_Process_233_ptr.get();
        ULONG sorter_Process_233_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_233, BinaryOutputPolicy<typename SorterType_Process_233::Schema>, BinaryOutputStream, false> OutputerType1_SV117_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV117_Extract> outputer_SV117_Extract_out0_ptr(new OutputerType1_SV117_Extract(sorter_Process_233, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV117_Extract_out0));
        OutputerType1_SV117_Extract * outputer_SV117_Extract_out0 = outputer_SV117_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV117_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_233::Schema row;
            outputer_SV117_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV117_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV117_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV117_Extract
#pragma region SV118_Extract
#if defined(COMPILE_SV118_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_235>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV118_Extract_GetSStream_234;
    SStreamV3ExtractorType_SV118_Extract_GetSStream_234 * CreateExtractor_SV118_Extract_GetSStream_234(unique_ptr<SStreamV3ExtractorType_SV118_Extract_GetSStream_234> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV118_Extract_GetSStream_234(234, "", true/*100*/, UID_GetSStream_234));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV118_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV118_Extract_GetSStream_234> extractor_0_ptr;
        SStreamV3ExtractorType_SV118_Extract_GetSStream_234 * extractor_0 = CreateExtractor_SV118_Extract_GetSStream_234(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_235;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_235> sorter_Process_235_ptr (new SorterType_Process_235(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_235));
        SorterType_Process_235 * sorter_Process_235 = sorter_Process_235_ptr.get();
        ULONG sorter_Process_235_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_235, BinaryOutputPolicy<typename SorterType_Process_235::Schema>, BinaryOutputStream, false> OutputerType1_SV118_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV118_Extract> outputer_SV118_Extract_out0_ptr(new OutputerType1_SV118_Extract(sorter_Process_235, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV118_Extract_out0));
        OutputerType1_SV118_Extract * outputer_SV118_Extract_out0 = outputer_SV118_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV118_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_235::Schema row;
            outputer_SV118_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV118_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV118_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV118_Extract
#pragma region SV119_Extract
#if defined(COMPILE_SV119_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_237>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV119_Extract_GetSStream_236;
    SStreamV3ExtractorType_SV119_Extract_GetSStream_236 * CreateExtractor_SV119_Extract_GetSStream_236(unique_ptr<SStreamV3ExtractorType_SV119_Extract_GetSStream_236> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV119_Extract_GetSStream_236(236, "", true/*100*/, UID_GetSStream_236));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV119_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV119_Extract_GetSStream_236> extractor_0_ptr;
        SStreamV3ExtractorType_SV119_Extract_GetSStream_236 * extractor_0 = CreateExtractor_SV119_Extract_GetSStream_236(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_237;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_237> sorter_Process_237_ptr (new SorterType_Process_237(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_237));
        SorterType_Process_237 * sorter_Process_237 = sorter_Process_237_ptr.get();
        ULONG sorter_Process_237_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_237, BinaryOutputPolicy<typename SorterType_Process_237::Schema>, BinaryOutputStream, false> OutputerType1_SV119_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV119_Extract> outputer_SV119_Extract_out0_ptr(new OutputerType1_SV119_Extract(sorter_Process_237, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV119_Extract_out0));
        OutputerType1_SV119_Extract * outputer_SV119_Extract_out0 = outputer_SV119_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV119_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_237::Schema row;
            outputer_SV119_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV119_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV119_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV119_Extract
#pragma region SV120_Extract
#if defined(COMPILE_SV120_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_239>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV120_Extract_GetSStream_238;
    SStreamV3ExtractorType_SV120_Extract_GetSStream_238 * CreateExtractor_SV120_Extract_GetSStream_238(unique_ptr<SStreamV3ExtractorType_SV120_Extract_GetSStream_238> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV120_Extract_GetSStream_238(238, "", true/*100*/, UID_GetSStream_238));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV120_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV120_Extract_GetSStream_238> extractor_0_ptr;
        SStreamV3ExtractorType_SV120_Extract_GetSStream_238 * extractor_0 = CreateExtractor_SV120_Extract_GetSStream_238(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_239;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_239> sorter_Process_239_ptr (new SorterType_Process_239(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_239));
        SorterType_Process_239 * sorter_Process_239 = sorter_Process_239_ptr.get();
        ULONG sorter_Process_239_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_239, BinaryOutputPolicy<typename SorterType_Process_239::Schema>, BinaryOutputStream, false> OutputerType1_SV120_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV120_Extract> outputer_SV120_Extract_out0_ptr(new OutputerType1_SV120_Extract(sorter_Process_239, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV120_Extract_out0));
        OutputerType1_SV120_Extract * outputer_SV120_Extract_out0 = outputer_SV120_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV120_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_239::Schema row;
            outputer_SV120_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV120_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV120_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV120_Extract
#pragma region SV121_Extract
#if defined(COMPILE_SV121_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_241>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV121_Extract_GetSStream_240;
    SStreamV3ExtractorType_SV121_Extract_GetSStream_240 * CreateExtractor_SV121_Extract_GetSStream_240(unique_ptr<SStreamV3ExtractorType_SV121_Extract_GetSStream_240> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV121_Extract_GetSStream_240(240, "", true/*100*/, UID_GetSStream_240));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV121_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV121_Extract_GetSStream_240> extractor_0_ptr;
        SStreamV3ExtractorType_SV121_Extract_GetSStream_240 * extractor_0 = CreateExtractor_SV121_Extract_GetSStream_240(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_241;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_241> sorter_Process_241_ptr (new SorterType_Process_241(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_241));
        SorterType_Process_241 * sorter_Process_241 = sorter_Process_241_ptr.get();
        ULONG sorter_Process_241_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_241, BinaryOutputPolicy<typename SorterType_Process_241::Schema>, BinaryOutputStream, false> OutputerType1_SV121_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV121_Extract> outputer_SV121_Extract_out0_ptr(new OutputerType1_SV121_Extract(sorter_Process_241, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV121_Extract_out0));
        OutputerType1_SV121_Extract * outputer_SV121_Extract_out0 = outputer_SV121_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV121_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_241::Schema row;
            outputer_SV121_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV121_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV121_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV121_Extract
#pragma region SV122_Extract
#if defined(COMPILE_SV122_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_243>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV122_Extract_GetSStream_242;
    SStreamV3ExtractorType_SV122_Extract_GetSStream_242 * CreateExtractor_SV122_Extract_GetSStream_242(unique_ptr<SStreamV3ExtractorType_SV122_Extract_GetSStream_242> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV122_Extract_GetSStream_242(242, "", true/*100*/, UID_GetSStream_242));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV122_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV122_Extract_GetSStream_242> extractor_0_ptr;
        SStreamV3ExtractorType_SV122_Extract_GetSStream_242 * extractor_0 = CreateExtractor_SV122_Extract_GetSStream_242(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_243;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_243> sorter_Process_243_ptr (new SorterType_Process_243(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_243));
        SorterType_Process_243 * sorter_Process_243 = sorter_Process_243_ptr.get();
        ULONG sorter_Process_243_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_243, BinaryOutputPolicy<typename SorterType_Process_243::Schema>, BinaryOutputStream, false> OutputerType1_SV122_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV122_Extract> outputer_SV122_Extract_out0_ptr(new OutputerType1_SV122_Extract(sorter_Process_243, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV122_Extract_out0));
        OutputerType1_SV122_Extract * outputer_SV122_Extract_out0 = outputer_SV122_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV122_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_243::Schema row;
            outputer_SV122_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV122_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV122_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV122_Extract
#pragma region SV123_Extract
#if defined(COMPILE_SV123_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_245>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV123_Extract_GetSStream_244;
    SStreamV3ExtractorType_SV123_Extract_GetSStream_244 * CreateExtractor_SV123_Extract_GetSStream_244(unique_ptr<SStreamV3ExtractorType_SV123_Extract_GetSStream_244> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV123_Extract_GetSStream_244(244, "", true/*100*/, UID_GetSStream_244));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV123_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV123_Extract_GetSStream_244> extractor_0_ptr;
        SStreamV3ExtractorType_SV123_Extract_GetSStream_244 * extractor_0 = CreateExtractor_SV123_Extract_GetSStream_244(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_245;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_245> sorter_Process_245_ptr (new SorterType_Process_245(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_245));
        SorterType_Process_245 * sorter_Process_245 = sorter_Process_245_ptr.get();
        ULONG sorter_Process_245_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_245, BinaryOutputPolicy<typename SorterType_Process_245::Schema>, BinaryOutputStream, false> OutputerType1_SV123_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV123_Extract> outputer_SV123_Extract_out0_ptr(new OutputerType1_SV123_Extract(sorter_Process_245, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV123_Extract_out0));
        OutputerType1_SV123_Extract * outputer_SV123_Extract_out0 = outputer_SV123_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV123_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_245::Schema row;
            outputer_SV123_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV123_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV123_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV123_Extract
#pragma region SV124_Extract
#if defined(COMPILE_SV124_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_247>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV124_Extract_GetSStream_246;
    SStreamV3ExtractorType_SV124_Extract_GetSStream_246 * CreateExtractor_SV124_Extract_GetSStream_246(unique_ptr<SStreamV3ExtractorType_SV124_Extract_GetSStream_246> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV124_Extract_GetSStream_246(246, "", true/*100*/, UID_GetSStream_246));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV124_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV124_Extract_GetSStream_246> extractor_0_ptr;
        SStreamV3ExtractorType_SV124_Extract_GetSStream_246 * extractor_0 = CreateExtractor_SV124_Extract_GetSStream_246(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_247;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_247> sorter_Process_247_ptr (new SorterType_Process_247(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_247));
        SorterType_Process_247 * sorter_Process_247 = sorter_Process_247_ptr.get();
        ULONG sorter_Process_247_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_247, BinaryOutputPolicy<typename SorterType_Process_247::Schema>, BinaryOutputStream, false> OutputerType1_SV124_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV124_Extract> outputer_SV124_Extract_out0_ptr(new OutputerType1_SV124_Extract(sorter_Process_247, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV124_Extract_out0));
        OutputerType1_SV124_Extract * outputer_SV124_Extract_out0 = outputer_SV124_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV124_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_247::Schema row;
            outputer_SV124_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV124_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV124_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV124_Extract
#pragma region SV125_Extract
#if defined(COMPILE_SV125_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_249>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV125_Extract_GetSStream_248;
    SStreamV3ExtractorType_SV125_Extract_GetSStream_248 * CreateExtractor_SV125_Extract_GetSStream_248(unique_ptr<SStreamV3ExtractorType_SV125_Extract_GetSStream_248> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV125_Extract_GetSStream_248(248, "", true/*100*/, UID_GetSStream_248));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV125_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV125_Extract_GetSStream_248> extractor_0_ptr;
        SStreamV3ExtractorType_SV125_Extract_GetSStream_248 * extractor_0 = CreateExtractor_SV125_Extract_GetSStream_248(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_249;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_249> sorter_Process_249_ptr (new SorterType_Process_249(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_249));
        SorterType_Process_249 * sorter_Process_249 = sorter_Process_249_ptr.get();
        ULONG sorter_Process_249_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_249, BinaryOutputPolicy<typename SorterType_Process_249::Schema>, BinaryOutputStream, false> OutputerType1_SV125_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV125_Extract> outputer_SV125_Extract_out0_ptr(new OutputerType1_SV125_Extract(sorter_Process_249, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV125_Extract_out0));
        OutputerType1_SV125_Extract * outputer_SV125_Extract_out0 = outputer_SV125_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV125_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_249::Schema row;
            outputer_SV125_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV125_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV125_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV125_Extract
#pragma region SV126_Extract
#if defined(COMPILE_SV126_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_251>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV126_Extract_GetSStream_250;
    SStreamV3ExtractorType_SV126_Extract_GetSStream_250 * CreateExtractor_SV126_Extract_GetSStream_250(unique_ptr<SStreamV3ExtractorType_SV126_Extract_GetSStream_250> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV126_Extract_GetSStream_250(250, "", true/*100*/, UID_GetSStream_250));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV126_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV126_Extract_GetSStream_250> extractor_0_ptr;
        SStreamV3ExtractorType_SV126_Extract_GetSStream_250 * extractor_0 = CreateExtractor_SV126_Extract_GetSStream_250(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_251;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_251> sorter_Process_251_ptr (new SorterType_Process_251(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_251));
        SorterType_Process_251 * sorter_Process_251 = sorter_Process_251_ptr.get();
        ULONG sorter_Process_251_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_251, BinaryOutputPolicy<typename SorterType_Process_251::Schema>, BinaryOutputStream, false> OutputerType1_SV126_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV126_Extract> outputer_SV126_Extract_out0_ptr(new OutputerType1_SV126_Extract(sorter_Process_251, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV126_Extract_out0));
        OutputerType1_SV126_Extract * outputer_SV126_Extract_out0 = outputer_SV126_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV126_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_251::Schema row;
            outputer_SV126_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV126_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV126_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV126_Extract
#pragma region SV127_Extract
#if defined(COMPILE_SV127_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_253>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV127_Extract_GetSStream_252;
    SStreamV3ExtractorType_SV127_Extract_GetSStream_252 * CreateExtractor_SV127_Extract_GetSStream_252(unique_ptr<SStreamV3ExtractorType_SV127_Extract_GetSStream_252> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV127_Extract_GetSStream_252(252, "", true/*100*/, UID_GetSStream_252));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV127_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV127_Extract_GetSStream_252> extractor_0_ptr;
        SStreamV3ExtractorType_SV127_Extract_GetSStream_252 * extractor_0 = CreateExtractor_SV127_Extract_GetSStream_252(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_253;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_253> sorter_Process_253_ptr (new SorterType_Process_253(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_253));
        SorterType_Process_253 * sorter_Process_253 = sorter_Process_253_ptr.get();
        ULONG sorter_Process_253_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_253, BinaryOutputPolicy<typename SorterType_Process_253::Schema>, BinaryOutputStream, false> OutputerType1_SV127_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV127_Extract> outputer_SV127_Extract_out0_ptr(new OutputerType1_SV127_Extract(sorter_Process_253, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV127_Extract_out0));
        OutputerType1_SV127_Extract * outputer_SV127_Extract_out0 = outputer_SV127_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV127_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_253::Schema row;
            outputer_SV127_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV127_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV127_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV127_Extract
#pragma region SV128_Extract
#if defined(COMPILE_SV128_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_255>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV128_Extract_GetSStream_254;
    SStreamV3ExtractorType_SV128_Extract_GetSStream_254 * CreateExtractor_SV128_Extract_GetSStream_254(unique_ptr<SStreamV3ExtractorType_SV128_Extract_GetSStream_254> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV128_Extract_GetSStream_254(254, "", true/*100*/, UID_GetSStream_254));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV128_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV128_Extract_GetSStream_254> extractor_0_ptr;
        SStreamV3ExtractorType_SV128_Extract_GetSStream_254 * extractor_0 = CreateExtractor_SV128_Extract_GetSStream_254(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_255;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_255> sorter_Process_255_ptr (new SorterType_Process_255(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_255));
        SorterType_Process_255 * sorter_Process_255 = sorter_Process_255_ptr.get();
        ULONG sorter_Process_255_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_255, BinaryOutputPolicy<typename SorterType_Process_255::Schema>, BinaryOutputStream, false> OutputerType1_SV128_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV128_Extract> outputer_SV128_Extract_out0_ptr(new OutputerType1_SV128_Extract(sorter_Process_255, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV128_Extract_out0));
        OutputerType1_SV128_Extract * outputer_SV128_Extract_out0 = outputer_SV128_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV128_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_255::Schema row;
            outputer_SV128_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV128_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV128_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV128_Extract
#pragma region SV129_Extract
#if defined(COMPILE_SV129_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_257>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV129_Extract_GetSStream_256;
    SStreamV3ExtractorType_SV129_Extract_GetSStream_256 * CreateExtractor_SV129_Extract_GetSStream_256(unique_ptr<SStreamV3ExtractorType_SV129_Extract_GetSStream_256> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV129_Extract_GetSStream_256(256, "", true/*100*/, UID_GetSStream_256));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV129_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV129_Extract_GetSStream_256> extractor_0_ptr;
        SStreamV3ExtractorType_SV129_Extract_GetSStream_256 * extractor_0 = CreateExtractor_SV129_Extract_GetSStream_256(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_257;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_257> sorter_Process_257_ptr (new SorterType_Process_257(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_257));
        SorterType_Process_257 * sorter_Process_257 = sorter_Process_257_ptr.get();
        ULONG sorter_Process_257_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_257, BinaryOutputPolicy<typename SorterType_Process_257::Schema>, BinaryOutputStream, false> OutputerType1_SV129_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV129_Extract> outputer_SV129_Extract_out0_ptr(new OutputerType1_SV129_Extract(sorter_Process_257, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV129_Extract_out0));
        OutputerType1_SV129_Extract * outputer_SV129_Extract_out0 = outputer_SV129_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV129_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_257::Schema row;
            outputer_SV129_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV129_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV129_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV129_Extract
#pragma region SV130_Extract
#if defined(COMPILE_SV130_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_259>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV130_Extract_GetSStream_258;
    SStreamV3ExtractorType_SV130_Extract_GetSStream_258 * CreateExtractor_SV130_Extract_GetSStream_258(unique_ptr<SStreamV3ExtractorType_SV130_Extract_GetSStream_258> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV130_Extract_GetSStream_258(258, "", true/*100*/, UID_GetSStream_258));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV130_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV130_Extract_GetSStream_258> extractor_0_ptr;
        SStreamV3ExtractorType_SV130_Extract_GetSStream_258 * extractor_0 = CreateExtractor_SV130_Extract_GetSStream_258(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_259;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_259> sorter_Process_259_ptr (new SorterType_Process_259(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_259));
        SorterType_Process_259 * sorter_Process_259 = sorter_Process_259_ptr.get();
        ULONG sorter_Process_259_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_259, BinaryOutputPolicy<typename SorterType_Process_259::Schema>, BinaryOutputStream, false> OutputerType1_SV130_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV130_Extract> outputer_SV130_Extract_out0_ptr(new OutputerType1_SV130_Extract(sorter_Process_259, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV130_Extract_out0));
        OutputerType1_SV130_Extract * outputer_SV130_Extract_out0 = outputer_SV130_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV130_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_259::Schema row;
            outputer_SV130_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV130_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV130_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV130_Extract
#pragma region SV131_Extract
#if defined(COMPILE_SV131_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_261>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV131_Extract_GetSStream_260;
    SStreamV3ExtractorType_SV131_Extract_GetSStream_260 * CreateExtractor_SV131_Extract_GetSStream_260(unique_ptr<SStreamV3ExtractorType_SV131_Extract_GetSStream_260> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV131_Extract_GetSStream_260(260, "", true/*100*/, UID_GetSStream_260));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV131_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV131_Extract_GetSStream_260> extractor_0_ptr;
        SStreamV3ExtractorType_SV131_Extract_GetSStream_260 * extractor_0 = CreateExtractor_SV131_Extract_GetSStream_260(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_261;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_261> sorter_Process_261_ptr (new SorterType_Process_261(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_261));
        SorterType_Process_261 * sorter_Process_261 = sorter_Process_261_ptr.get();
        ULONG sorter_Process_261_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_261, BinaryOutputPolicy<typename SorterType_Process_261::Schema>, BinaryOutputStream, false> OutputerType1_SV131_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV131_Extract> outputer_SV131_Extract_out0_ptr(new OutputerType1_SV131_Extract(sorter_Process_261, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV131_Extract_out0));
        OutputerType1_SV131_Extract * outputer_SV131_Extract_out0 = outputer_SV131_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV131_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_261::Schema row;
            outputer_SV131_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV131_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV131_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV131_Extract
#pragma region SV132_Extract
#if defined(COMPILE_SV132_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_263>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV132_Extract_GetSStream_262;
    SStreamV3ExtractorType_SV132_Extract_GetSStream_262 * CreateExtractor_SV132_Extract_GetSStream_262(unique_ptr<SStreamV3ExtractorType_SV132_Extract_GetSStream_262> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV132_Extract_GetSStream_262(262, "", true/*100*/, UID_GetSStream_262));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV132_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV132_Extract_GetSStream_262> extractor_0_ptr;
        SStreamV3ExtractorType_SV132_Extract_GetSStream_262 * extractor_0 = CreateExtractor_SV132_Extract_GetSStream_262(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_263;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_263> sorter_Process_263_ptr (new SorterType_Process_263(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_263));
        SorterType_Process_263 * sorter_Process_263 = sorter_Process_263_ptr.get();
        ULONG sorter_Process_263_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_263, BinaryOutputPolicy<typename SorterType_Process_263::Schema>, BinaryOutputStream, false> OutputerType1_SV132_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV132_Extract> outputer_SV132_Extract_out0_ptr(new OutputerType1_SV132_Extract(sorter_Process_263, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV132_Extract_out0));
        OutputerType1_SV132_Extract * outputer_SV132_Extract_out0 = outputer_SV132_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV132_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_263::Schema row;
            outputer_SV132_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV132_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV132_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV132_Extract
#pragma region SV133_Extract
#if defined(COMPILE_SV133_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_265>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV133_Extract_GetSStream_264;
    SStreamV3ExtractorType_SV133_Extract_GetSStream_264 * CreateExtractor_SV133_Extract_GetSStream_264(unique_ptr<SStreamV3ExtractorType_SV133_Extract_GetSStream_264> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV133_Extract_GetSStream_264(264, "", true/*100*/, UID_GetSStream_264));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV133_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV133_Extract_GetSStream_264> extractor_0_ptr;
        SStreamV3ExtractorType_SV133_Extract_GetSStream_264 * extractor_0 = CreateExtractor_SV133_Extract_GetSStream_264(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_265;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_265> sorter_Process_265_ptr (new SorterType_Process_265(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_265));
        SorterType_Process_265 * sorter_Process_265 = sorter_Process_265_ptr.get();
        ULONG sorter_Process_265_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_265, BinaryOutputPolicy<typename SorterType_Process_265::Schema>, BinaryOutputStream, false> OutputerType1_SV133_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV133_Extract> outputer_SV133_Extract_out0_ptr(new OutputerType1_SV133_Extract(sorter_Process_265, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV133_Extract_out0));
        OutputerType1_SV133_Extract * outputer_SV133_Extract_out0 = outputer_SV133_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV133_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_265::Schema row;
            outputer_SV133_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV133_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV133_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV133_Extract
#pragma region SV134_Extract
#if defined(COMPILE_SV134_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_267>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV134_Extract_GetSStream_266;
    SStreamV3ExtractorType_SV134_Extract_GetSStream_266 * CreateExtractor_SV134_Extract_GetSStream_266(unique_ptr<SStreamV3ExtractorType_SV134_Extract_GetSStream_266> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV134_Extract_GetSStream_266(266, "", true/*100*/, UID_GetSStream_266));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV134_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV134_Extract_GetSStream_266> extractor_0_ptr;
        SStreamV3ExtractorType_SV134_Extract_GetSStream_266 * extractor_0 = CreateExtractor_SV134_Extract_GetSStream_266(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_267;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_267> sorter_Process_267_ptr (new SorterType_Process_267(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_267));
        SorterType_Process_267 * sorter_Process_267 = sorter_Process_267_ptr.get();
        ULONG sorter_Process_267_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_267, BinaryOutputPolicy<typename SorterType_Process_267::Schema>, BinaryOutputStream, false> OutputerType1_SV134_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV134_Extract> outputer_SV134_Extract_out0_ptr(new OutputerType1_SV134_Extract(sorter_Process_267, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV134_Extract_out0));
        OutputerType1_SV134_Extract * outputer_SV134_Extract_out0 = outputer_SV134_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV134_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_267::Schema row;
            outputer_SV134_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV134_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV134_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV134_Extract
#pragma region SV135_Extract
#if defined(COMPILE_SV135_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_269>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV135_Extract_GetSStream_268;
    SStreamV3ExtractorType_SV135_Extract_GetSStream_268 * CreateExtractor_SV135_Extract_GetSStream_268(unique_ptr<SStreamV3ExtractorType_SV135_Extract_GetSStream_268> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV135_Extract_GetSStream_268(268, "", true/*100*/, UID_GetSStream_268));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV135_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV135_Extract_GetSStream_268> extractor_0_ptr;
        SStreamV3ExtractorType_SV135_Extract_GetSStream_268 * extractor_0 = CreateExtractor_SV135_Extract_GetSStream_268(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_269;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_269> sorter_Process_269_ptr (new SorterType_Process_269(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_269));
        SorterType_Process_269 * sorter_Process_269 = sorter_Process_269_ptr.get();
        ULONG sorter_Process_269_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_269, BinaryOutputPolicy<typename SorterType_Process_269::Schema>, BinaryOutputStream, false> OutputerType1_SV135_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV135_Extract> outputer_SV135_Extract_out0_ptr(new OutputerType1_SV135_Extract(sorter_Process_269, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV135_Extract_out0));
        OutputerType1_SV135_Extract * outputer_SV135_Extract_out0 = outputer_SV135_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV135_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_269::Schema row;
            outputer_SV135_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV135_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV135_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV135_Extract
#pragma region SV136_Extract
#if defined(COMPILE_SV136_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_271>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV136_Extract_GetSStream_270;
    SStreamV3ExtractorType_SV136_Extract_GetSStream_270 * CreateExtractor_SV136_Extract_GetSStream_270(unique_ptr<SStreamV3ExtractorType_SV136_Extract_GetSStream_270> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV136_Extract_GetSStream_270(270, "", true/*100*/, UID_GetSStream_270));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV136_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV136_Extract_GetSStream_270> extractor_0_ptr;
        SStreamV3ExtractorType_SV136_Extract_GetSStream_270 * extractor_0 = CreateExtractor_SV136_Extract_GetSStream_270(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_271;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_271> sorter_Process_271_ptr (new SorterType_Process_271(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_271));
        SorterType_Process_271 * sorter_Process_271 = sorter_Process_271_ptr.get();
        ULONG sorter_Process_271_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_271, BinaryOutputPolicy<typename SorterType_Process_271::Schema>, BinaryOutputStream, false> OutputerType1_SV136_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV136_Extract> outputer_SV136_Extract_out0_ptr(new OutputerType1_SV136_Extract(sorter_Process_271, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV136_Extract_out0));
        OutputerType1_SV136_Extract * outputer_SV136_Extract_out0 = outputer_SV136_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV136_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_271::Schema row;
            outputer_SV136_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV136_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV136_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV136_Extract
#pragma region SV137_Extract
#if defined(COMPILE_SV137_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_273>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV137_Extract_GetSStream_272;
    SStreamV3ExtractorType_SV137_Extract_GetSStream_272 * CreateExtractor_SV137_Extract_GetSStream_272(unique_ptr<SStreamV3ExtractorType_SV137_Extract_GetSStream_272> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV137_Extract_GetSStream_272(272, "", true/*100*/, UID_GetSStream_272));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV137_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV137_Extract_GetSStream_272> extractor_0_ptr;
        SStreamV3ExtractorType_SV137_Extract_GetSStream_272 * extractor_0 = CreateExtractor_SV137_Extract_GetSStream_272(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_273;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_273> sorter_Process_273_ptr (new SorterType_Process_273(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_273));
        SorterType_Process_273 * sorter_Process_273 = sorter_Process_273_ptr.get();
        ULONG sorter_Process_273_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_273, BinaryOutputPolicy<typename SorterType_Process_273::Schema>, BinaryOutputStream, false> OutputerType1_SV137_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV137_Extract> outputer_SV137_Extract_out0_ptr(new OutputerType1_SV137_Extract(sorter_Process_273, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV137_Extract_out0));
        OutputerType1_SV137_Extract * outputer_SV137_Extract_out0 = outputer_SV137_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV137_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_273::Schema row;
            outputer_SV137_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV137_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV137_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV137_Extract
#pragma region SV138_Extract
#if defined(COMPILE_SV138_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_275>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV138_Extract_GetSStream_274;
    SStreamV3ExtractorType_SV138_Extract_GetSStream_274 * CreateExtractor_SV138_Extract_GetSStream_274(unique_ptr<SStreamV3ExtractorType_SV138_Extract_GetSStream_274> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV138_Extract_GetSStream_274(274, "", true/*100*/, UID_GetSStream_274));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV138_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV138_Extract_GetSStream_274> extractor_0_ptr;
        SStreamV3ExtractorType_SV138_Extract_GetSStream_274 * extractor_0 = CreateExtractor_SV138_Extract_GetSStream_274(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_275;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_275> sorter_Process_275_ptr (new SorterType_Process_275(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_275));
        SorterType_Process_275 * sorter_Process_275 = sorter_Process_275_ptr.get();
        ULONG sorter_Process_275_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_275, BinaryOutputPolicy<typename SorterType_Process_275::Schema>, BinaryOutputStream, false> OutputerType1_SV138_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV138_Extract> outputer_SV138_Extract_out0_ptr(new OutputerType1_SV138_Extract(sorter_Process_275, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV138_Extract_out0));
        OutputerType1_SV138_Extract * outputer_SV138_Extract_out0 = outputer_SV138_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV138_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_275::Schema row;
            outputer_SV138_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV138_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV138_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV138_Extract
#pragma region SV139_Extract
#if defined(COMPILE_SV139_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_277>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV139_Extract_GetSStream_276;
    SStreamV3ExtractorType_SV139_Extract_GetSStream_276 * CreateExtractor_SV139_Extract_GetSStream_276(unique_ptr<SStreamV3ExtractorType_SV139_Extract_GetSStream_276> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV139_Extract_GetSStream_276(276, "", true/*100*/, UID_GetSStream_276));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV139_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV139_Extract_GetSStream_276> extractor_0_ptr;
        SStreamV3ExtractorType_SV139_Extract_GetSStream_276 * extractor_0 = CreateExtractor_SV139_Extract_GetSStream_276(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_277;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_277> sorter_Process_277_ptr (new SorterType_Process_277(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_277));
        SorterType_Process_277 * sorter_Process_277 = sorter_Process_277_ptr.get();
        ULONG sorter_Process_277_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_277, BinaryOutputPolicy<typename SorterType_Process_277::Schema>, BinaryOutputStream, false> OutputerType1_SV139_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV139_Extract> outputer_SV139_Extract_out0_ptr(new OutputerType1_SV139_Extract(sorter_Process_277, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV139_Extract_out0));
        OutputerType1_SV139_Extract * outputer_SV139_Extract_out0 = outputer_SV139_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV139_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_277::Schema row;
            outputer_SV139_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV139_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV139_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV139_Extract
#pragma region SV140_Extract
#if defined(COMPILE_SV140_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_279>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV140_Extract_GetSStream_278;
    SStreamV3ExtractorType_SV140_Extract_GetSStream_278 * CreateExtractor_SV140_Extract_GetSStream_278(unique_ptr<SStreamV3ExtractorType_SV140_Extract_GetSStream_278> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV140_Extract_GetSStream_278(278, "", true/*100*/, UID_GetSStream_278));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV140_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV140_Extract_GetSStream_278> extractor_0_ptr;
        SStreamV3ExtractorType_SV140_Extract_GetSStream_278 * extractor_0 = CreateExtractor_SV140_Extract_GetSStream_278(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_279;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_279> sorter_Process_279_ptr (new SorterType_Process_279(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_279));
        SorterType_Process_279 * sorter_Process_279 = sorter_Process_279_ptr.get();
        ULONG sorter_Process_279_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_279, BinaryOutputPolicy<typename SorterType_Process_279::Schema>, BinaryOutputStream, false> OutputerType1_SV140_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV140_Extract> outputer_SV140_Extract_out0_ptr(new OutputerType1_SV140_Extract(sorter_Process_279, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV140_Extract_out0));
        OutputerType1_SV140_Extract * outputer_SV140_Extract_out0 = outputer_SV140_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV140_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_279::Schema row;
            outputer_SV140_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV140_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV140_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV140_Extract
#pragma region SV141_Extract
#if defined(COMPILE_SV141_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_281>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV141_Extract_GetSStream_280;
    SStreamV3ExtractorType_SV141_Extract_GetSStream_280 * CreateExtractor_SV141_Extract_GetSStream_280(unique_ptr<SStreamV3ExtractorType_SV141_Extract_GetSStream_280> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV141_Extract_GetSStream_280(280, "", true/*100*/, UID_GetSStream_280));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV141_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV141_Extract_GetSStream_280> extractor_0_ptr;
        SStreamV3ExtractorType_SV141_Extract_GetSStream_280 * extractor_0 = CreateExtractor_SV141_Extract_GetSStream_280(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_281;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_281> sorter_Process_281_ptr (new SorterType_Process_281(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_281));
        SorterType_Process_281 * sorter_Process_281 = sorter_Process_281_ptr.get();
        ULONG sorter_Process_281_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_281, BinaryOutputPolicy<typename SorterType_Process_281::Schema>, BinaryOutputStream, false> OutputerType1_SV141_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV141_Extract> outputer_SV141_Extract_out0_ptr(new OutputerType1_SV141_Extract(sorter_Process_281, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV141_Extract_out0));
        OutputerType1_SV141_Extract * outputer_SV141_Extract_out0 = outputer_SV141_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV141_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_281::Schema row;
            outputer_SV141_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV141_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV141_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV141_Extract
#pragma region SV142_Extract
#if defined(COMPILE_SV142_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_283>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV142_Extract_GetSStream_282;
    SStreamV3ExtractorType_SV142_Extract_GetSStream_282 * CreateExtractor_SV142_Extract_GetSStream_282(unique_ptr<SStreamV3ExtractorType_SV142_Extract_GetSStream_282> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV142_Extract_GetSStream_282(282, "", true/*100*/, UID_GetSStream_282));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV142_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV142_Extract_GetSStream_282> extractor_0_ptr;
        SStreamV3ExtractorType_SV142_Extract_GetSStream_282 * extractor_0 = CreateExtractor_SV142_Extract_GetSStream_282(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_283;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_283> sorter_Process_283_ptr (new SorterType_Process_283(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_283));
        SorterType_Process_283 * sorter_Process_283 = sorter_Process_283_ptr.get();
        ULONG sorter_Process_283_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_283, BinaryOutputPolicy<typename SorterType_Process_283::Schema>, BinaryOutputStream, false> OutputerType1_SV142_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV142_Extract> outputer_SV142_Extract_out0_ptr(new OutputerType1_SV142_Extract(sorter_Process_283, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV142_Extract_out0));
        OutputerType1_SV142_Extract * outputer_SV142_Extract_out0 = outputer_SV142_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV142_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_283::Schema row;
            outputer_SV142_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV142_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV142_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV142_Extract
#pragma region SV143_Extract
#if defined(COMPILE_SV143_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_285>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV143_Extract_GetSStream_284;
    SStreamV3ExtractorType_SV143_Extract_GetSStream_284 * CreateExtractor_SV143_Extract_GetSStream_284(unique_ptr<SStreamV3ExtractorType_SV143_Extract_GetSStream_284> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV143_Extract_GetSStream_284(284, "", true/*100*/, UID_GetSStream_284));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV143_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV143_Extract_GetSStream_284> extractor_0_ptr;
        SStreamV3ExtractorType_SV143_Extract_GetSStream_284 * extractor_0 = CreateExtractor_SV143_Extract_GetSStream_284(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_285;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_285> sorter_Process_285_ptr (new SorterType_Process_285(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_285));
        SorterType_Process_285 * sorter_Process_285 = sorter_Process_285_ptr.get();
        ULONG sorter_Process_285_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_285, BinaryOutputPolicy<typename SorterType_Process_285::Schema>, BinaryOutputStream, false> OutputerType1_SV143_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV143_Extract> outputer_SV143_Extract_out0_ptr(new OutputerType1_SV143_Extract(sorter_Process_285, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV143_Extract_out0));
        OutputerType1_SV143_Extract * outputer_SV143_Extract_out0 = outputer_SV143_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV143_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_285::Schema row;
            outputer_SV143_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV143_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV143_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV143_Extract
#pragma region SV144_Extract
#if defined(COMPILE_SV144_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_287>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV144_Extract_GetSStream_286;
    SStreamV3ExtractorType_SV144_Extract_GetSStream_286 * CreateExtractor_SV144_Extract_GetSStream_286(unique_ptr<SStreamV3ExtractorType_SV144_Extract_GetSStream_286> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV144_Extract_GetSStream_286(286, "", true/*100*/, UID_GetSStream_286));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV144_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV144_Extract_GetSStream_286> extractor_0_ptr;
        SStreamV3ExtractorType_SV144_Extract_GetSStream_286 * extractor_0 = CreateExtractor_SV144_Extract_GetSStream_286(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_287;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_287> sorter_Process_287_ptr (new SorterType_Process_287(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_287));
        SorterType_Process_287 * sorter_Process_287 = sorter_Process_287_ptr.get();
        ULONG sorter_Process_287_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_287, BinaryOutputPolicy<typename SorterType_Process_287::Schema>, BinaryOutputStream, false> OutputerType1_SV144_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV144_Extract> outputer_SV144_Extract_out0_ptr(new OutputerType1_SV144_Extract(sorter_Process_287, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV144_Extract_out0));
        OutputerType1_SV144_Extract * outputer_SV144_Extract_out0 = outputer_SV144_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV144_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_287::Schema row;
            outputer_SV144_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV144_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV144_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV144_Extract
#pragma region SV145_Extract
#if defined(COMPILE_SV145_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_289>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV145_Extract_GetSStream_288;
    SStreamV3ExtractorType_SV145_Extract_GetSStream_288 * CreateExtractor_SV145_Extract_GetSStream_288(unique_ptr<SStreamV3ExtractorType_SV145_Extract_GetSStream_288> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV145_Extract_GetSStream_288(288, "", true/*100*/, UID_GetSStream_288));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV145_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV145_Extract_GetSStream_288> extractor_0_ptr;
        SStreamV3ExtractorType_SV145_Extract_GetSStream_288 * extractor_0 = CreateExtractor_SV145_Extract_GetSStream_288(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_289;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_289> sorter_Process_289_ptr (new SorterType_Process_289(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_289));
        SorterType_Process_289 * sorter_Process_289 = sorter_Process_289_ptr.get();
        ULONG sorter_Process_289_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_289, BinaryOutputPolicy<typename SorterType_Process_289::Schema>, BinaryOutputStream, false> OutputerType1_SV145_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV145_Extract> outputer_SV145_Extract_out0_ptr(new OutputerType1_SV145_Extract(sorter_Process_289, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV145_Extract_out0));
        OutputerType1_SV145_Extract * outputer_SV145_Extract_out0 = outputer_SV145_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV145_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_289::Schema row;
            outputer_SV145_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV145_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV145_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV145_Extract
#pragma region SV146_Extract
#if defined(COMPILE_SV146_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_291>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV146_Extract_GetSStream_290;
    SStreamV3ExtractorType_SV146_Extract_GetSStream_290 * CreateExtractor_SV146_Extract_GetSStream_290(unique_ptr<SStreamV3ExtractorType_SV146_Extract_GetSStream_290> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV146_Extract_GetSStream_290(290, "", true/*100*/, UID_GetSStream_290));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV146_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV146_Extract_GetSStream_290> extractor_0_ptr;
        SStreamV3ExtractorType_SV146_Extract_GetSStream_290 * extractor_0 = CreateExtractor_SV146_Extract_GetSStream_290(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_291;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_291> sorter_Process_291_ptr (new SorterType_Process_291(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_291));
        SorterType_Process_291 * sorter_Process_291 = sorter_Process_291_ptr.get();
        ULONG sorter_Process_291_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_291, BinaryOutputPolicy<typename SorterType_Process_291::Schema>, BinaryOutputStream, false> OutputerType1_SV146_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV146_Extract> outputer_SV146_Extract_out0_ptr(new OutputerType1_SV146_Extract(sorter_Process_291, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV146_Extract_out0));
        OutputerType1_SV146_Extract * outputer_SV146_Extract_out0 = outputer_SV146_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV146_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_291::Schema row;
            outputer_SV146_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV146_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV146_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV146_Extract
#pragma region SV147_Extract
#if defined(COMPILE_SV147_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_293>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV147_Extract_GetSStream_292;
    SStreamV3ExtractorType_SV147_Extract_GetSStream_292 * CreateExtractor_SV147_Extract_GetSStream_292(unique_ptr<SStreamV3ExtractorType_SV147_Extract_GetSStream_292> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV147_Extract_GetSStream_292(292, "", true/*100*/, UID_GetSStream_292));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV147_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV147_Extract_GetSStream_292> extractor_0_ptr;
        SStreamV3ExtractorType_SV147_Extract_GetSStream_292 * extractor_0 = CreateExtractor_SV147_Extract_GetSStream_292(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_293;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_293> sorter_Process_293_ptr (new SorterType_Process_293(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_293));
        SorterType_Process_293 * sorter_Process_293 = sorter_Process_293_ptr.get();
        ULONG sorter_Process_293_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_293, BinaryOutputPolicy<typename SorterType_Process_293::Schema>, BinaryOutputStream, false> OutputerType1_SV147_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV147_Extract> outputer_SV147_Extract_out0_ptr(new OutputerType1_SV147_Extract(sorter_Process_293, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV147_Extract_out0));
        OutputerType1_SV147_Extract * outputer_SV147_Extract_out0 = outputer_SV147_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV147_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_293::Schema row;
            outputer_SV147_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV147_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV147_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV147_Extract
#pragma region SV148_Extract
#if defined(COMPILE_SV148_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_295>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV148_Extract_GetSStream_294;
    SStreamV3ExtractorType_SV148_Extract_GetSStream_294 * CreateExtractor_SV148_Extract_GetSStream_294(unique_ptr<SStreamV3ExtractorType_SV148_Extract_GetSStream_294> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV148_Extract_GetSStream_294(294, "", true/*100*/, UID_GetSStream_294));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV148_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV148_Extract_GetSStream_294> extractor_0_ptr;
        SStreamV3ExtractorType_SV148_Extract_GetSStream_294 * extractor_0 = CreateExtractor_SV148_Extract_GetSStream_294(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_295;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_295> sorter_Process_295_ptr (new SorterType_Process_295(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_295));
        SorterType_Process_295 * sorter_Process_295 = sorter_Process_295_ptr.get();
        ULONG sorter_Process_295_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_295, BinaryOutputPolicy<typename SorterType_Process_295::Schema>, BinaryOutputStream, false> OutputerType1_SV148_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV148_Extract> outputer_SV148_Extract_out0_ptr(new OutputerType1_SV148_Extract(sorter_Process_295, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV148_Extract_out0));
        OutputerType1_SV148_Extract * outputer_SV148_Extract_out0 = outputer_SV148_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV148_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_295::Schema row;
            outputer_SV148_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV148_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV148_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV148_Extract
#pragma region SV149_Extract
#if defined(COMPILE_SV149_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_297>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV149_Extract_GetSStream_296;
    SStreamV3ExtractorType_SV149_Extract_GetSStream_296 * CreateExtractor_SV149_Extract_GetSStream_296(unique_ptr<SStreamV3ExtractorType_SV149_Extract_GetSStream_296> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV149_Extract_GetSStream_296(296, "", true/*100*/, UID_GetSStream_296));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV149_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV149_Extract_GetSStream_296> extractor_0_ptr;
        SStreamV3ExtractorType_SV149_Extract_GetSStream_296 * extractor_0 = CreateExtractor_SV149_Extract_GetSStream_296(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_297;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_297> sorter_Process_297_ptr (new SorterType_Process_297(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_297));
        SorterType_Process_297 * sorter_Process_297 = sorter_Process_297_ptr.get();
        ULONG sorter_Process_297_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_297, BinaryOutputPolicy<typename SorterType_Process_297::Schema>, BinaryOutputStream, false> OutputerType1_SV149_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV149_Extract> outputer_SV149_Extract_out0_ptr(new OutputerType1_SV149_Extract(sorter_Process_297, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV149_Extract_out0));
        OutputerType1_SV149_Extract * outputer_SV149_Extract_out0 = outputer_SV149_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV149_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_297::Schema row;
            outputer_SV149_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV149_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV149_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV149_Extract
#pragma region SV150_Extract
#if defined(COMPILE_SV150_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_299>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV150_Extract_GetSStream_298;
    SStreamV3ExtractorType_SV150_Extract_GetSStream_298 * CreateExtractor_SV150_Extract_GetSStream_298(unique_ptr<SStreamV3ExtractorType_SV150_Extract_GetSStream_298> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV150_Extract_GetSStream_298(298, "", true/*100*/, UID_GetSStream_298));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV150_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV150_Extract_GetSStream_298> extractor_0_ptr;
        SStreamV3ExtractorType_SV150_Extract_GetSStream_298 * extractor_0 = CreateExtractor_SV150_Extract_GetSStream_298(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_299;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_299> sorter_Process_299_ptr (new SorterType_Process_299(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_299));
        SorterType_Process_299 * sorter_Process_299 = sorter_Process_299_ptr.get();
        ULONG sorter_Process_299_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_299, BinaryOutputPolicy<typename SorterType_Process_299::Schema>, BinaryOutputStream, false> OutputerType1_SV150_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV150_Extract> outputer_SV150_Extract_out0_ptr(new OutputerType1_SV150_Extract(sorter_Process_299, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV150_Extract_out0));
        OutputerType1_SV150_Extract * outputer_SV150_Extract_out0 = outputer_SV150_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV150_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_299::Schema row;
            outputer_SV150_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV150_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV150_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV150_Extract
#pragma region SV151_Extract
#if defined(COMPILE_SV151_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_301>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV151_Extract_GetSStream_300;
    SStreamV3ExtractorType_SV151_Extract_GetSStream_300 * CreateExtractor_SV151_Extract_GetSStream_300(unique_ptr<SStreamV3ExtractorType_SV151_Extract_GetSStream_300> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV151_Extract_GetSStream_300(300, "", true/*100*/, UID_GetSStream_300));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV151_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV151_Extract_GetSStream_300> extractor_0_ptr;
        SStreamV3ExtractorType_SV151_Extract_GetSStream_300 * extractor_0 = CreateExtractor_SV151_Extract_GetSStream_300(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_301;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_301> sorter_Process_301_ptr (new SorterType_Process_301(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_301));
        SorterType_Process_301 * sorter_Process_301 = sorter_Process_301_ptr.get();
        ULONG sorter_Process_301_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_301, BinaryOutputPolicy<typename SorterType_Process_301::Schema>, BinaryOutputStream, false> OutputerType1_SV151_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV151_Extract> outputer_SV151_Extract_out0_ptr(new OutputerType1_SV151_Extract(sorter_Process_301, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV151_Extract_out0));
        OutputerType1_SV151_Extract * outputer_SV151_Extract_out0 = outputer_SV151_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV151_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_301::Schema row;
            outputer_SV151_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV151_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV151_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV151_Extract
#pragma region SV152_Extract
#if defined(COMPILE_SV152_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_303>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV152_Extract_GetSStream_302;
    SStreamV3ExtractorType_SV152_Extract_GetSStream_302 * CreateExtractor_SV152_Extract_GetSStream_302(unique_ptr<SStreamV3ExtractorType_SV152_Extract_GetSStream_302> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV152_Extract_GetSStream_302(302, "", true/*100*/, UID_GetSStream_302));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV152_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV152_Extract_GetSStream_302> extractor_0_ptr;
        SStreamV3ExtractorType_SV152_Extract_GetSStream_302 * extractor_0 = CreateExtractor_SV152_Extract_GetSStream_302(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_303;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_303> sorter_Process_303_ptr (new SorterType_Process_303(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_303));
        SorterType_Process_303 * sorter_Process_303 = sorter_Process_303_ptr.get();
        ULONG sorter_Process_303_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_303, BinaryOutputPolicy<typename SorterType_Process_303::Schema>, BinaryOutputStream, false> OutputerType1_SV152_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV152_Extract> outputer_SV152_Extract_out0_ptr(new OutputerType1_SV152_Extract(sorter_Process_303, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV152_Extract_out0));
        OutputerType1_SV152_Extract * outputer_SV152_Extract_out0 = outputer_SV152_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV152_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_303::Schema row;
            outputer_SV152_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV152_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV152_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV152_Extract
#pragma region SV153_Extract
#if defined(COMPILE_SV153_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_305>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV153_Extract_GetSStream_304;
    SStreamV3ExtractorType_SV153_Extract_GetSStream_304 * CreateExtractor_SV153_Extract_GetSStream_304(unique_ptr<SStreamV3ExtractorType_SV153_Extract_GetSStream_304> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV153_Extract_GetSStream_304(304, "", true/*100*/, UID_GetSStream_304));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV153_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV153_Extract_GetSStream_304> extractor_0_ptr;
        SStreamV3ExtractorType_SV153_Extract_GetSStream_304 * extractor_0 = CreateExtractor_SV153_Extract_GetSStream_304(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_305;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_305> sorter_Process_305_ptr (new SorterType_Process_305(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_305));
        SorterType_Process_305 * sorter_Process_305 = sorter_Process_305_ptr.get();
        ULONG sorter_Process_305_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_305, BinaryOutputPolicy<typename SorterType_Process_305::Schema>, BinaryOutputStream, false> OutputerType1_SV153_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV153_Extract> outputer_SV153_Extract_out0_ptr(new OutputerType1_SV153_Extract(sorter_Process_305, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV153_Extract_out0));
        OutputerType1_SV153_Extract * outputer_SV153_Extract_out0 = outputer_SV153_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV153_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_305::Schema row;
            outputer_SV153_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV153_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV153_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV153_Extract
#pragma region SV154_Extract
#if defined(COMPILE_SV154_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_307>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV154_Extract_GetSStream_306;
    SStreamV3ExtractorType_SV154_Extract_GetSStream_306 * CreateExtractor_SV154_Extract_GetSStream_306(unique_ptr<SStreamV3ExtractorType_SV154_Extract_GetSStream_306> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV154_Extract_GetSStream_306(306, "", true/*100*/, UID_GetSStream_306));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV154_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV154_Extract_GetSStream_306> extractor_0_ptr;
        SStreamV3ExtractorType_SV154_Extract_GetSStream_306 * extractor_0 = CreateExtractor_SV154_Extract_GetSStream_306(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_307;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_307> sorter_Process_307_ptr (new SorterType_Process_307(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_307));
        SorterType_Process_307 * sorter_Process_307 = sorter_Process_307_ptr.get();
        ULONG sorter_Process_307_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_307, BinaryOutputPolicy<typename SorterType_Process_307::Schema>, BinaryOutputStream, false> OutputerType1_SV154_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV154_Extract> outputer_SV154_Extract_out0_ptr(new OutputerType1_SV154_Extract(sorter_Process_307, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV154_Extract_out0));
        OutputerType1_SV154_Extract * outputer_SV154_Extract_out0 = outputer_SV154_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV154_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_307::Schema row;
            outputer_SV154_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV154_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV154_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV154_Extract
#pragma region SV155_Extract
#if defined(COMPILE_SV155_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_309>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV155_Extract_GetSStream_308;
    SStreamV3ExtractorType_SV155_Extract_GetSStream_308 * CreateExtractor_SV155_Extract_GetSStream_308(unique_ptr<SStreamV3ExtractorType_SV155_Extract_GetSStream_308> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV155_Extract_GetSStream_308(308, "", true/*100*/, UID_GetSStream_308));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV155_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV155_Extract_GetSStream_308> extractor_0_ptr;
        SStreamV3ExtractorType_SV155_Extract_GetSStream_308 * extractor_0 = CreateExtractor_SV155_Extract_GetSStream_308(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_309;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_309> sorter_Process_309_ptr (new SorterType_Process_309(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_309));
        SorterType_Process_309 * sorter_Process_309 = sorter_Process_309_ptr.get();
        ULONG sorter_Process_309_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_309, BinaryOutputPolicy<typename SorterType_Process_309::Schema>, BinaryOutputStream, false> OutputerType1_SV155_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV155_Extract> outputer_SV155_Extract_out0_ptr(new OutputerType1_SV155_Extract(sorter_Process_309, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV155_Extract_out0));
        OutputerType1_SV155_Extract * outputer_SV155_Extract_out0 = outputer_SV155_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV155_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_309::Schema row;
            outputer_SV155_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV155_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV155_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV155_Extract
#pragma region SV156_Extract
#if defined(COMPILE_SV156_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_311>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV156_Extract_GetSStream_310;
    SStreamV3ExtractorType_SV156_Extract_GetSStream_310 * CreateExtractor_SV156_Extract_GetSStream_310(unique_ptr<SStreamV3ExtractorType_SV156_Extract_GetSStream_310> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV156_Extract_GetSStream_310(310, "", true/*100*/, UID_GetSStream_310));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV156_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV156_Extract_GetSStream_310> extractor_0_ptr;
        SStreamV3ExtractorType_SV156_Extract_GetSStream_310 * extractor_0 = CreateExtractor_SV156_Extract_GetSStream_310(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_311;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_311> sorter_Process_311_ptr (new SorterType_Process_311(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_311));
        SorterType_Process_311 * sorter_Process_311 = sorter_Process_311_ptr.get();
        ULONG sorter_Process_311_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_311, BinaryOutputPolicy<typename SorterType_Process_311::Schema>, BinaryOutputStream, false> OutputerType1_SV156_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV156_Extract> outputer_SV156_Extract_out0_ptr(new OutputerType1_SV156_Extract(sorter_Process_311, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV156_Extract_out0));
        OutputerType1_SV156_Extract * outputer_SV156_Extract_out0 = outputer_SV156_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV156_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_311::Schema row;
            outputer_SV156_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV156_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV156_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV156_Extract
#pragma region SV157_Extract
#if defined(COMPILE_SV157_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_313>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV157_Extract_GetSStream_312;
    SStreamV3ExtractorType_SV157_Extract_GetSStream_312 * CreateExtractor_SV157_Extract_GetSStream_312(unique_ptr<SStreamV3ExtractorType_SV157_Extract_GetSStream_312> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV157_Extract_GetSStream_312(312, "", true/*100*/, UID_GetSStream_312));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV157_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV157_Extract_GetSStream_312> extractor_0_ptr;
        SStreamV3ExtractorType_SV157_Extract_GetSStream_312 * extractor_0 = CreateExtractor_SV157_Extract_GetSStream_312(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_313;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_313> sorter_Process_313_ptr (new SorterType_Process_313(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_313));
        SorterType_Process_313 * sorter_Process_313 = sorter_Process_313_ptr.get();
        ULONG sorter_Process_313_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_313, BinaryOutputPolicy<typename SorterType_Process_313::Schema>, BinaryOutputStream, false> OutputerType1_SV157_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV157_Extract> outputer_SV157_Extract_out0_ptr(new OutputerType1_SV157_Extract(sorter_Process_313, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV157_Extract_out0));
        OutputerType1_SV157_Extract * outputer_SV157_Extract_out0 = outputer_SV157_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV157_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_313::Schema row;
            outputer_SV157_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV157_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV157_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV157_Extract
#pragma region SV158_Extract
#if defined(COMPILE_SV158_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_315>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV158_Extract_GetSStream_314;
    SStreamV3ExtractorType_SV158_Extract_GetSStream_314 * CreateExtractor_SV158_Extract_GetSStream_314(unique_ptr<SStreamV3ExtractorType_SV158_Extract_GetSStream_314> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV158_Extract_GetSStream_314(314, "", true/*100*/, UID_GetSStream_314));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV158_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV158_Extract_GetSStream_314> extractor_0_ptr;
        SStreamV3ExtractorType_SV158_Extract_GetSStream_314 * extractor_0 = CreateExtractor_SV158_Extract_GetSStream_314(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_315;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_315> sorter_Process_315_ptr (new SorterType_Process_315(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_315));
        SorterType_Process_315 * sorter_Process_315 = sorter_Process_315_ptr.get();
        ULONG sorter_Process_315_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_315, BinaryOutputPolicy<typename SorterType_Process_315::Schema>, BinaryOutputStream, false> OutputerType1_SV158_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV158_Extract> outputer_SV158_Extract_out0_ptr(new OutputerType1_SV158_Extract(sorter_Process_315, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV158_Extract_out0));
        OutputerType1_SV158_Extract * outputer_SV158_Extract_out0 = outputer_SV158_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV158_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_315::Schema row;
            outputer_SV158_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV158_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV158_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV158_Extract
#pragma region SV159_Extract
#if defined(COMPILE_SV159_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_317>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV159_Extract_GetSStream_316;
    SStreamV3ExtractorType_SV159_Extract_GetSStream_316 * CreateExtractor_SV159_Extract_GetSStream_316(unique_ptr<SStreamV3ExtractorType_SV159_Extract_GetSStream_316> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV159_Extract_GetSStream_316(316, "", true/*100*/, UID_GetSStream_316));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV159_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV159_Extract_GetSStream_316> extractor_0_ptr;
        SStreamV3ExtractorType_SV159_Extract_GetSStream_316 * extractor_0 = CreateExtractor_SV159_Extract_GetSStream_316(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_317;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_317> sorter_Process_317_ptr (new SorterType_Process_317(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_317));
        SorterType_Process_317 * sorter_Process_317 = sorter_Process_317_ptr.get();
        ULONG sorter_Process_317_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_317, BinaryOutputPolicy<typename SorterType_Process_317::Schema>, BinaryOutputStream, false> OutputerType1_SV159_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV159_Extract> outputer_SV159_Extract_out0_ptr(new OutputerType1_SV159_Extract(sorter_Process_317, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV159_Extract_out0));
        OutputerType1_SV159_Extract * outputer_SV159_Extract_out0 = outputer_SV159_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV159_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_317::Schema row;
            outputer_SV159_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV159_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV159_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV159_Extract
#pragma region SV160_Extract
#if defined(COMPILE_SV160_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_319>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV160_Extract_GetSStream_318;
    SStreamV3ExtractorType_SV160_Extract_GetSStream_318 * CreateExtractor_SV160_Extract_GetSStream_318(unique_ptr<SStreamV3ExtractorType_SV160_Extract_GetSStream_318> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV160_Extract_GetSStream_318(318, "", true/*100*/, UID_GetSStream_318));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV160_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV160_Extract_GetSStream_318> extractor_0_ptr;
        SStreamV3ExtractorType_SV160_Extract_GetSStream_318 * extractor_0 = CreateExtractor_SV160_Extract_GetSStream_318(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_319;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_319> sorter_Process_319_ptr (new SorterType_Process_319(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_319));
        SorterType_Process_319 * sorter_Process_319 = sorter_Process_319_ptr.get();
        ULONG sorter_Process_319_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_319, BinaryOutputPolicy<typename SorterType_Process_319::Schema>, BinaryOutputStream, false> OutputerType1_SV160_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV160_Extract> outputer_SV160_Extract_out0_ptr(new OutputerType1_SV160_Extract(sorter_Process_319, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV160_Extract_out0));
        OutputerType1_SV160_Extract * outputer_SV160_Extract_out0 = outputer_SV160_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV160_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_319::Schema row;
            outputer_SV160_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV160_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV160_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV160_Extract
#pragma region SV161_Extract
#if defined(COMPILE_SV161_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_321>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV161_Extract_GetSStream_320;
    SStreamV3ExtractorType_SV161_Extract_GetSStream_320 * CreateExtractor_SV161_Extract_GetSStream_320(unique_ptr<SStreamV3ExtractorType_SV161_Extract_GetSStream_320> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV161_Extract_GetSStream_320(320, "", true/*100*/, UID_GetSStream_320));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV161_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV161_Extract_GetSStream_320> extractor_0_ptr;
        SStreamV3ExtractorType_SV161_Extract_GetSStream_320 * extractor_0 = CreateExtractor_SV161_Extract_GetSStream_320(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_321;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_321> sorter_Process_321_ptr (new SorterType_Process_321(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_321));
        SorterType_Process_321 * sorter_Process_321 = sorter_Process_321_ptr.get();
        ULONG sorter_Process_321_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_321, BinaryOutputPolicy<typename SorterType_Process_321::Schema>, BinaryOutputStream, false> OutputerType1_SV161_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV161_Extract> outputer_SV161_Extract_out0_ptr(new OutputerType1_SV161_Extract(sorter_Process_321, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV161_Extract_out0));
        OutputerType1_SV161_Extract * outputer_SV161_Extract_out0 = outputer_SV161_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV161_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_321::Schema row;
            outputer_SV161_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV161_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV161_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV161_Extract
#pragma region SV162_Extract
#if defined(COMPILE_SV162_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_323>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV162_Extract_GetSStream_322;
    SStreamV3ExtractorType_SV162_Extract_GetSStream_322 * CreateExtractor_SV162_Extract_GetSStream_322(unique_ptr<SStreamV3ExtractorType_SV162_Extract_GetSStream_322> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV162_Extract_GetSStream_322(322, "", true/*100*/, UID_GetSStream_322));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV162_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV162_Extract_GetSStream_322> extractor_0_ptr;
        SStreamV3ExtractorType_SV162_Extract_GetSStream_322 * extractor_0 = CreateExtractor_SV162_Extract_GetSStream_322(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_323;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_323> sorter_Process_323_ptr (new SorterType_Process_323(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_323));
        SorterType_Process_323 * sorter_Process_323 = sorter_Process_323_ptr.get();
        ULONG sorter_Process_323_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_323, BinaryOutputPolicy<typename SorterType_Process_323::Schema>, BinaryOutputStream, false> OutputerType1_SV162_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV162_Extract> outputer_SV162_Extract_out0_ptr(new OutputerType1_SV162_Extract(sorter_Process_323, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV162_Extract_out0));
        OutputerType1_SV162_Extract * outputer_SV162_Extract_out0 = outputer_SV162_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV162_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_323::Schema row;
            outputer_SV162_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV162_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV162_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV162_Extract
#pragma region SV163_Extract
#if defined(COMPILE_SV163_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_325>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV163_Extract_GetSStream_324;
    SStreamV3ExtractorType_SV163_Extract_GetSStream_324 * CreateExtractor_SV163_Extract_GetSStream_324(unique_ptr<SStreamV3ExtractorType_SV163_Extract_GetSStream_324> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV163_Extract_GetSStream_324(324, "", true/*100*/, UID_GetSStream_324));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV163_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV163_Extract_GetSStream_324> extractor_0_ptr;
        SStreamV3ExtractorType_SV163_Extract_GetSStream_324 * extractor_0 = CreateExtractor_SV163_Extract_GetSStream_324(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_325;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_325> sorter_Process_325_ptr (new SorterType_Process_325(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_325));
        SorterType_Process_325 * sorter_Process_325 = sorter_Process_325_ptr.get();
        ULONG sorter_Process_325_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_325, BinaryOutputPolicy<typename SorterType_Process_325::Schema>, BinaryOutputStream, false> OutputerType1_SV163_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV163_Extract> outputer_SV163_Extract_out0_ptr(new OutputerType1_SV163_Extract(sorter_Process_325, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV163_Extract_out0));
        OutputerType1_SV163_Extract * outputer_SV163_Extract_out0 = outputer_SV163_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV163_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_325::Schema row;
            outputer_SV163_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV163_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV163_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV163_Extract
#pragma region SV164_Extract
#if defined(COMPILE_SV164_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_327>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV164_Extract_GetSStream_326;
    SStreamV3ExtractorType_SV164_Extract_GetSStream_326 * CreateExtractor_SV164_Extract_GetSStream_326(unique_ptr<SStreamV3ExtractorType_SV164_Extract_GetSStream_326> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV164_Extract_GetSStream_326(326, "", true/*100*/, UID_GetSStream_326));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV164_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV164_Extract_GetSStream_326> extractor_0_ptr;
        SStreamV3ExtractorType_SV164_Extract_GetSStream_326 * extractor_0 = CreateExtractor_SV164_Extract_GetSStream_326(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_327;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_327> sorter_Process_327_ptr (new SorterType_Process_327(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_327));
        SorterType_Process_327 * sorter_Process_327 = sorter_Process_327_ptr.get();
        ULONG sorter_Process_327_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_327, BinaryOutputPolicy<typename SorterType_Process_327::Schema>, BinaryOutputStream, false> OutputerType1_SV164_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV164_Extract> outputer_SV164_Extract_out0_ptr(new OutputerType1_SV164_Extract(sorter_Process_327, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV164_Extract_out0));
        OutputerType1_SV164_Extract * outputer_SV164_Extract_out0 = outputer_SV164_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV164_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_327::Schema row;
            outputer_SV164_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV164_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV164_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV164_Extract
#pragma region SV165_Extract
#if defined(COMPILE_SV165_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_329>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV165_Extract_GetSStream_328;
    SStreamV3ExtractorType_SV165_Extract_GetSStream_328 * CreateExtractor_SV165_Extract_GetSStream_328(unique_ptr<SStreamV3ExtractorType_SV165_Extract_GetSStream_328> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV165_Extract_GetSStream_328(328, "", true/*100*/, UID_GetSStream_328));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV165_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV165_Extract_GetSStream_328> extractor_0_ptr;
        SStreamV3ExtractorType_SV165_Extract_GetSStream_328 * extractor_0 = CreateExtractor_SV165_Extract_GetSStream_328(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_329;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_329> sorter_Process_329_ptr (new SorterType_Process_329(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_329));
        SorterType_Process_329 * sorter_Process_329 = sorter_Process_329_ptr.get();
        ULONG sorter_Process_329_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_329, BinaryOutputPolicy<typename SorterType_Process_329::Schema>, BinaryOutputStream, false> OutputerType1_SV165_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV165_Extract> outputer_SV165_Extract_out0_ptr(new OutputerType1_SV165_Extract(sorter_Process_329, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV165_Extract_out0));
        OutputerType1_SV165_Extract * outputer_SV165_Extract_out0 = outputer_SV165_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV165_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_329::Schema row;
            outputer_SV165_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV165_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV165_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV165_Extract
#pragma region SV166_Extract
#if defined(COMPILE_SV166_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_331>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV166_Extract_GetSStream_330;
    SStreamV3ExtractorType_SV166_Extract_GetSStream_330 * CreateExtractor_SV166_Extract_GetSStream_330(unique_ptr<SStreamV3ExtractorType_SV166_Extract_GetSStream_330> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV166_Extract_GetSStream_330(330, "", true/*100*/, UID_GetSStream_330));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV166_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV166_Extract_GetSStream_330> extractor_0_ptr;
        SStreamV3ExtractorType_SV166_Extract_GetSStream_330 * extractor_0 = CreateExtractor_SV166_Extract_GetSStream_330(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_331;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_331> sorter_Process_331_ptr (new SorterType_Process_331(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_331));
        SorterType_Process_331 * sorter_Process_331 = sorter_Process_331_ptr.get();
        ULONG sorter_Process_331_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_331, BinaryOutputPolicy<typename SorterType_Process_331::Schema>, BinaryOutputStream, false> OutputerType1_SV166_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV166_Extract> outputer_SV166_Extract_out0_ptr(new OutputerType1_SV166_Extract(sorter_Process_331, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV166_Extract_out0));
        OutputerType1_SV166_Extract * outputer_SV166_Extract_out0 = outputer_SV166_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV166_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_331::Schema row;
            outputer_SV166_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV166_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV166_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV166_Extract
#pragma region SV167_Extract
#if defined(COMPILE_SV167_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_333>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV167_Extract_GetSStream_332;
    SStreamV3ExtractorType_SV167_Extract_GetSStream_332 * CreateExtractor_SV167_Extract_GetSStream_332(unique_ptr<SStreamV3ExtractorType_SV167_Extract_GetSStream_332> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV167_Extract_GetSStream_332(332, "", true/*100*/, UID_GetSStream_332));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV167_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV167_Extract_GetSStream_332> extractor_0_ptr;
        SStreamV3ExtractorType_SV167_Extract_GetSStream_332 * extractor_0 = CreateExtractor_SV167_Extract_GetSStream_332(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_333;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_333> sorter_Process_333_ptr (new SorterType_Process_333(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_333));
        SorterType_Process_333 * sorter_Process_333 = sorter_Process_333_ptr.get();
        ULONG sorter_Process_333_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_333, BinaryOutputPolicy<typename SorterType_Process_333::Schema>, BinaryOutputStream, false> OutputerType1_SV167_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV167_Extract> outputer_SV167_Extract_out0_ptr(new OutputerType1_SV167_Extract(sorter_Process_333, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV167_Extract_out0));
        OutputerType1_SV167_Extract * outputer_SV167_Extract_out0 = outputer_SV167_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV167_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_333::Schema row;
            outputer_SV167_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV167_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV167_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV167_Extract
#pragma region SV168_Extract
#if defined(COMPILE_SV168_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_335>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV168_Extract_GetSStream_334;
    SStreamV3ExtractorType_SV168_Extract_GetSStream_334 * CreateExtractor_SV168_Extract_GetSStream_334(unique_ptr<SStreamV3ExtractorType_SV168_Extract_GetSStream_334> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV168_Extract_GetSStream_334(334, "", true/*100*/, UID_GetSStream_334));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV168_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV168_Extract_GetSStream_334> extractor_0_ptr;
        SStreamV3ExtractorType_SV168_Extract_GetSStream_334 * extractor_0 = CreateExtractor_SV168_Extract_GetSStream_334(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_335;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_335> sorter_Process_335_ptr (new SorterType_Process_335(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_335));
        SorterType_Process_335 * sorter_Process_335 = sorter_Process_335_ptr.get();
        ULONG sorter_Process_335_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_335, BinaryOutputPolicy<typename SorterType_Process_335::Schema>, BinaryOutputStream, false> OutputerType1_SV168_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV168_Extract> outputer_SV168_Extract_out0_ptr(new OutputerType1_SV168_Extract(sorter_Process_335, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV168_Extract_out0));
        OutputerType1_SV168_Extract * outputer_SV168_Extract_out0 = outputer_SV168_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV168_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_335::Schema row;
            outputer_SV168_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV168_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV168_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV168_Extract
#pragma region SV169_Extract
#if defined(COMPILE_SV169_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_337>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV169_Extract_GetSStream_336;
    SStreamV3ExtractorType_SV169_Extract_GetSStream_336 * CreateExtractor_SV169_Extract_GetSStream_336(unique_ptr<SStreamV3ExtractorType_SV169_Extract_GetSStream_336> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV169_Extract_GetSStream_336(336, "", true/*100*/, UID_GetSStream_336));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV169_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV169_Extract_GetSStream_336> extractor_0_ptr;
        SStreamV3ExtractorType_SV169_Extract_GetSStream_336 * extractor_0 = CreateExtractor_SV169_Extract_GetSStream_336(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_337;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_337> sorter_Process_337_ptr (new SorterType_Process_337(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_337));
        SorterType_Process_337 * sorter_Process_337 = sorter_Process_337_ptr.get();
        ULONG sorter_Process_337_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_337, BinaryOutputPolicy<typename SorterType_Process_337::Schema>, BinaryOutputStream, false> OutputerType1_SV169_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV169_Extract> outputer_SV169_Extract_out0_ptr(new OutputerType1_SV169_Extract(sorter_Process_337, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV169_Extract_out0));
        OutputerType1_SV169_Extract * outputer_SV169_Extract_out0 = outputer_SV169_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV169_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_337::Schema row;
            outputer_SV169_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV169_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV169_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV169_Extract
#pragma region SV170_Extract
#if defined(COMPILE_SV170_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_339>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV170_Extract_GetSStream_338;
    SStreamV3ExtractorType_SV170_Extract_GetSStream_338 * CreateExtractor_SV170_Extract_GetSStream_338(unique_ptr<SStreamV3ExtractorType_SV170_Extract_GetSStream_338> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV170_Extract_GetSStream_338(338, "", true/*100*/, UID_GetSStream_338));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV170_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV170_Extract_GetSStream_338> extractor_0_ptr;
        SStreamV3ExtractorType_SV170_Extract_GetSStream_338 * extractor_0 = CreateExtractor_SV170_Extract_GetSStream_338(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_339;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_339> sorter_Process_339_ptr (new SorterType_Process_339(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_339));
        SorterType_Process_339 * sorter_Process_339 = sorter_Process_339_ptr.get();
        ULONG sorter_Process_339_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_339, BinaryOutputPolicy<typename SorterType_Process_339::Schema>, BinaryOutputStream, false> OutputerType1_SV170_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV170_Extract> outputer_SV170_Extract_out0_ptr(new OutputerType1_SV170_Extract(sorter_Process_339, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV170_Extract_out0));
        OutputerType1_SV170_Extract * outputer_SV170_Extract_out0 = outputer_SV170_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV170_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_339::Schema row;
            outputer_SV170_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV170_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV170_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV170_Extract
#pragma region SV171_Extract
#if defined(COMPILE_SV171_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_341>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV171_Extract_GetSStream_340;
    SStreamV3ExtractorType_SV171_Extract_GetSStream_340 * CreateExtractor_SV171_Extract_GetSStream_340(unique_ptr<SStreamV3ExtractorType_SV171_Extract_GetSStream_340> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV171_Extract_GetSStream_340(340, "", true/*100*/, UID_GetSStream_340));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV171_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV171_Extract_GetSStream_340> extractor_0_ptr;
        SStreamV3ExtractorType_SV171_Extract_GetSStream_340 * extractor_0 = CreateExtractor_SV171_Extract_GetSStream_340(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_341;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_341> sorter_Process_341_ptr (new SorterType_Process_341(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_341));
        SorterType_Process_341 * sorter_Process_341 = sorter_Process_341_ptr.get();
        ULONG sorter_Process_341_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_341, BinaryOutputPolicy<typename SorterType_Process_341::Schema>, BinaryOutputStream, false> OutputerType1_SV171_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV171_Extract> outputer_SV171_Extract_out0_ptr(new OutputerType1_SV171_Extract(sorter_Process_341, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV171_Extract_out0));
        OutputerType1_SV171_Extract * outputer_SV171_Extract_out0 = outputer_SV171_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV171_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_341::Schema row;
            outputer_SV171_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV171_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV171_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV171_Extract
#pragma region SV172_Extract
#if defined(COMPILE_SV172_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_343>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV172_Extract_GetSStream_342;
    SStreamV3ExtractorType_SV172_Extract_GetSStream_342 * CreateExtractor_SV172_Extract_GetSStream_342(unique_ptr<SStreamV3ExtractorType_SV172_Extract_GetSStream_342> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV172_Extract_GetSStream_342(342, "", true/*100*/, UID_GetSStream_342));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV172_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV172_Extract_GetSStream_342> extractor_0_ptr;
        SStreamV3ExtractorType_SV172_Extract_GetSStream_342 * extractor_0 = CreateExtractor_SV172_Extract_GetSStream_342(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_343;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_343> sorter_Process_343_ptr (new SorterType_Process_343(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_343));
        SorterType_Process_343 * sorter_Process_343 = sorter_Process_343_ptr.get();
        ULONG sorter_Process_343_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_343, BinaryOutputPolicy<typename SorterType_Process_343::Schema>, BinaryOutputStream, false> OutputerType1_SV172_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV172_Extract> outputer_SV172_Extract_out0_ptr(new OutputerType1_SV172_Extract(sorter_Process_343, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV172_Extract_out0));
        OutputerType1_SV172_Extract * outputer_SV172_Extract_out0 = outputer_SV172_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV172_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_343::Schema row;
            outputer_SV172_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV172_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV172_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV172_Extract
#pragma region SV173_Extract
#if defined(COMPILE_SV173_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_345>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV173_Extract_GetSStream_344;
    SStreamV3ExtractorType_SV173_Extract_GetSStream_344 * CreateExtractor_SV173_Extract_GetSStream_344(unique_ptr<SStreamV3ExtractorType_SV173_Extract_GetSStream_344> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV173_Extract_GetSStream_344(344, "", true/*100*/, UID_GetSStream_344));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV173_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV173_Extract_GetSStream_344> extractor_0_ptr;
        SStreamV3ExtractorType_SV173_Extract_GetSStream_344 * extractor_0 = CreateExtractor_SV173_Extract_GetSStream_344(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_345;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_345> sorter_Process_345_ptr (new SorterType_Process_345(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_345));
        SorterType_Process_345 * sorter_Process_345 = sorter_Process_345_ptr.get();
        ULONG sorter_Process_345_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_345, BinaryOutputPolicy<typename SorterType_Process_345::Schema>, BinaryOutputStream, false> OutputerType1_SV173_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV173_Extract> outputer_SV173_Extract_out0_ptr(new OutputerType1_SV173_Extract(sorter_Process_345, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV173_Extract_out0));
        OutputerType1_SV173_Extract * outputer_SV173_Extract_out0 = outputer_SV173_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV173_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_345::Schema row;
            outputer_SV173_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV173_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV173_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV173_Extract
#pragma region SV174_Extract
#if defined(COMPILE_SV174_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_347>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV174_Extract_GetSStream_346;
    SStreamV3ExtractorType_SV174_Extract_GetSStream_346 * CreateExtractor_SV174_Extract_GetSStream_346(unique_ptr<SStreamV3ExtractorType_SV174_Extract_GetSStream_346> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV174_Extract_GetSStream_346(346, "", true/*100*/, UID_GetSStream_346));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV174_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV174_Extract_GetSStream_346> extractor_0_ptr;
        SStreamV3ExtractorType_SV174_Extract_GetSStream_346 * extractor_0 = CreateExtractor_SV174_Extract_GetSStream_346(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_347;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_347> sorter_Process_347_ptr (new SorterType_Process_347(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_347));
        SorterType_Process_347 * sorter_Process_347 = sorter_Process_347_ptr.get();
        ULONG sorter_Process_347_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_347, BinaryOutputPolicy<typename SorterType_Process_347::Schema>, BinaryOutputStream, false> OutputerType1_SV174_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV174_Extract> outputer_SV174_Extract_out0_ptr(new OutputerType1_SV174_Extract(sorter_Process_347, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV174_Extract_out0));
        OutputerType1_SV174_Extract * outputer_SV174_Extract_out0 = outputer_SV174_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV174_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_347::Schema row;
            outputer_SV174_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV174_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV174_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV174_Extract
#pragma region SV175_Extract
#if defined(COMPILE_SV175_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_349>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV175_Extract_GetSStream_348;
    SStreamV3ExtractorType_SV175_Extract_GetSStream_348 * CreateExtractor_SV175_Extract_GetSStream_348(unique_ptr<SStreamV3ExtractorType_SV175_Extract_GetSStream_348> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV175_Extract_GetSStream_348(348, "", true/*100*/, UID_GetSStream_348));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV175_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV175_Extract_GetSStream_348> extractor_0_ptr;
        SStreamV3ExtractorType_SV175_Extract_GetSStream_348 * extractor_0 = CreateExtractor_SV175_Extract_GetSStream_348(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_349;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_349> sorter_Process_349_ptr (new SorterType_Process_349(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_349));
        SorterType_Process_349 * sorter_Process_349 = sorter_Process_349_ptr.get();
        ULONG sorter_Process_349_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_349, BinaryOutputPolicy<typename SorterType_Process_349::Schema>, BinaryOutputStream, false> OutputerType1_SV175_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV175_Extract> outputer_SV175_Extract_out0_ptr(new OutputerType1_SV175_Extract(sorter_Process_349, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV175_Extract_out0));
        OutputerType1_SV175_Extract * outputer_SV175_Extract_out0 = outputer_SV175_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV175_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_349::Schema row;
            outputer_SV175_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV175_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV175_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV175_Extract
#pragma region SV176_Extract
#if defined(COMPILE_SV176_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_351>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV176_Extract_GetSStream_350;
    SStreamV3ExtractorType_SV176_Extract_GetSStream_350 * CreateExtractor_SV176_Extract_GetSStream_350(unique_ptr<SStreamV3ExtractorType_SV176_Extract_GetSStream_350> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV176_Extract_GetSStream_350(350, "", true/*100*/, UID_GetSStream_350));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV176_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV176_Extract_GetSStream_350> extractor_0_ptr;
        SStreamV3ExtractorType_SV176_Extract_GetSStream_350 * extractor_0 = CreateExtractor_SV176_Extract_GetSStream_350(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_351;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_351> sorter_Process_351_ptr (new SorterType_Process_351(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_351));
        SorterType_Process_351 * sorter_Process_351 = sorter_Process_351_ptr.get();
        ULONG sorter_Process_351_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_351, BinaryOutputPolicy<typename SorterType_Process_351::Schema>, BinaryOutputStream, false> OutputerType1_SV176_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV176_Extract> outputer_SV176_Extract_out0_ptr(new OutputerType1_SV176_Extract(sorter_Process_351, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV176_Extract_out0));
        OutputerType1_SV176_Extract * outputer_SV176_Extract_out0 = outputer_SV176_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV176_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_351::Schema row;
            outputer_SV176_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV176_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV176_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV176_Extract
#pragma region SV177_Extract
#if defined(COMPILE_SV177_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_353>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV177_Extract_GetSStream_352;
    SStreamV3ExtractorType_SV177_Extract_GetSStream_352 * CreateExtractor_SV177_Extract_GetSStream_352(unique_ptr<SStreamV3ExtractorType_SV177_Extract_GetSStream_352> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV177_Extract_GetSStream_352(352, "", true/*100*/, UID_GetSStream_352));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV177_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV177_Extract_GetSStream_352> extractor_0_ptr;
        SStreamV3ExtractorType_SV177_Extract_GetSStream_352 * extractor_0 = CreateExtractor_SV177_Extract_GetSStream_352(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_353;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_353> sorter_Process_353_ptr (new SorterType_Process_353(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_353));
        SorterType_Process_353 * sorter_Process_353 = sorter_Process_353_ptr.get();
        ULONG sorter_Process_353_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_353, BinaryOutputPolicy<typename SorterType_Process_353::Schema>, BinaryOutputStream, false> OutputerType1_SV177_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV177_Extract> outputer_SV177_Extract_out0_ptr(new OutputerType1_SV177_Extract(sorter_Process_353, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV177_Extract_out0));
        OutputerType1_SV177_Extract * outputer_SV177_Extract_out0 = outputer_SV177_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV177_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_353::Schema row;
            outputer_SV177_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV177_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV177_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV177_Extract
#pragma region SV178_Extract
#if defined(COMPILE_SV178_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_355>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV178_Extract_GetSStream_354;
    SStreamV3ExtractorType_SV178_Extract_GetSStream_354 * CreateExtractor_SV178_Extract_GetSStream_354(unique_ptr<SStreamV3ExtractorType_SV178_Extract_GetSStream_354> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV178_Extract_GetSStream_354(354, "", true/*100*/, UID_GetSStream_354));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV178_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV178_Extract_GetSStream_354> extractor_0_ptr;
        SStreamV3ExtractorType_SV178_Extract_GetSStream_354 * extractor_0 = CreateExtractor_SV178_Extract_GetSStream_354(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_355;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_355> sorter_Process_355_ptr (new SorterType_Process_355(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_355));
        SorterType_Process_355 * sorter_Process_355 = sorter_Process_355_ptr.get();
        ULONG sorter_Process_355_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_355, BinaryOutputPolicy<typename SorterType_Process_355::Schema>, BinaryOutputStream, false> OutputerType1_SV178_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV178_Extract> outputer_SV178_Extract_out0_ptr(new OutputerType1_SV178_Extract(sorter_Process_355, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV178_Extract_out0));
        OutputerType1_SV178_Extract * outputer_SV178_Extract_out0 = outputer_SV178_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV178_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_355::Schema row;
            outputer_SV178_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV178_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV178_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV178_Extract
#pragma region SV179_Extract
#if defined(COMPILE_SV179_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_357>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV179_Extract_GetSStream_356;
    SStreamV3ExtractorType_SV179_Extract_GetSStream_356 * CreateExtractor_SV179_Extract_GetSStream_356(unique_ptr<SStreamV3ExtractorType_SV179_Extract_GetSStream_356> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV179_Extract_GetSStream_356(356, "", true/*100*/, UID_GetSStream_356));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV179_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV179_Extract_GetSStream_356> extractor_0_ptr;
        SStreamV3ExtractorType_SV179_Extract_GetSStream_356 * extractor_0 = CreateExtractor_SV179_Extract_GetSStream_356(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_357;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_357> sorter_Process_357_ptr (new SorterType_Process_357(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_357));
        SorterType_Process_357 * sorter_Process_357 = sorter_Process_357_ptr.get();
        ULONG sorter_Process_357_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_357, BinaryOutputPolicy<typename SorterType_Process_357::Schema>, BinaryOutputStream, false> OutputerType1_SV179_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV179_Extract> outputer_SV179_Extract_out0_ptr(new OutputerType1_SV179_Extract(sorter_Process_357, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV179_Extract_out0));
        OutputerType1_SV179_Extract * outputer_SV179_Extract_out0 = outputer_SV179_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV179_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_357::Schema row;
            outputer_SV179_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV179_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV179_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV179_Extract
#pragma region SV180_Extract
#if defined(COMPILE_SV180_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_359>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV180_Extract_GetSStream_358;
    SStreamV3ExtractorType_SV180_Extract_GetSStream_358 * CreateExtractor_SV180_Extract_GetSStream_358(unique_ptr<SStreamV3ExtractorType_SV180_Extract_GetSStream_358> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV180_Extract_GetSStream_358(358, "", true/*100*/, UID_GetSStream_358));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV180_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV180_Extract_GetSStream_358> extractor_0_ptr;
        SStreamV3ExtractorType_SV180_Extract_GetSStream_358 * extractor_0 = CreateExtractor_SV180_Extract_GetSStream_358(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_359;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_359> sorter_Process_359_ptr (new SorterType_Process_359(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_359));
        SorterType_Process_359 * sorter_Process_359 = sorter_Process_359_ptr.get();
        ULONG sorter_Process_359_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_359, BinaryOutputPolicy<typename SorterType_Process_359::Schema>, BinaryOutputStream, false> OutputerType1_SV180_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV180_Extract> outputer_SV180_Extract_out0_ptr(new OutputerType1_SV180_Extract(sorter_Process_359, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV180_Extract_out0));
        OutputerType1_SV180_Extract * outputer_SV180_Extract_out0 = outputer_SV180_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV180_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_359::Schema row;
            outputer_SV180_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV180_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV180_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV180_Extract
#pragma region SV181_Extract
#if defined(COMPILE_SV181_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_361>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV181_Extract_GetSStream_360;
    SStreamV3ExtractorType_SV181_Extract_GetSStream_360 * CreateExtractor_SV181_Extract_GetSStream_360(unique_ptr<SStreamV3ExtractorType_SV181_Extract_GetSStream_360> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV181_Extract_GetSStream_360(360, "", true/*100*/, UID_GetSStream_360));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV181_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV181_Extract_GetSStream_360> extractor_0_ptr;
        SStreamV3ExtractorType_SV181_Extract_GetSStream_360 * extractor_0 = CreateExtractor_SV181_Extract_GetSStream_360(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_361;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_361> sorter_Process_361_ptr (new SorterType_Process_361(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_361));
        SorterType_Process_361 * sorter_Process_361 = sorter_Process_361_ptr.get();
        ULONG sorter_Process_361_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_361, BinaryOutputPolicy<typename SorterType_Process_361::Schema>, BinaryOutputStream, false> OutputerType1_SV181_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV181_Extract> outputer_SV181_Extract_out0_ptr(new OutputerType1_SV181_Extract(sorter_Process_361, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV181_Extract_out0));
        OutputerType1_SV181_Extract * outputer_SV181_Extract_out0 = outputer_SV181_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV181_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_361::Schema row;
            outputer_SV181_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV181_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV181_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV181_Extract
#pragma region SV182_Extract
#if defined(COMPILE_SV182_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_363>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV182_Extract_GetSStream_362;
    SStreamV3ExtractorType_SV182_Extract_GetSStream_362 * CreateExtractor_SV182_Extract_GetSStream_362(unique_ptr<SStreamV3ExtractorType_SV182_Extract_GetSStream_362> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV182_Extract_GetSStream_362(362, "", true/*100*/, UID_GetSStream_362));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV182_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV182_Extract_GetSStream_362> extractor_0_ptr;
        SStreamV3ExtractorType_SV182_Extract_GetSStream_362 * extractor_0 = CreateExtractor_SV182_Extract_GetSStream_362(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_363;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_363> sorter_Process_363_ptr (new SorterType_Process_363(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_363));
        SorterType_Process_363 * sorter_Process_363 = sorter_Process_363_ptr.get();
        ULONG sorter_Process_363_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_363, BinaryOutputPolicy<typename SorterType_Process_363::Schema>, BinaryOutputStream, false> OutputerType1_SV182_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV182_Extract> outputer_SV182_Extract_out0_ptr(new OutputerType1_SV182_Extract(sorter_Process_363, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV182_Extract_out0));
        OutputerType1_SV182_Extract * outputer_SV182_Extract_out0 = outputer_SV182_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV182_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_363::Schema row;
            outputer_SV182_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV182_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV182_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV182_Extract
#pragma region SV183_Extract
#if defined(COMPILE_SV183_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_365>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV183_Extract_GetSStream_364;
    SStreamV3ExtractorType_SV183_Extract_GetSStream_364 * CreateExtractor_SV183_Extract_GetSStream_364(unique_ptr<SStreamV3ExtractorType_SV183_Extract_GetSStream_364> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV183_Extract_GetSStream_364(364, "", true/*100*/, UID_GetSStream_364));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV183_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV183_Extract_GetSStream_364> extractor_0_ptr;
        SStreamV3ExtractorType_SV183_Extract_GetSStream_364 * extractor_0 = CreateExtractor_SV183_Extract_GetSStream_364(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_365;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_365> sorter_Process_365_ptr (new SorterType_Process_365(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_365));
        SorterType_Process_365 * sorter_Process_365 = sorter_Process_365_ptr.get();
        ULONG sorter_Process_365_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_365, BinaryOutputPolicy<typename SorterType_Process_365::Schema>, BinaryOutputStream, false> OutputerType1_SV183_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV183_Extract> outputer_SV183_Extract_out0_ptr(new OutputerType1_SV183_Extract(sorter_Process_365, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV183_Extract_out0));
        OutputerType1_SV183_Extract * outputer_SV183_Extract_out0 = outputer_SV183_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV183_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_365::Schema row;
            outputer_SV183_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV183_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV183_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV183_Extract
#pragma region SV184_Extract
#if defined(COMPILE_SV184_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_367>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV184_Extract_GetSStream_366;
    SStreamV3ExtractorType_SV184_Extract_GetSStream_366 * CreateExtractor_SV184_Extract_GetSStream_366(unique_ptr<SStreamV3ExtractorType_SV184_Extract_GetSStream_366> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV184_Extract_GetSStream_366(366, "", true/*100*/, UID_GetSStream_366));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV184_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV184_Extract_GetSStream_366> extractor_0_ptr;
        SStreamV3ExtractorType_SV184_Extract_GetSStream_366 * extractor_0 = CreateExtractor_SV184_Extract_GetSStream_366(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_367;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_367> sorter_Process_367_ptr (new SorterType_Process_367(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_367));
        SorterType_Process_367 * sorter_Process_367 = sorter_Process_367_ptr.get();
        ULONG sorter_Process_367_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_367, BinaryOutputPolicy<typename SorterType_Process_367::Schema>, BinaryOutputStream, false> OutputerType1_SV184_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV184_Extract> outputer_SV184_Extract_out0_ptr(new OutputerType1_SV184_Extract(sorter_Process_367, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV184_Extract_out0));
        OutputerType1_SV184_Extract * outputer_SV184_Extract_out0 = outputer_SV184_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV184_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_367::Schema row;
            outputer_SV184_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV184_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV184_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV184_Extract
#pragma region SV185_Extract
#if defined(COMPILE_SV185_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_369>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV185_Extract_GetSStream_368;
    SStreamV3ExtractorType_SV185_Extract_GetSStream_368 * CreateExtractor_SV185_Extract_GetSStream_368(unique_ptr<SStreamV3ExtractorType_SV185_Extract_GetSStream_368> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV185_Extract_GetSStream_368(368, "", true/*100*/, UID_GetSStream_368));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV185_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV185_Extract_GetSStream_368> extractor_0_ptr;
        SStreamV3ExtractorType_SV185_Extract_GetSStream_368 * extractor_0 = CreateExtractor_SV185_Extract_GetSStream_368(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_369;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_369> sorter_Process_369_ptr (new SorterType_Process_369(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_369));
        SorterType_Process_369 * sorter_Process_369 = sorter_Process_369_ptr.get();
        ULONG sorter_Process_369_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_369, BinaryOutputPolicy<typename SorterType_Process_369::Schema>, BinaryOutputStream, false> OutputerType1_SV185_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV185_Extract> outputer_SV185_Extract_out0_ptr(new OutputerType1_SV185_Extract(sorter_Process_369, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV185_Extract_out0));
        OutputerType1_SV185_Extract * outputer_SV185_Extract_out0 = outputer_SV185_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV185_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_369::Schema row;
            outputer_SV185_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV185_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV185_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV185_Extract
#pragma region SV186_Extract
#if defined(COMPILE_SV186_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_371>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV186_Extract_GetSStream_370;
    SStreamV3ExtractorType_SV186_Extract_GetSStream_370 * CreateExtractor_SV186_Extract_GetSStream_370(unique_ptr<SStreamV3ExtractorType_SV186_Extract_GetSStream_370> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV186_Extract_GetSStream_370(370, "", true/*100*/, UID_GetSStream_370));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV186_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV186_Extract_GetSStream_370> extractor_0_ptr;
        SStreamV3ExtractorType_SV186_Extract_GetSStream_370 * extractor_0 = CreateExtractor_SV186_Extract_GetSStream_370(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_371;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_371> sorter_Process_371_ptr (new SorterType_Process_371(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_371));
        SorterType_Process_371 * sorter_Process_371 = sorter_Process_371_ptr.get();
        ULONG sorter_Process_371_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_371, BinaryOutputPolicy<typename SorterType_Process_371::Schema>, BinaryOutputStream, false> OutputerType1_SV186_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV186_Extract> outputer_SV186_Extract_out0_ptr(new OutputerType1_SV186_Extract(sorter_Process_371, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV186_Extract_out0));
        OutputerType1_SV186_Extract * outputer_SV186_Extract_out0 = outputer_SV186_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV186_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_371::Schema row;
            outputer_SV186_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV186_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV186_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV186_Extract
#pragma region SV187_Extract
#if defined(COMPILE_SV187_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_373>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV187_Extract_GetSStream_372;
    SStreamV3ExtractorType_SV187_Extract_GetSStream_372 * CreateExtractor_SV187_Extract_GetSStream_372(unique_ptr<SStreamV3ExtractorType_SV187_Extract_GetSStream_372> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV187_Extract_GetSStream_372(372, "", true/*100*/, UID_GetSStream_372));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV187_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV187_Extract_GetSStream_372> extractor_0_ptr;
        SStreamV3ExtractorType_SV187_Extract_GetSStream_372 * extractor_0 = CreateExtractor_SV187_Extract_GetSStream_372(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_373;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_373> sorter_Process_373_ptr (new SorterType_Process_373(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_373));
        SorterType_Process_373 * sorter_Process_373 = sorter_Process_373_ptr.get();
        ULONG sorter_Process_373_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_373, BinaryOutputPolicy<typename SorterType_Process_373::Schema>, BinaryOutputStream, false> OutputerType1_SV187_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV187_Extract> outputer_SV187_Extract_out0_ptr(new OutputerType1_SV187_Extract(sorter_Process_373, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV187_Extract_out0));
        OutputerType1_SV187_Extract * outputer_SV187_Extract_out0 = outputer_SV187_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV187_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_373::Schema row;
            outputer_SV187_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV187_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV187_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV187_Extract
#pragma region SV188_Extract
#if defined(COMPILE_SV188_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_375>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV188_Extract_GetSStream_374;
    SStreamV3ExtractorType_SV188_Extract_GetSStream_374 * CreateExtractor_SV188_Extract_GetSStream_374(unique_ptr<SStreamV3ExtractorType_SV188_Extract_GetSStream_374> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV188_Extract_GetSStream_374(374, "", true/*100*/, UID_GetSStream_374));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV188_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV188_Extract_GetSStream_374> extractor_0_ptr;
        SStreamV3ExtractorType_SV188_Extract_GetSStream_374 * extractor_0 = CreateExtractor_SV188_Extract_GetSStream_374(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_375;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_375> sorter_Process_375_ptr (new SorterType_Process_375(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_375));
        SorterType_Process_375 * sorter_Process_375 = sorter_Process_375_ptr.get();
        ULONG sorter_Process_375_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_375, BinaryOutputPolicy<typename SorterType_Process_375::Schema>, BinaryOutputStream, false> OutputerType1_SV188_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV188_Extract> outputer_SV188_Extract_out0_ptr(new OutputerType1_SV188_Extract(sorter_Process_375, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV188_Extract_out0));
        OutputerType1_SV188_Extract * outputer_SV188_Extract_out0 = outputer_SV188_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV188_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_375::Schema row;
            outputer_SV188_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV188_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV188_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV188_Extract
#pragma region SV189_Extract
#if defined(COMPILE_SV189_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_377>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV189_Extract_GetSStream_376;
    SStreamV3ExtractorType_SV189_Extract_GetSStream_376 * CreateExtractor_SV189_Extract_GetSStream_376(unique_ptr<SStreamV3ExtractorType_SV189_Extract_GetSStream_376> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV189_Extract_GetSStream_376(376, "", true/*100*/, UID_GetSStream_376));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV189_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV189_Extract_GetSStream_376> extractor_0_ptr;
        SStreamV3ExtractorType_SV189_Extract_GetSStream_376 * extractor_0 = CreateExtractor_SV189_Extract_GetSStream_376(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_377;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_377> sorter_Process_377_ptr (new SorterType_Process_377(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_377));
        SorterType_Process_377 * sorter_Process_377 = sorter_Process_377_ptr.get();
        ULONG sorter_Process_377_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_377, BinaryOutputPolicy<typename SorterType_Process_377::Schema>, BinaryOutputStream, false> OutputerType1_SV189_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV189_Extract> outputer_SV189_Extract_out0_ptr(new OutputerType1_SV189_Extract(sorter_Process_377, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV189_Extract_out0));
        OutputerType1_SV189_Extract * outputer_SV189_Extract_out0 = outputer_SV189_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV189_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_377::Schema row;
            outputer_SV189_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV189_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV189_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV189_Extract
#pragma region SV190_Extract
#if defined(COMPILE_SV190_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_379>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV190_Extract_GetSStream_378;
    SStreamV3ExtractorType_SV190_Extract_GetSStream_378 * CreateExtractor_SV190_Extract_GetSStream_378(unique_ptr<SStreamV3ExtractorType_SV190_Extract_GetSStream_378> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV190_Extract_GetSStream_378(378, "", true/*100*/, UID_GetSStream_378));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV190_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV190_Extract_GetSStream_378> extractor_0_ptr;
        SStreamV3ExtractorType_SV190_Extract_GetSStream_378 * extractor_0 = CreateExtractor_SV190_Extract_GetSStream_378(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_379;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_379> sorter_Process_379_ptr (new SorterType_Process_379(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_379));
        SorterType_Process_379 * sorter_Process_379 = sorter_Process_379_ptr.get();
        ULONG sorter_Process_379_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_379, BinaryOutputPolicy<typename SorterType_Process_379::Schema>, BinaryOutputStream, false> OutputerType1_SV190_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV190_Extract> outputer_SV190_Extract_out0_ptr(new OutputerType1_SV190_Extract(sorter_Process_379, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV190_Extract_out0));
        OutputerType1_SV190_Extract * outputer_SV190_Extract_out0 = outputer_SV190_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV190_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_379::Schema row;
            outputer_SV190_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV190_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV190_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV190_Extract
#pragma region SV191_Extract
#if defined(COMPILE_SV191_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_381>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV191_Extract_GetSStream_380;
    SStreamV3ExtractorType_SV191_Extract_GetSStream_380 * CreateExtractor_SV191_Extract_GetSStream_380(unique_ptr<SStreamV3ExtractorType_SV191_Extract_GetSStream_380> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV191_Extract_GetSStream_380(380, "", true/*100*/, UID_GetSStream_380));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV191_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV191_Extract_GetSStream_380> extractor_0_ptr;
        SStreamV3ExtractorType_SV191_Extract_GetSStream_380 * extractor_0 = CreateExtractor_SV191_Extract_GetSStream_380(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_381;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_381> sorter_Process_381_ptr (new SorterType_Process_381(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_381));
        SorterType_Process_381 * sorter_Process_381 = sorter_Process_381_ptr.get();
        ULONG sorter_Process_381_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_381, BinaryOutputPolicy<typename SorterType_Process_381::Schema>, BinaryOutputStream, false> OutputerType1_SV191_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV191_Extract> outputer_SV191_Extract_out0_ptr(new OutputerType1_SV191_Extract(sorter_Process_381, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV191_Extract_out0));
        OutputerType1_SV191_Extract * outputer_SV191_Extract_out0 = outputer_SV191_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV191_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_381::Schema row;
            outputer_SV191_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV191_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV191_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV191_Extract
#pragma region SV192_Extract
#if defined(COMPILE_SV192_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_383>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV192_Extract_GetSStream_382;
    SStreamV3ExtractorType_SV192_Extract_GetSStream_382 * CreateExtractor_SV192_Extract_GetSStream_382(unique_ptr<SStreamV3ExtractorType_SV192_Extract_GetSStream_382> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV192_Extract_GetSStream_382(382, "", true/*100*/, UID_GetSStream_382));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV192_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV192_Extract_GetSStream_382> extractor_0_ptr;
        SStreamV3ExtractorType_SV192_Extract_GetSStream_382 * extractor_0 = CreateExtractor_SV192_Extract_GetSStream_382(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_383;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_383> sorter_Process_383_ptr (new SorterType_Process_383(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_383));
        SorterType_Process_383 * sorter_Process_383 = sorter_Process_383_ptr.get();
        ULONG sorter_Process_383_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_383, BinaryOutputPolicy<typename SorterType_Process_383::Schema>, BinaryOutputStream, false> OutputerType1_SV192_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV192_Extract> outputer_SV192_Extract_out0_ptr(new OutputerType1_SV192_Extract(sorter_Process_383, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV192_Extract_out0));
        OutputerType1_SV192_Extract * outputer_SV192_Extract_out0 = outputer_SV192_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV192_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_383::Schema row;
            outputer_SV192_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV192_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV192_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV192_Extract
#pragma region SV193_Extract
#if defined(COMPILE_SV193_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_385>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV193_Extract_GetSStream_384;
    SStreamV3ExtractorType_SV193_Extract_GetSStream_384 * CreateExtractor_SV193_Extract_GetSStream_384(unique_ptr<SStreamV3ExtractorType_SV193_Extract_GetSStream_384> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV193_Extract_GetSStream_384(384, "", true/*100*/, UID_GetSStream_384));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV193_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV193_Extract_GetSStream_384> extractor_0_ptr;
        SStreamV3ExtractorType_SV193_Extract_GetSStream_384 * extractor_0 = CreateExtractor_SV193_Extract_GetSStream_384(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_385;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_385> sorter_Process_385_ptr (new SorterType_Process_385(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_385));
        SorterType_Process_385 * sorter_Process_385 = sorter_Process_385_ptr.get();
        ULONG sorter_Process_385_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_385, BinaryOutputPolicy<typename SorterType_Process_385::Schema>, BinaryOutputStream, false> OutputerType1_SV193_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV193_Extract> outputer_SV193_Extract_out0_ptr(new OutputerType1_SV193_Extract(sorter_Process_385, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV193_Extract_out0));
        OutputerType1_SV193_Extract * outputer_SV193_Extract_out0 = outputer_SV193_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV193_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_385::Schema row;
            outputer_SV193_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV193_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV193_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV193_Extract
#pragma region SV194_Extract
#if defined(COMPILE_SV194_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_387>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV194_Extract_GetSStream_386;
    SStreamV3ExtractorType_SV194_Extract_GetSStream_386 * CreateExtractor_SV194_Extract_GetSStream_386(unique_ptr<SStreamV3ExtractorType_SV194_Extract_GetSStream_386> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV194_Extract_GetSStream_386(386, "", true/*100*/, UID_GetSStream_386));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV194_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV194_Extract_GetSStream_386> extractor_0_ptr;
        SStreamV3ExtractorType_SV194_Extract_GetSStream_386 * extractor_0 = CreateExtractor_SV194_Extract_GetSStream_386(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_387;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_387> sorter_Process_387_ptr (new SorterType_Process_387(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_387));
        SorterType_Process_387 * sorter_Process_387 = sorter_Process_387_ptr.get();
        ULONG sorter_Process_387_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_387, BinaryOutputPolicy<typename SorterType_Process_387::Schema>, BinaryOutputStream, false> OutputerType1_SV194_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV194_Extract> outputer_SV194_Extract_out0_ptr(new OutputerType1_SV194_Extract(sorter_Process_387, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV194_Extract_out0));
        OutputerType1_SV194_Extract * outputer_SV194_Extract_out0 = outputer_SV194_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV194_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_387::Schema row;
            outputer_SV194_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV194_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV194_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV194_Extract
#pragma region SV195_Extract
#if defined(COMPILE_SV195_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_389>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV195_Extract_GetSStream_388;
    SStreamV3ExtractorType_SV195_Extract_GetSStream_388 * CreateExtractor_SV195_Extract_GetSStream_388(unique_ptr<SStreamV3ExtractorType_SV195_Extract_GetSStream_388> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV195_Extract_GetSStream_388(388, "", true/*100*/, UID_GetSStream_388));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV195_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV195_Extract_GetSStream_388> extractor_0_ptr;
        SStreamV3ExtractorType_SV195_Extract_GetSStream_388 * extractor_0 = CreateExtractor_SV195_Extract_GetSStream_388(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_389;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_389> sorter_Process_389_ptr (new SorterType_Process_389(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_389));
        SorterType_Process_389 * sorter_Process_389 = sorter_Process_389_ptr.get();
        ULONG sorter_Process_389_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_389, BinaryOutputPolicy<typename SorterType_Process_389::Schema>, BinaryOutputStream, false> OutputerType1_SV195_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV195_Extract> outputer_SV195_Extract_out0_ptr(new OutputerType1_SV195_Extract(sorter_Process_389, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV195_Extract_out0));
        OutputerType1_SV195_Extract * outputer_SV195_Extract_out0 = outputer_SV195_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV195_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_389::Schema row;
            outputer_SV195_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV195_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV195_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV195_Extract
#pragma region SV196_Extract
#if defined(COMPILE_SV196_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_391>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV196_Extract_GetSStream_390;
    SStreamV3ExtractorType_SV196_Extract_GetSStream_390 * CreateExtractor_SV196_Extract_GetSStream_390(unique_ptr<SStreamV3ExtractorType_SV196_Extract_GetSStream_390> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV196_Extract_GetSStream_390(390, "", true/*100*/, UID_GetSStream_390));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV196_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV196_Extract_GetSStream_390> extractor_0_ptr;
        SStreamV3ExtractorType_SV196_Extract_GetSStream_390 * extractor_0 = CreateExtractor_SV196_Extract_GetSStream_390(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_391;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_391> sorter_Process_391_ptr (new SorterType_Process_391(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_391));
        SorterType_Process_391 * sorter_Process_391 = sorter_Process_391_ptr.get();
        ULONG sorter_Process_391_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_391, BinaryOutputPolicy<typename SorterType_Process_391::Schema>, BinaryOutputStream, false> OutputerType1_SV196_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV196_Extract> outputer_SV196_Extract_out0_ptr(new OutputerType1_SV196_Extract(sorter_Process_391, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV196_Extract_out0));
        OutputerType1_SV196_Extract * outputer_SV196_Extract_out0 = outputer_SV196_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV196_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_391::Schema row;
            outputer_SV196_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV196_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV196_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV196_Extract
#pragma region SV197_Extract
#if defined(COMPILE_SV197_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_393>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV197_Extract_GetSStream_392;
    SStreamV3ExtractorType_SV197_Extract_GetSStream_392 * CreateExtractor_SV197_Extract_GetSStream_392(unique_ptr<SStreamV3ExtractorType_SV197_Extract_GetSStream_392> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV197_Extract_GetSStream_392(392, "", true/*100*/, UID_GetSStream_392));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV197_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV197_Extract_GetSStream_392> extractor_0_ptr;
        SStreamV3ExtractorType_SV197_Extract_GetSStream_392 * extractor_0 = CreateExtractor_SV197_Extract_GetSStream_392(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_393;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_393> sorter_Process_393_ptr (new SorterType_Process_393(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_393));
        SorterType_Process_393 * sorter_Process_393 = sorter_Process_393_ptr.get();
        ULONG sorter_Process_393_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_393, BinaryOutputPolicy<typename SorterType_Process_393::Schema>, BinaryOutputStream, false> OutputerType1_SV197_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV197_Extract> outputer_SV197_Extract_out0_ptr(new OutputerType1_SV197_Extract(sorter_Process_393, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV197_Extract_out0));
        OutputerType1_SV197_Extract * outputer_SV197_Extract_out0 = outputer_SV197_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV197_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_393::Schema row;
            outputer_SV197_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV197_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV197_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV197_Extract
#pragma region SV198_Extract
#if defined(COMPILE_SV198_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_395>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV198_Extract_GetSStream_394;
    SStreamV3ExtractorType_SV198_Extract_GetSStream_394 * CreateExtractor_SV198_Extract_GetSStream_394(unique_ptr<SStreamV3ExtractorType_SV198_Extract_GetSStream_394> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV198_Extract_GetSStream_394(394, "", true/*100*/, UID_GetSStream_394));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV198_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV198_Extract_GetSStream_394> extractor_0_ptr;
        SStreamV3ExtractorType_SV198_Extract_GetSStream_394 * extractor_0 = CreateExtractor_SV198_Extract_GetSStream_394(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_395;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_395> sorter_Process_395_ptr (new SorterType_Process_395(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_395));
        SorterType_Process_395 * sorter_Process_395 = sorter_Process_395_ptr.get();
        ULONG sorter_Process_395_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_395, BinaryOutputPolicy<typename SorterType_Process_395::Schema>, BinaryOutputStream, false> OutputerType1_SV198_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV198_Extract> outputer_SV198_Extract_out0_ptr(new OutputerType1_SV198_Extract(sorter_Process_395, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV198_Extract_out0));
        OutputerType1_SV198_Extract * outputer_SV198_Extract_out0 = outputer_SV198_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV198_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_395::Schema row;
            outputer_SV198_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV198_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV198_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV198_Extract
#pragma region SV199_Extract
#if defined(COMPILE_SV199_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_397>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV199_Extract_GetSStream_396;
    SStreamV3ExtractorType_SV199_Extract_GetSStream_396 * CreateExtractor_SV199_Extract_GetSStream_396(unique_ptr<SStreamV3ExtractorType_SV199_Extract_GetSStream_396> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV199_Extract_GetSStream_396(396, "", true/*100*/, UID_GetSStream_396));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV199_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV199_Extract_GetSStream_396> extractor_0_ptr;
        SStreamV3ExtractorType_SV199_Extract_GetSStream_396 * extractor_0 = CreateExtractor_SV199_Extract_GetSStream_396(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_397;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_397> sorter_Process_397_ptr (new SorterType_Process_397(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_397));
        SorterType_Process_397 * sorter_Process_397 = sorter_Process_397_ptr.get();
        ULONG sorter_Process_397_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_397, BinaryOutputPolicy<typename SorterType_Process_397::Schema>, BinaryOutputStream, false> OutputerType1_SV199_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV199_Extract> outputer_SV199_Extract_out0_ptr(new OutputerType1_SV199_Extract(sorter_Process_397, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV199_Extract_out0));
        OutputerType1_SV199_Extract * outputer_SV199_Extract_out0 = outputer_SV199_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV199_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_397::Schema row;
            outputer_SV199_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV199_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV199_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV199_Extract
#pragma region SV200_Extract
#if defined(COMPILE_SV200_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_399>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV200_Extract_GetSStream_398;
    SStreamV3ExtractorType_SV200_Extract_GetSStream_398 * CreateExtractor_SV200_Extract_GetSStream_398(unique_ptr<SStreamV3ExtractorType_SV200_Extract_GetSStream_398> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV200_Extract_GetSStream_398(398, "", true/*100*/, UID_GetSStream_398));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV200_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV200_Extract_GetSStream_398> extractor_0_ptr;
        SStreamV3ExtractorType_SV200_Extract_GetSStream_398 * extractor_0 = CreateExtractor_SV200_Extract_GetSStream_398(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_399;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_399> sorter_Process_399_ptr (new SorterType_Process_399(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_399));
        SorterType_Process_399 * sorter_Process_399 = sorter_Process_399_ptr.get();
        ULONG sorter_Process_399_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_399, BinaryOutputPolicy<typename SorterType_Process_399::Schema>, BinaryOutputStream, false> OutputerType1_SV200_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV200_Extract> outputer_SV200_Extract_out0_ptr(new OutputerType1_SV200_Extract(sorter_Process_399, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV200_Extract_out0));
        OutputerType1_SV200_Extract * outputer_SV200_Extract_out0 = outputer_SV200_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV200_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_399::Schema row;
            outputer_SV200_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV200_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV200_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV200_Extract
#pragma region SV201_Extract
#if defined(COMPILE_SV201_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_401>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV201_Extract_GetSStream_400;
    SStreamV3ExtractorType_SV201_Extract_GetSStream_400 * CreateExtractor_SV201_Extract_GetSStream_400(unique_ptr<SStreamV3ExtractorType_SV201_Extract_GetSStream_400> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV201_Extract_GetSStream_400(400, "", true/*100*/, UID_GetSStream_400));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV201_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV201_Extract_GetSStream_400> extractor_0_ptr;
        SStreamV3ExtractorType_SV201_Extract_GetSStream_400 * extractor_0 = CreateExtractor_SV201_Extract_GetSStream_400(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_401;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_401> sorter_Process_401_ptr (new SorterType_Process_401(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_401));
        SorterType_Process_401 * sorter_Process_401 = sorter_Process_401_ptr.get();
        ULONG sorter_Process_401_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_401, BinaryOutputPolicy<typename SorterType_Process_401::Schema>, BinaryOutputStream, false> OutputerType1_SV201_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV201_Extract> outputer_SV201_Extract_out0_ptr(new OutputerType1_SV201_Extract(sorter_Process_401, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV201_Extract_out0));
        OutputerType1_SV201_Extract * outputer_SV201_Extract_out0 = outputer_SV201_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV201_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_401::Schema row;
            outputer_SV201_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV201_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV201_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV201_Extract
#pragma region SV202_Extract
#if defined(COMPILE_SV202_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_403>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV202_Extract_GetSStream_402;
    SStreamV3ExtractorType_SV202_Extract_GetSStream_402 * CreateExtractor_SV202_Extract_GetSStream_402(unique_ptr<SStreamV3ExtractorType_SV202_Extract_GetSStream_402> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV202_Extract_GetSStream_402(402, "", true/*100*/, UID_GetSStream_402));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV202_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV202_Extract_GetSStream_402> extractor_0_ptr;
        SStreamV3ExtractorType_SV202_Extract_GetSStream_402 * extractor_0 = CreateExtractor_SV202_Extract_GetSStream_402(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_403;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_403> sorter_Process_403_ptr (new SorterType_Process_403(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_403));
        SorterType_Process_403 * sorter_Process_403 = sorter_Process_403_ptr.get();
        ULONG sorter_Process_403_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_403, BinaryOutputPolicy<typename SorterType_Process_403::Schema>, BinaryOutputStream, false> OutputerType1_SV202_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV202_Extract> outputer_SV202_Extract_out0_ptr(new OutputerType1_SV202_Extract(sorter_Process_403, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV202_Extract_out0));
        OutputerType1_SV202_Extract * outputer_SV202_Extract_out0 = outputer_SV202_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV202_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_403::Schema row;
            outputer_SV202_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV202_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV202_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV202_Extract
#pragma region SV203_Extract
#if defined(COMPILE_SV203_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_405>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV203_Extract_GetSStream_404;
    SStreamV3ExtractorType_SV203_Extract_GetSStream_404 * CreateExtractor_SV203_Extract_GetSStream_404(unique_ptr<SStreamV3ExtractorType_SV203_Extract_GetSStream_404> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV203_Extract_GetSStream_404(404, "", true/*100*/, UID_GetSStream_404));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV203_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV203_Extract_GetSStream_404> extractor_0_ptr;
        SStreamV3ExtractorType_SV203_Extract_GetSStream_404 * extractor_0 = CreateExtractor_SV203_Extract_GetSStream_404(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_405;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_405> sorter_Process_405_ptr (new SorterType_Process_405(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_405));
        SorterType_Process_405 * sorter_Process_405 = sorter_Process_405_ptr.get();
        ULONG sorter_Process_405_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_405, BinaryOutputPolicy<typename SorterType_Process_405::Schema>, BinaryOutputStream, false> OutputerType1_SV203_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV203_Extract> outputer_SV203_Extract_out0_ptr(new OutputerType1_SV203_Extract(sorter_Process_405, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV203_Extract_out0));
        OutputerType1_SV203_Extract * outputer_SV203_Extract_out0 = outputer_SV203_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV203_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_405::Schema row;
            outputer_SV203_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV203_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV203_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV203_Extract
#pragma region SV204_Extract
#if defined(COMPILE_SV204_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_407>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV204_Extract_GetSStream_406;
    SStreamV3ExtractorType_SV204_Extract_GetSStream_406 * CreateExtractor_SV204_Extract_GetSStream_406(unique_ptr<SStreamV3ExtractorType_SV204_Extract_GetSStream_406> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV204_Extract_GetSStream_406(406, "", true/*100*/, UID_GetSStream_406));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV204_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV204_Extract_GetSStream_406> extractor_0_ptr;
        SStreamV3ExtractorType_SV204_Extract_GetSStream_406 * extractor_0 = CreateExtractor_SV204_Extract_GetSStream_406(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_407;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_407> sorter_Process_407_ptr (new SorterType_Process_407(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_407));
        SorterType_Process_407 * sorter_Process_407 = sorter_Process_407_ptr.get();
        ULONG sorter_Process_407_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_407, BinaryOutputPolicy<typename SorterType_Process_407::Schema>, BinaryOutputStream, false> OutputerType1_SV204_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV204_Extract> outputer_SV204_Extract_out0_ptr(new OutputerType1_SV204_Extract(sorter_Process_407, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV204_Extract_out0));
        OutputerType1_SV204_Extract * outputer_SV204_Extract_out0 = outputer_SV204_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV204_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_407::Schema row;
            outputer_SV204_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV204_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV204_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV204_Extract
#pragma region SV205_Extract
#if defined(COMPILE_SV205_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_409>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV205_Extract_GetSStream_408;
    SStreamV3ExtractorType_SV205_Extract_GetSStream_408 * CreateExtractor_SV205_Extract_GetSStream_408(unique_ptr<SStreamV3ExtractorType_SV205_Extract_GetSStream_408> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV205_Extract_GetSStream_408(408, "", true/*100*/, UID_GetSStream_408));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV205_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV205_Extract_GetSStream_408> extractor_0_ptr;
        SStreamV3ExtractorType_SV205_Extract_GetSStream_408 * extractor_0 = CreateExtractor_SV205_Extract_GetSStream_408(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_409;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_409> sorter_Process_409_ptr (new SorterType_Process_409(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_409));
        SorterType_Process_409 * sorter_Process_409 = sorter_Process_409_ptr.get();
        ULONG sorter_Process_409_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_409, BinaryOutputPolicy<typename SorterType_Process_409::Schema>, BinaryOutputStream, false> OutputerType1_SV205_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV205_Extract> outputer_SV205_Extract_out0_ptr(new OutputerType1_SV205_Extract(sorter_Process_409, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV205_Extract_out0));
        OutputerType1_SV205_Extract * outputer_SV205_Extract_out0 = outputer_SV205_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV205_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_409::Schema row;
            outputer_SV205_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV205_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV205_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV205_Extract
#pragma region SV206_Extract
#if defined(COMPILE_SV206_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_411>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV206_Extract_GetSStream_410;
    SStreamV3ExtractorType_SV206_Extract_GetSStream_410 * CreateExtractor_SV206_Extract_GetSStream_410(unique_ptr<SStreamV3ExtractorType_SV206_Extract_GetSStream_410> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV206_Extract_GetSStream_410(410, "", true/*100*/, UID_GetSStream_410));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV206_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV206_Extract_GetSStream_410> extractor_0_ptr;
        SStreamV3ExtractorType_SV206_Extract_GetSStream_410 * extractor_0 = CreateExtractor_SV206_Extract_GetSStream_410(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_411;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_411> sorter_Process_411_ptr (new SorterType_Process_411(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_411));
        SorterType_Process_411 * sorter_Process_411 = sorter_Process_411_ptr.get();
        ULONG sorter_Process_411_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_411, BinaryOutputPolicy<typename SorterType_Process_411::Schema>, BinaryOutputStream, false> OutputerType1_SV206_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV206_Extract> outputer_SV206_Extract_out0_ptr(new OutputerType1_SV206_Extract(sorter_Process_411, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV206_Extract_out0));
        OutputerType1_SV206_Extract * outputer_SV206_Extract_out0 = outputer_SV206_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV206_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_411::Schema row;
            outputer_SV206_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV206_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV206_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV206_Extract
#pragma region SV207_Extract
#if defined(COMPILE_SV207_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_413>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV207_Extract_GetSStream_412;
    SStreamV3ExtractorType_SV207_Extract_GetSStream_412 * CreateExtractor_SV207_Extract_GetSStream_412(unique_ptr<SStreamV3ExtractorType_SV207_Extract_GetSStream_412> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV207_Extract_GetSStream_412(412, "", true/*100*/, UID_GetSStream_412));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV207_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV207_Extract_GetSStream_412> extractor_0_ptr;
        SStreamV3ExtractorType_SV207_Extract_GetSStream_412 * extractor_0 = CreateExtractor_SV207_Extract_GetSStream_412(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_413;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_413> sorter_Process_413_ptr (new SorterType_Process_413(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_413));
        SorterType_Process_413 * sorter_Process_413 = sorter_Process_413_ptr.get();
        ULONG sorter_Process_413_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_413, BinaryOutputPolicy<typename SorterType_Process_413::Schema>, BinaryOutputStream, false> OutputerType1_SV207_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV207_Extract> outputer_SV207_Extract_out0_ptr(new OutputerType1_SV207_Extract(sorter_Process_413, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV207_Extract_out0));
        OutputerType1_SV207_Extract * outputer_SV207_Extract_out0 = outputer_SV207_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV207_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_413::Schema row;
            outputer_SV207_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV207_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV207_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV207_Extract
#pragma region SV208_Extract
#if defined(COMPILE_SV208_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_415>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV208_Extract_GetSStream_414;
    SStreamV3ExtractorType_SV208_Extract_GetSStream_414 * CreateExtractor_SV208_Extract_GetSStream_414(unique_ptr<SStreamV3ExtractorType_SV208_Extract_GetSStream_414> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV208_Extract_GetSStream_414(414, "", true/*100*/, UID_GetSStream_414));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV208_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV208_Extract_GetSStream_414> extractor_0_ptr;
        SStreamV3ExtractorType_SV208_Extract_GetSStream_414 * extractor_0 = CreateExtractor_SV208_Extract_GetSStream_414(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_415;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_415> sorter_Process_415_ptr (new SorterType_Process_415(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_415));
        SorterType_Process_415 * sorter_Process_415 = sorter_Process_415_ptr.get();
        ULONG sorter_Process_415_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_415, BinaryOutputPolicy<typename SorterType_Process_415::Schema>, BinaryOutputStream, false> OutputerType1_SV208_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV208_Extract> outputer_SV208_Extract_out0_ptr(new OutputerType1_SV208_Extract(sorter_Process_415, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV208_Extract_out0));
        OutputerType1_SV208_Extract * outputer_SV208_Extract_out0 = outputer_SV208_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV208_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_415::Schema row;
            outputer_SV208_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV208_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV208_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV208_Extract
#pragma region SV209_Extract
#if defined(COMPILE_SV209_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_417>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV209_Extract_GetSStream_416;
    SStreamV3ExtractorType_SV209_Extract_GetSStream_416 * CreateExtractor_SV209_Extract_GetSStream_416(unique_ptr<SStreamV3ExtractorType_SV209_Extract_GetSStream_416> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV209_Extract_GetSStream_416(416, "", true/*100*/, UID_GetSStream_416));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV209_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV209_Extract_GetSStream_416> extractor_0_ptr;
        SStreamV3ExtractorType_SV209_Extract_GetSStream_416 * extractor_0 = CreateExtractor_SV209_Extract_GetSStream_416(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_417;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_417> sorter_Process_417_ptr (new SorterType_Process_417(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_417));
        SorterType_Process_417 * sorter_Process_417 = sorter_Process_417_ptr.get();
        ULONG sorter_Process_417_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_417, BinaryOutputPolicy<typename SorterType_Process_417::Schema>, BinaryOutputStream, false> OutputerType1_SV209_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV209_Extract> outputer_SV209_Extract_out0_ptr(new OutputerType1_SV209_Extract(sorter_Process_417, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV209_Extract_out0));
        OutputerType1_SV209_Extract * outputer_SV209_Extract_out0 = outputer_SV209_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV209_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_417::Schema row;
            outputer_SV209_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV209_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV209_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV209_Extract
#pragma region SV210_Extract
#if defined(COMPILE_SV210_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_419>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV210_Extract_GetSStream_418;
    SStreamV3ExtractorType_SV210_Extract_GetSStream_418 * CreateExtractor_SV210_Extract_GetSStream_418(unique_ptr<SStreamV3ExtractorType_SV210_Extract_GetSStream_418> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV210_Extract_GetSStream_418(418, "", true/*100*/, UID_GetSStream_418));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV210_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV210_Extract_GetSStream_418> extractor_0_ptr;
        SStreamV3ExtractorType_SV210_Extract_GetSStream_418 * extractor_0 = CreateExtractor_SV210_Extract_GetSStream_418(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_419;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_419> sorter_Process_419_ptr (new SorterType_Process_419(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_419));
        SorterType_Process_419 * sorter_Process_419 = sorter_Process_419_ptr.get();
        ULONG sorter_Process_419_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_419, BinaryOutputPolicy<typename SorterType_Process_419::Schema>, BinaryOutputStream, false> OutputerType1_SV210_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV210_Extract> outputer_SV210_Extract_out0_ptr(new OutputerType1_SV210_Extract(sorter_Process_419, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV210_Extract_out0));
        OutputerType1_SV210_Extract * outputer_SV210_Extract_out0 = outputer_SV210_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV210_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_419::Schema row;
            outputer_SV210_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV210_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV210_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV210_Extract
#pragma region SV211_Extract
#if defined(COMPILE_SV211_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_421>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV211_Extract_GetSStream_420;
    SStreamV3ExtractorType_SV211_Extract_GetSStream_420 * CreateExtractor_SV211_Extract_GetSStream_420(unique_ptr<SStreamV3ExtractorType_SV211_Extract_GetSStream_420> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV211_Extract_GetSStream_420(420, "", true/*100*/, UID_GetSStream_420));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV211_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV211_Extract_GetSStream_420> extractor_0_ptr;
        SStreamV3ExtractorType_SV211_Extract_GetSStream_420 * extractor_0 = CreateExtractor_SV211_Extract_GetSStream_420(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_421;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_421> sorter_Process_421_ptr (new SorterType_Process_421(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_421));
        SorterType_Process_421 * sorter_Process_421 = sorter_Process_421_ptr.get();
        ULONG sorter_Process_421_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_421, BinaryOutputPolicy<typename SorterType_Process_421::Schema>, BinaryOutputStream, false> OutputerType1_SV211_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV211_Extract> outputer_SV211_Extract_out0_ptr(new OutputerType1_SV211_Extract(sorter_Process_421, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV211_Extract_out0));
        OutputerType1_SV211_Extract * outputer_SV211_Extract_out0 = outputer_SV211_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV211_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_421::Schema row;
            outputer_SV211_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV211_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV211_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV211_Extract
#pragma region SV212_Extract
#if defined(COMPILE_SV212_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_423>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV212_Extract_GetSStream_422;
    SStreamV3ExtractorType_SV212_Extract_GetSStream_422 * CreateExtractor_SV212_Extract_GetSStream_422(unique_ptr<SStreamV3ExtractorType_SV212_Extract_GetSStream_422> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV212_Extract_GetSStream_422(422, "", true/*100*/, UID_GetSStream_422));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV212_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV212_Extract_GetSStream_422> extractor_0_ptr;
        SStreamV3ExtractorType_SV212_Extract_GetSStream_422 * extractor_0 = CreateExtractor_SV212_Extract_GetSStream_422(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_423;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_423> sorter_Process_423_ptr (new SorterType_Process_423(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_423));
        SorterType_Process_423 * sorter_Process_423 = sorter_Process_423_ptr.get();
        ULONG sorter_Process_423_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_423, BinaryOutputPolicy<typename SorterType_Process_423::Schema>, BinaryOutputStream, false> OutputerType1_SV212_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV212_Extract> outputer_SV212_Extract_out0_ptr(new OutputerType1_SV212_Extract(sorter_Process_423, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV212_Extract_out0));
        OutputerType1_SV212_Extract * outputer_SV212_Extract_out0 = outputer_SV212_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV212_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_423::Schema row;
            outputer_SV212_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV212_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV212_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV212_Extract
#pragma region SV213_Extract
#if defined(COMPILE_SV213_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_425>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV213_Extract_GetSStream_424;
    SStreamV3ExtractorType_SV213_Extract_GetSStream_424 * CreateExtractor_SV213_Extract_GetSStream_424(unique_ptr<SStreamV3ExtractorType_SV213_Extract_GetSStream_424> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV213_Extract_GetSStream_424(424, "", true/*100*/, UID_GetSStream_424));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV213_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV213_Extract_GetSStream_424> extractor_0_ptr;
        SStreamV3ExtractorType_SV213_Extract_GetSStream_424 * extractor_0 = CreateExtractor_SV213_Extract_GetSStream_424(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_425;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_425> sorter_Process_425_ptr (new SorterType_Process_425(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_425));
        SorterType_Process_425 * sorter_Process_425 = sorter_Process_425_ptr.get();
        ULONG sorter_Process_425_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_425, BinaryOutputPolicy<typename SorterType_Process_425::Schema>, BinaryOutputStream, false> OutputerType1_SV213_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV213_Extract> outputer_SV213_Extract_out0_ptr(new OutputerType1_SV213_Extract(sorter_Process_425, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV213_Extract_out0));
        OutputerType1_SV213_Extract * outputer_SV213_Extract_out0 = outputer_SV213_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV213_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_425::Schema row;
            outputer_SV213_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV213_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV213_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV213_Extract
#pragma region SV214_Extract
#if defined(COMPILE_SV214_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_427>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV214_Extract_GetSStream_426;
    SStreamV3ExtractorType_SV214_Extract_GetSStream_426 * CreateExtractor_SV214_Extract_GetSStream_426(unique_ptr<SStreamV3ExtractorType_SV214_Extract_GetSStream_426> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV214_Extract_GetSStream_426(426, "", true/*100*/, UID_GetSStream_426));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV214_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV214_Extract_GetSStream_426> extractor_0_ptr;
        SStreamV3ExtractorType_SV214_Extract_GetSStream_426 * extractor_0 = CreateExtractor_SV214_Extract_GetSStream_426(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_427;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_427> sorter_Process_427_ptr (new SorterType_Process_427(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_427));
        SorterType_Process_427 * sorter_Process_427 = sorter_Process_427_ptr.get();
        ULONG sorter_Process_427_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_427, BinaryOutputPolicy<typename SorterType_Process_427::Schema>, BinaryOutputStream, false> OutputerType1_SV214_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV214_Extract> outputer_SV214_Extract_out0_ptr(new OutputerType1_SV214_Extract(sorter_Process_427, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV214_Extract_out0));
        OutputerType1_SV214_Extract * outputer_SV214_Extract_out0 = outputer_SV214_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV214_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_427::Schema row;
            outputer_SV214_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV214_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV214_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV214_Extract
#pragma region SV215_Extract
#if defined(COMPILE_SV215_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_429>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV215_Extract_GetSStream_428;
    SStreamV3ExtractorType_SV215_Extract_GetSStream_428 * CreateExtractor_SV215_Extract_GetSStream_428(unique_ptr<SStreamV3ExtractorType_SV215_Extract_GetSStream_428> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV215_Extract_GetSStream_428(428, "", true/*100*/, UID_GetSStream_428));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV215_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV215_Extract_GetSStream_428> extractor_0_ptr;
        SStreamV3ExtractorType_SV215_Extract_GetSStream_428 * extractor_0 = CreateExtractor_SV215_Extract_GetSStream_428(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_429;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_429> sorter_Process_429_ptr (new SorterType_Process_429(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_429));
        SorterType_Process_429 * sorter_Process_429 = sorter_Process_429_ptr.get();
        ULONG sorter_Process_429_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_429, BinaryOutputPolicy<typename SorterType_Process_429::Schema>, BinaryOutputStream, false> OutputerType1_SV215_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV215_Extract> outputer_SV215_Extract_out0_ptr(new OutputerType1_SV215_Extract(sorter_Process_429, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV215_Extract_out0));
        OutputerType1_SV215_Extract * outputer_SV215_Extract_out0 = outputer_SV215_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV215_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_429::Schema row;
            outputer_SV215_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV215_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV215_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV215_Extract
#pragma region SV216_Extract
#if defined(COMPILE_SV216_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_431>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV216_Extract_GetSStream_430;
    SStreamV3ExtractorType_SV216_Extract_GetSStream_430 * CreateExtractor_SV216_Extract_GetSStream_430(unique_ptr<SStreamV3ExtractorType_SV216_Extract_GetSStream_430> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV216_Extract_GetSStream_430(430, "", true/*100*/, UID_GetSStream_430));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV216_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV216_Extract_GetSStream_430> extractor_0_ptr;
        SStreamV3ExtractorType_SV216_Extract_GetSStream_430 * extractor_0 = CreateExtractor_SV216_Extract_GetSStream_430(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_431;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_431> sorter_Process_431_ptr (new SorterType_Process_431(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_431));
        SorterType_Process_431 * sorter_Process_431 = sorter_Process_431_ptr.get();
        ULONG sorter_Process_431_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_431, BinaryOutputPolicy<typename SorterType_Process_431::Schema>, BinaryOutputStream, false> OutputerType1_SV216_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV216_Extract> outputer_SV216_Extract_out0_ptr(new OutputerType1_SV216_Extract(sorter_Process_431, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV216_Extract_out0));
        OutputerType1_SV216_Extract * outputer_SV216_Extract_out0 = outputer_SV216_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV216_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_431::Schema row;
            outputer_SV216_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV216_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV216_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV216_Extract
#pragma region SV217_Extract
#if defined(COMPILE_SV217_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_433>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV217_Extract_GetSStream_432;
    SStreamV3ExtractorType_SV217_Extract_GetSStream_432 * CreateExtractor_SV217_Extract_GetSStream_432(unique_ptr<SStreamV3ExtractorType_SV217_Extract_GetSStream_432> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV217_Extract_GetSStream_432(432, "", true/*100*/, UID_GetSStream_432));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV217_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV217_Extract_GetSStream_432> extractor_0_ptr;
        SStreamV3ExtractorType_SV217_Extract_GetSStream_432 * extractor_0 = CreateExtractor_SV217_Extract_GetSStream_432(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_433;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_433> sorter_Process_433_ptr (new SorterType_Process_433(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_433));
        SorterType_Process_433 * sorter_Process_433 = sorter_Process_433_ptr.get();
        ULONG sorter_Process_433_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_433, BinaryOutputPolicy<typename SorterType_Process_433::Schema>, BinaryOutputStream, false> OutputerType1_SV217_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV217_Extract> outputer_SV217_Extract_out0_ptr(new OutputerType1_SV217_Extract(sorter_Process_433, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV217_Extract_out0));
        OutputerType1_SV217_Extract * outputer_SV217_Extract_out0 = outputer_SV217_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV217_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_433::Schema row;
            outputer_SV217_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV217_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV217_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV217_Extract
#pragma region SV218_Extract
#if defined(COMPILE_SV218_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_435>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV218_Extract_GetSStream_434;
    SStreamV3ExtractorType_SV218_Extract_GetSStream_434 * CreateExtractor_SV218_Extract_GetSStream_434(unique_ptr<SStreamV3ExtractorType_SV218_Extract_GetSStream_434> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV218_Extract_GetSStream_434(434, "", true/*100*/, UID_GetSStream_434));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV218_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV218_Extract_GetSStream_434> extractor_0_ptr;
        SStreamV3ExtractorType_SV218_Extract_GetSStream_434 * extractor_0 = CreateExtractor_SV218_Extract_GetSStream_434(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_435;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_435> sorter_Process_435_ptr (new SorterType_Process_435(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_435));
        SorterType_Process_435 * sorter_Process_435 = sorter_Process_435_ptr.get();
        ULONG sorter_Process_435_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_435, BinaryOutputPolicy<typename SorterType_Process_435::Schema>, BinaryOutputStream, false> OutputerType1_SV218_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV218_Extract> outputer_SV218_Extract_out0_ptr(new OutputerType1_SV218_Extract(sorter_Process_435, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV218_Extract_out0));
        OutputerType1_SV218_Extract * outputer_SV218_Extract_out0 = outputer_SV218_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV218_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_435::Schema row;
            outputer_SV218_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV218_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV218_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV218_Extract
#pragma region SV219_Extract
#if defined(COMPILE_SV219_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_437>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV219_Extract_GetSStream_436;
    SStreamV3ExtractorType_SV219_Extract_GetSStream_436 * CreateExtractor_SV219_Extract_GetSStream_436(unique_ptr<SStreamV3ExtractorType_SV219_Extract_GetSStream_436> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV219_Extract_GetSStream_436(436, "", true/*100*/, UID_GetSStream_436));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV219_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV219_Extract_GetSStream_436> extractor_0_ptr;
        SStreamV3ExtractorType_SV219_Extract_GetSStream_436 * extractor_0 = CreateExtractor_SV219_Extract_GetSStream_436(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_437;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_437> sorter_Process_437_ptr (new SorterType_Process_437(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_437));
        SorterType_Process_437 * sorter_Process_437 = sorter_Process_437_ptr.get();
        ULONG sorter_Process_437_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_437, BinaryOutputPolicy<typename SorterType_Process_437::Schema>, BinaryOutputStream, false> OutputerType1_SV219_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV219_Extract> outputer_SV219_Extract_out0_ptr(new OutputerType1_SV219_Extract(sorter_Process_437, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV219_Extract_out0));
        OutputerType1_SV219_Extract * outputer_SV219_Extract_out0 = outputer_SV219_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV219_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_437::Schema row;
            outputer_SV219_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV219_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV219_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV219_Extract
#pragma region SV220_Extract
#if defined(COMPILE_SV220_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_439>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV220_Extract_GetSStream_438;
    SStreamV3ExtractorType_SV220_Extract_GetSStream_438 * CreateExtractor_SV220_Extract_GetSStream_438(unique_ptr<SStreamV3ExtractorType_SV220_Extract_GetSStream_438> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV220_Extract_GetSStream_438(438, "", true/*100*/, UID_GetSStream_438));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV220_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV220_Extract_GetSStream_438> extractor_0_ptr;
        SStreamV3ExtractorType_SV220_Extract_GetSStream_438 * extractor_0 = CreateExtractor_SV220_Extract_GetSStream_438(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_439;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_439> sorter_Process_439_ptr (new SorterType_Process_439(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_439));
        SorterType_Process_439 * sorter_Process_439 = sorter_Process_439_ptr.get();
        ULONG sorter_Process_439_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_439, BinaryOutputPolicy<typename SorterType_Process_439::Schema>, BinaryOutputStream, false> OutputerType1_SV220_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV220_Extract> outputer_SV220_Extract_out0_ptr(new OutputerType1_SV220_Extract(sorter_Process_439, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV220_Extract_out0));
        OutputerType1_SV220_Extract * outputer_SV220_Extract_out0 = outputer_SV220_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV220_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_439::Schema row;
            outputer_SV220_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV220_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV220_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV220_Extract
#pragma region SV221_Extract
#if defined(COMPILE_SV221_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_441>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV221_Extract_GetSStream_440;
    SStreamV3ExtractorType_SV221_Extract_GetSStream_440 * CreateExtractor_SV221_Extract_GetSStream_440(unique_ptr<SStreamV3ExtractorType_SV221_Extract_GetSStream_440> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV221_Extract_GetSStream_440(440, "", true/*100*/, UID_GetSStream_440));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV221_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV221_Extract_GetSStream_440> extractor_0_ptr;
        SStreamV3ExtractorType_SV221_Extract_GetSStream_440 * extractor_0 = CreateExtractor_SV221_Extract_GetSStream_440(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_441;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_441> sorter_Process_441_ptr (new SorterType_Process_441(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_441));
        SorterType_Process_441 * sorter_Process_441 = sorter_Process_441_ptr.get();
        ULONG sorter_Process_441_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_441, BinaryOutputPolicy<typename SorterType_Process_441::Schema>, BinaryOutputStream, false> OutputerType1_SV221_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV221_Extract> outputer_SV221_Extract_out0_ptr(new OutputerType1_SV221_Extract(sorter_Process_441, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV221_Extract_out0));
        OutputerType1_SV221_Extract * outputer_SV221_Extract_out0 = outputer_SV221_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV221_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_441::Schema row;
            outputer_SV221_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV221_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV221_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV221_Extract
#pragma region SV222_Extract
#if defined(COMPILE_SV222_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_443>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV222_Extract_GetSStream_442;
    SStreamV3ExtractorType_SV222_Extract_GetSStream_442 * CreateExtractor_SV222_Extract_GetSStream_442(unique_ptr<SStreamV3ExtractorType_SV222_Extract_GetSStream_442> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV222_Extract_GetSStream_442(442, "", true/*100*/, UID_GetSStream_442));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV222_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV222_Extract_GetSStream_442> extractor_0_ptr;
        SStreamV3ExtractorType_SV222_Extract_GetSStream_442 * extractor_0 = CreateExtractor_SV222_Extract_GetSStream_442(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_443;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_443> sorter_Process_443_ptr (new SorterType_Process_443(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_443));
        SorterType_Process_443 * sorter_Process_443 = sorter_Process_443_ptr.get();
        ULONG sorter_Process_443_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_443, BinaryOutputPolicy<typename SorterType_Process_443::Schema>, BinaryOutputStream, false> OutputerType1_SV222_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV222_Extract> outputer_SV222_Extract_out0_ptr(new OutputerType1_SV222_Extract(sorter_Process_443, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV222_Extract_out0));
        OutputerType1_SV222_Extract * outputer_SV222_Extract_out0 = outputer_SV222_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV222_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_443::Schema row;
            outputer_SV222_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV222_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV222_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV222_Extract
#pragma region SV223_Extract
#if defined(COMPILE_SV223_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_445>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV223_Extract_GetSStream_444;
    SStreamV3ExtractorType_SV223_Extract_GetSStream_444 * CreateExtractor_SV223_Extract_GetSStream_444(unique_ptr<SStreamV3ExtractorType_SV223_Extract_GetSStream_444> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV223_Extract_GetSStream_444(444, "", true/*100*/, UID_GetSStream_444));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV223_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV223_Extract_GetSStream_444> extractor_0_ptr;
        SStreamV3ExtractorType_SV223_Extract_GetSStream_444 * extractor_0 = CreateExtractor_SV223_Extract_GetSStream_444(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_445;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_445> sorter_Process_445_ptr (new SorterType_Process_445(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_445));
        SorterType_Process_445 * sorter_Process_445 = sorter_Process_445_ptr.get();
        ULONG sorter_Process_445_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_445, BinaryOutputPolicy<typename SorterType_Process_445::Schema>, BinaryOutputStream, false> OutputerType1_SV223_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV223_Extract> outputer_SV223_Extract_out0_ptr(new OutputerType1_SV223_Extract(sorter_Process_445, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV223_Extract_out0));
        OutputerType1_SV223_Extract * outputer_SV223_Extract_out0 = outputer_SV223_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV223_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_445::Schema row;
            outputer_SV223_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV223_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV223_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV223_Extract
#pragma region SV224_Extract
#if defined(COMPILE_SV224_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_447>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV224_Extract_GetSStream_446;
    SStreamV3ExtractorType_SV224_Extract_GetSStream_446 * CreateExtractor_SV224_Extract_GetSStream_446(unique_ptr<SStreamV3ExtractorType_SV224_Extract_GetSStream_446> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV224_Extract_GetSStream_446(446, "", true/*100*/, UID_GetSStream_446));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV224_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV224_Extract_GetSStream_446> extractor_0_ptr;
        SStreamV3ExtractorType_SV224_Extract_GetSStream_446 * extractor_0 = CreateExtractor_SV224_Extract_GetSStream_446(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_447;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_447> sorter_Process_447_ptr (new SorterType_Process_447(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_447));
        SorterType_Process_447 * sorter_Process_447 = sorter_Process_447_ptr.get();
        ULONG sorter_Process_447_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_447, BinaryOutputPolicy<typename SorterType_Process_447::Schema>, BinaryOutputStream, false> OutputerType1_SV224_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV224_Extract> outputer_SV224_Extract_out0_ptr(new OutputerType1_SV224_Extract(sorter_Process_447, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV224_Extract_out0));
        OutputerType1_SV224_Extract * outputer_SV224_Extract_out0 = outputer_SV224_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV224_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_447::Schema row;
            outputer_SV224_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV224_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV224_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV224_Extract
#pragma region SV225_Extract
#if defined(COMPILE_SV225_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_449>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV225_Extract_GetSStream_448;
    SStreamV3ExtractorType_SV225_Extract_GetSStream_448 * CreateExtractor_SV225_Extract_GetSStream_448(unique_ptr<SStreamV3ExtractorType_SV225_Extract_GetSStream_448> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV225_Extract_GetSStream_448(448, "", true/*100*/, UID_GetSStream_448));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV225_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV225_Extract_GetSStream_448> extractor_0_ptr;
        SStreamV3ExtractorType_SV225_Extract_GetSStream_448 * extractor_0 = CreateExtractor_SV225_Extract_GetSStream_448(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_449;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_449> sorter_Process_449_ptr (new SorterType_Process_449(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_449));
        SorterType_Process_449 * sorter_Process_449 = sorter_Process_449_ptr.get();
        ULONG sorter_Process_449_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_449, BinaryOutputPolicy<typename SorterType_Process_449::Schema>, BinaryOutputStream, false> OutputerType1_SV225_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV225_Extract> outputer_SV225_Extract_out0_ptr(new OutputerType1_SV225_Extract(sorter_Process_449, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV225_Extract_out0));
        OutputerType1_SV225_Extract * outputer_SV225_Extract_out0 = outputer_SV225_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV225_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_449::Schema row;
            outputer_SV225_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV225_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV225_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV225_Extract
#pragma region SV226_Extract
#if defined(COMPILE_SV226_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_451>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV226_Extract_GetSStream_450;
    SStreamV3ExtractorType_SV226_Extract_GetSStream_450 * CreateExtractor_SV226_Extract_GetSStream_450(unique_ptr<SStreamV3ExtractorType_SV226_Extract_GetSStream_450> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV226_Extract_GetSStream_450(450, "", true/*100*/, UID_GetSStream_450));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV226_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV226_Extract_GetSStream_450> extractor_0_ptr;
        SStreamV3ExtractorType_SV226_Extract_GetSStream_450 * extractor_0 = CreateExtractor_SV226_Extract_GetSStream_450(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_451;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_451> sorter_Process_451_ptr (new SorterType_Process_451(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_451));
        SorterType_Process_451 * sorter_Process_451 = sorter_Process_451_ptr.get();
        ULONG sorter_Process_451_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_451, BinaryOutputPolicy<typename SorterType_Process_451::Schema>, BinaryOutputStream, false> OutputerType1_SV226_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV226_Extract> outputer_SV226_Extract_out0_ptr(new OutputerType1_SV226_Extract(sorter_Process_451, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV226_Extract_out0));
        OutputerType1_SV226_Extract * outputer_SV226_Extract_out0 = outputer_SV226_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV226_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_451::Schema row;
            outputer_SV226_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV226_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV226_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV226_Extract
#pragma region SV227_Extract
#if defined(COMPILE_SV227_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_453>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV227_Extract_GetSStream_452;
    SStreamV3ExtractorType_SV227_Extract_GetSStream_452 * CreateExtractor_SV227_Extract_GetSStream_452(unique_ptr<SStreamV3ExtractorType_SV227_Extract_GetSStream_452> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV227_Extract_GetSStream_452(452, "", true/*100*/, UID_GetSStream_452));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV227_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV227_Extract_GetSStream_452> extractor_0_ptr;
        SStreamV3ExtractorType_SV227_Extract_GetSStream_452 * extractor_0 = CreateExtractor_SV227_Extract_GetSStream_452(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_453;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_453> sorter_Process_453_ptr (new SorterType_Process_453(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_453));
        SorterType_Process_453 * sorter_Process_453 = sorter_Process_453_ptr.get();
        ULONG sorter_Process_453_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_453, BinaryOutputPolicy<typename SorterType_Process_453::Schema>, BinaryOutputStream, false> OutputerType1_SV227_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV227_Extract> outputer_SV227_Extract_out0_ptr(new OutputerType1_SV227_Extract(sorter_Process_453, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV227_Extract_out0));
        OutputerType1_SV227_Extract * outputer_SV227_Extract_out0 = outputer_SV227_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV227_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_453::Schema row;
            outputer_SV227_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV227_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV227_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV227_Extract
#pragma region SV228_Extract
#if defined(COMPILE_SV228_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_455>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV228_Extract_GetSStream_454;
    SStreamV3ExtractorType_SV228_Extract_GetSStream_454 * CreateExtractor_SV228_Extract_GetSStream_454(unique_ptr<SStreamV3ExtractorType_SV228_Extract_GetSStream_454> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV228_Extract_GetSStream_454(454, "", true/*100*/, UID_GetSStream_454));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV228_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV228_Extract_GetSStream_454> extractor_0_ptr;
        SStreamV3ExtractorType_SV228_Extract_GetSStream_454 * extractor_0 = CreateExtractor_SV228_Extract_GetSStream_454(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_455;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_455> sorter_Process_455_ptr (new SorterType_Process_455(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_455));
        SorterType_Process_455 * sorter_Process_455 = sorter_Process_455_ptr.get();
        ULONG sorter_Process_455_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_455, BinaryOutputPolicy<typename SorterType_Process_455::Schema>, BinaryOutputStream, false> OutputerType1_SV228_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV228_Extract> outputer_SV228_Extract_out0_ptr(new OutputerType1_SV228_Extract(sorter_Process_455, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV228_Extract_out0));
        OutputerType1_SV228_Extract * outputer_SV228_Extract_out0 = outputer_SV228_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV228_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_455::Schema row;
            outputer_SV228_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV228_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV228_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV228_Extract
#pragma region SV229_Extract
#if defined(COMPILE_SV229_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_457>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV229_Extract_GetSStream_456;
    SStreamV3ExtractorType_SV229_Extract_GetSStream_456 * CreateExtractor_SV229_Extract_GetSStream_456(unique_ptr<SStreamV3ExtractorType_SV229_Extract_GetSStream_456> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV229_Extract_GetSStream_456(456, "", true/*100*/, UID_GetSStream_456));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV229_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV229_Extract_GetSStream_456> extractor_0_ptr;
        SStreamV3ExtractorType_SV229_Extract_GetSStream_456 * extractor_0 = CreateExtractor_SV229_Extract_GetSStream_456(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_457;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_457> sorter_Process_457_ptr (new SorterType_Process_457(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_457));
        SorterType_Process_457 * sorter_Process_457 = sorter_Process_457_ptr.get();
        ULONG sorter_Process_457_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_457, BinaryOutputPolicy<typename SorterType_Process_457::Schema>, BinaryOutputStream, false> OutputerType1_SV229_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV229_Extract> outputer_SV229_Extract_out0_ptr(new OutputerType1_SV229_Extract(sorter_Process_457, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV229_Extract_out0));
        OutputerType1_SV229_Extract * outputer_SV229_Extract_out0 = outputer_SV229_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV229_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_457::Schema row;
            outputer_SV229_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV229_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV229_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV229_Extract
#pragma region SV230_Extract
#if defined(COMPILE_SV230_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_459>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV230_Extract_GetSStream_458;
    SStreamV3ExtractorType_SV230_Extract_GetSStream_458 * CreateExtractor_SV230_Extract_GetSStream_458(unique_ptr<SStreamV3ExtractorType_SV230_Extract_GetSStream_458> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV230_Extract_GetSStream_458(458, "", true/*100*/, UID_GetSStream_458));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV230_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV230_Extract_GetSStream_458> extractor_0_ptr;
        SStreamV3ExtractorType_SV230_Extract_GetSStream_458 * extractor_0 = CreateExtractor_SV230_Extract_GetSStream_458(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_459;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_459> sorter_Process_459_ptr (new SorterType_Process_459(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_459));
        SorterType_Process_459 * sorter_Process_459 = sorter_Process_459_ptr.get();
        ULONG sorter_Process_459_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_459, BinaryOutputPolicy<typename SorterType_Process_459::Schema>, BinaryOutputStream, false> OutputerType1_SV230_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV230_Extract> outputer_SV230_Extract_out0_ptr(new OutputerType1_SV230_Extract(sorter_Process_459, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV230_Extract_out0));
        OutputerType1_SV230_Extract * outputer_SV230_Extract_out0 = outputer_SV230_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV230_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_459::Schema row;
            outputer_SV230_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV230_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV230_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV230_Extract
#pragma region SV231_Extract
#if defined(COMPILE_SV231_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_461>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV231_Extract_GetSStream_460;
    SStreamV3ExtractorType_SV231_Extract_GetSStream_460 * CreateExtractor_SV231_Extract_GetSStream_460(unique_ptr<SStreamV3ExtractorType_SV231_Extract_GetSStream_460> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV231_Extract_GetSStream_460(460, "", true/*100*/, UID_GetSStream_460));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV231_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV231_Extract_GetSStream_460> extractor_0_ptr;
        SStreamV3ExtractorType_SV231_Extract_GetSStream_460 * extractor_0 = CreateExtractor_SV231_Extract_GetSStream_460(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_461;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_461> sorter_Process_461_ptr (new SorterType_Process_461(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_461));
        SorterType_Process_461 * sorter_Process_461 = sorter_Process_461_ptr.get();
        ULONG sorter_Process_461_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_461, BinaryOutputPolicy<typename SorterType_Process_461::Schema>, BinaryOutputStream, false> OutputerType1_SV231_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV231_Extract> outputer_SV231_Extract_out0_ptr(new OutputerType1_SV231_Extract(sorter_Process_461, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV231_Extract_out0));
        OutputerType1_SV231_Extract * outputer_SV231_Extract_out0 = outputer_SV231_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV231_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_461::Schema row;
            outputer_SV231_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV231_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV231_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV231_Extract
#pragma region SV232_Extract
#if defined(COMPILE_SV232_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_463>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV232_Extract_GetSStream_462;
    SStreamV3ExtractorType_SV232_Extract_GetSStream_462 * CreateExtractor_SV232_Extract_GetSStream_462(unique_ptr<SStreamV3ExtractorType_SV232_Extract_GetSStream_462> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV232_Extract_GetSStream_462(462, "", true/*100*/, UID_GetSStream_462));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV232_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV232_Extract_GetSStream_462> extractor_0_ptr;
        SStreamV3ExtractorType_SV232_Extract_GetSStream_462 * extractor_0 = CreateExtractor_SV232_Extract_GetSStream_462(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_463;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_463> sorter_Process_463_ptr (new SorterType_Process_463(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_463));
        SorterType_Process_463 * sorter_Process_463 = sorter_Process_463_ptr.get();
        ULONG sorter_Process_463_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_463, BinaryOutputPolicy<typename SorterType_Process_463::Schema>, BinaryOutputStream, false> OutputerType1_SV232_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV232_Extract> outputer_SV232_Extract_out0_ptr(new OutputerType1_SV232_Extract(sorter_Process_463, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV232_Extract_out0));
        OutputerType1_SV232_Extract * outputer_SV232_Extract_out0 = outputer_SV232_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV232_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_463::Schema row;
            outputer_SV232_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV232_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV232_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV232_Extract
#pragma region SV233_Extract
#if defined(COMPILE_SV233_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_465>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV233_Extract_GetSStream_464;
    SStreamV3ExtractorType_SV233_Extract_GetSStream_464 * CreateExtractor_SV233_Extract_GetSStream_464(unique_ptr<SStreamV3ExtractorType_SV233_Extract_GetSStream_464> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV233_Extract_GetSStream_464(464, "", true/*100*/, UID_GetSStream_464));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV233_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV233_Extract_GetSStream_464> extractor_0_ptr;
        SStreamV3ExtractorType_SV233_Extract_GetSStream_464 * extractor_0 = CreateExtractor_SV233_Extract_GetSStream_464(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_465;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_465> sorter_Process_465_ptr (new SorterType_Process_465(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_465));
        SorterType_Process_465 * sorter_Process_465 = sorter_Process_465_ptr.get();
        ULONG sorter_Process_465_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_465, BinaryOutputPolicy<typename SorterType_Process_465::Schema>, BinaryOutputStream, false> OutputerType1_SV233_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV233_Extract> outputer_SV233_Extract_out0_ptr(new OutputerType1_SV233_Extract(sorter_Process_465, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV233_Extract_out0));
        OutputerType1_SV233_Extract * outputer_SV233_Extract_out0 = outputer_SV233_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV233_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_465::Schema row;
            outputer_SV233_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV233_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV233_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV233_Extract
#pragma region SV234_Extract
#if defined(COMPILE_SV234_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_467>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV234_Extract_GetSStream_466;
    SStreamV3ExtractorType_SV234_Extract_GetSStream_466 * CreateExtractor_SV234_Extract_GetSStream_466(unique_ptr<SStreamV3ExtractorType_SV234_Extract_GetSStream_466> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV234_Extract_GetSStream_466(466, "", true/*100*/, UID_GetSStream_466));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV234_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV234_Extract_GetSStream_466> extractor_0_ptr;
        SStreamV3ExtractorType_SV234_Extract_GetSStream_466 * extractor_0 = CreateExtractor_SV234_Extract_GetSStream_466(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_467;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_467> sorter_Process_467_ptr (new SorterType_Process_467(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_467));
        SorterType_Process_467 * sorter_Process_467 = sorter_Process_467_ptr.get();
        ULONG sorter_Process_467_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_467, BinaryOutputPolicy<typename SorterType_Process_467::Schema>, BinaryOutputStream, false> OutputerType1_SV234_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV234_Extract> outputer_SV234_Extract_out0_ptr(new OutputerType1_SV234_Extract(sorter_Process_467, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV234_Extract_out0));
        OutputerType1_SV234_Extract * outputer_SV234_Extract_out0 = outputer_SV234_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV234_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_467::Schema row;
            outputer_SV234_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV234_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV234_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV234_Extract
#pragma region SV235_Extract
#if defined(COMPILE_SV235_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_469>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV235_Extract_GetSStream_468;
    SStreamV3ExtractorType_SV235_Extract_GetSStream_468 * CreateExtractor_SV235_Extract_GetSStream_468(unique_ptr<SStreamV3ExtractorType_SV235_Extract_GetSStream_468> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV235_Extract_GetSStream_468(468, "", true/*100*/, UID_GetSStream_468));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV235_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV235_Extract_GetSStream_468> extractor_0_ptr;
        SStreamV3ExtractorType_SV235_Extract_GetSStream_468 * extractor_0 = CreateExtractor_SV235_Extract_GetSStream_468(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_469;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_469> sorter_Process_469_ptr (new SorterType_Process_469(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_469));
        SorterType_Process_469 * sorter_Process_469 = sorter_Process_469_ptr.get();
        ULONG sorter_Process_469_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_469, BinaryOutputPolicy<typename SorterType_Process_469::Schema>, BinaryOutputStream, false> OutputerType1_SV235_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV235_Extract> outputer_SV235_Extract_out0_ptr(new OutputerType1_SV235_Extract(sorter_Process_469, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV235_Extract_out0));
        OutputerType1_SV235_Extract * outputer_SV235_Extract_out0 = outputer_SV235_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV235_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_469::Schema row;
            outputer_SV235_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV235_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV235_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV235_Extract
#pragma region SV236_Extract
#if defined(COMPILE_SV236_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_471>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV236_Extract_GetSStream_470;
    SStreamV3ExtractorType_SV236_Extract_GetSStream_470 * CreateExtractor_SV236_Extract_GetSStream_470(unique_ptr<SStreamV3ExtractorType_SV236_Extract_GetSStream_470> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV236_Extract_GetSStream_470(470, "", true/*100*/, UID_GetSStream_470));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV236_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV236_Extract_GetSStream_470> extractor_0_ptr;
        SStreamV3ExtractorType_SV236_Extract_GetSStream_470 * extractor_0 = CreateExtractor_SV236_Extract_GetSStream_470(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_471;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_471> sorter_Process_471_ptr (new SorterType_Process_471(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_471));
        SorterType_Process_471 * sorter_Process_471 = sorter_Process_471_ptr.get();
        ULONG sorter_Process_471_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_471, BinaryOutputPolicy<typename SorterType_Process_471::Schema>, BinaryOutputStream, false> OutputerType1_SV236_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV236_Extract> outputer_SV236_Extract_out0_ptr(new OutputerType1_SV236_Extract(sorter_Process_471, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV236_Extract_out0));
        OutputerType1_SV236_Extract * outputer_SV236_Extract_out0 = outputer_SV236_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV236_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_471::Schema row;
            outputer_SV236_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV236_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV236_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV236_Extract
#pragma region SV237_Extract
#if defined(COMPILE_SV237_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_473>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV237_Extract_GetSStream_472;
    SStreamV3ExtractorType_SV237_Extract_GetSStream_472 * CreateExtractor_SV237_Extract_GetSStream_472(unique_ptr<SStreamV3ExtractorType_SV237_Extract_GetSStream_472> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV237_Extract_GetSStream_472(472, "", true/*100*/, UID_GetSStream_472));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV237_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV237_Extract_GetSStream_472> extractor_0_ptr;
        SStreamV3ExtractorType_SV237_Extract_GetSStream_472 * extractor_0 = CreateExtractor_SV237_Extract_GetSStream_472(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_473;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_473> sorter_Process_473_ptr (new SorterType_Process_473(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_473));
        SorterType_Process_473 * sorter_Process_473 = sorter_Process_473_ptr.get();
        ULONG sorter_Process_473_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_473, BinaryOutputPolicy<typename SorterType_Process_473::Schema>, BinaryOutputStream, false> OutputerType1_SV237_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV237_Extract> outputer_SV237_Extract_out0_ptr(new OutputerType1_SV237_Extract(sorter_Process_473, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV237_Extract_out0));
        OutputerType1_SV237_Extract * outputer_SV237_Extract_out0 = outputer_SV237_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV237_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_473::Schema row;
            outputer_SV237_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV237_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV237_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV237_Extract
#pragma region SV238_Extract
#if defined(COMPILE_SV238_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_475>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV238_Extract_GetSStream_474;
    SStreamV3ExtractorType_SV238_Extract_GetSStream_474 * CreateExtractor_SV238_Extract_GetSStream_474(unique_ptr<SStreamV3ExtractorType_SV238_Extract_GetSStream_474> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV238_Extract_GetSStream_474(474, "", true/*100*/, UID_GetSStream_474));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV238_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV238_Extract_GetSStream_474> extractor_0_ptr;
        SStreamV3ExtractorType_SV238_Extract_GetSStream_474 * extractor_0 = CreateExtractor_SV238_Extract_GetSStream_474(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_475;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_475> sorter_Process_475_ptr (new SorterType_Process_475(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_475));
        SorterType_Process_475 * sorter_Process_475 = sorter_Process_475_ptr.get();
        ULONG sorter_Process_475_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_475, BinaryOutputPolicy<typename SorterType_Process_475::Schema>, BinaryOutputStream, false> OutputerType1_SV238_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV238_Extract> outputer_SV238_Extract_out0_ptr(new OutputerType1_SV238_Extract(sorter_Process_475, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV238_Extract_out0));
        OutputerType1_SV238_Extract * outputer_SV238_Extract_out0 = outputer_SV238_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV238_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_475::Schema row;
            outputer_SV238_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV238_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV238_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV238_Extract
#pragma region SV239_Extract
#if defined(COMPILE_SV239_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_477>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV239_Extract_GetSStream_476;
    SStreamV3ExtractorType_SV239_Extract_GetSStream_476 * CreateExtractor_SV239_Extract_GetSStream_476(unique_ptr<SStreamV3ExtractorType_SV239_Extract_GetSStream_476> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV239_Extract_GetSStream_476(476, "", true/*100*/, UID_GetSStream_476));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV239_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV239_Extract_GetSStream_476> extractor_0_ptr;
        SStreamV3ExtractorType_SV239_Extract_GetSStream_476 * extractor_0 = CreateExtractor_SV239_Extract_GetSStream_476(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_477;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_477> sorter_Process_477_ptr (new SorterType_Process_477(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_477));
        SorterType_Process_477 * sorter_Process_477 = sorter_Process_477_ptr.get();
        ULONG sorter_Process_477_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_477, BinaryOutputPolicy<typename SorterType_Process_477::Schema>, BinaryOutputStream, false> OutputerType1_SV239_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV239_Extract> outputer_SV239_Extract_out0_ptr(new OutputerType1_SV239_Extract(sorter_Process_477, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV239_Extract_out0));
        OutputerType1_SV239_Extract * outputer_SV239_Extract_out0 = outputer_SV239_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV239_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_477::Schema row;
            outputer_SV239_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV239_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV239_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV239_Extract
#pragma region SV240_Extract
#if defined(COMPILE_SV240_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_479>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV240_Extract_GetSStream_478;
    SStreamV3ExtractorType_SV240_Extract_GetSStream_478 * CreateExtractor_SV240_Extract_GetSStream_478(unique_ptr<SStreamV3ExtractorType_SV240_Extract_GetSStream_478> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV240_Extract_GetSStream_478(478, "", true/*100*/, UID_GetSStream_478));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV240_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV240_Extract_GetSStream_478> extractor_0_ptr;
        SStreamV3ExtractorType_SV240_Extract_GetSStream_478 * extractor_0 = CreateExtractor_SV240_Extract_GetSStream_478(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_479;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_479> sorter_Process_479_ptr (new SorterType_Process_479(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_479));
        SorterType_Process_479 * sorter_Process_479 = sorter_Process_479_ptr.get();
        ULONG sorter_Process_479_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_479, BinaryOutputPolicy<typename SorterType_Process_479::Schema>, BinaryOutputStream, false> OutputerType1_SV240_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV240_Extract> outputer_SV240_Extract_out0_ptr(new OutputerType1_SV240_Extract(sorter_Process_479, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV240_Extract_out0));
        OutputerType1_SV240_Extract * outputer_SV240_Extract_out0 = outputer_SV240_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV240_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_479::Schema row;
            outputer_SV240_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV240_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV240_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV240_Extract
#pragma region SV241_Extract
#if defined(COMPILE_SV241_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_481>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV241_Extract_GetSStream_480;
    SStreamV3ExtractorType_SV241_Extract_GetSStream_480 * CreateExtractor_SV241_Extract_GetSStream_480(unique_ptr<SStreamV3ExtractorType_SV241_Extract_GetSStream_480> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV241_Extract_GetSStream_480(480, "", true/*100*/, UID_GetSStream_480));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV241_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV241_Extract_GetSStream_480> extractor_0_ptr;
        SStreamV3ExtractorType_SV241_Extract_GetSStream_480 * extractor_0 = CreateExtractor_SV241_Extract_GetSStream_480(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_481;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_481> sorter_Process_481_ptr (new SorterType_Process_481(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_481));
        SorterType_Process_481 * sorter_Process_481 = sorter_Process_481_ptr.get();
        ULONG sorter_Process_481_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_481, BinaryOutputPolicy<typename SorterType_Process_481::Schema>, BinaryOutputStream, false> OutputerType1_SV241_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV241_Extract> outputer_SV241_Extract_out0_ptr(new OutputerType1_SV241_Extract(sorter_Process_481, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV241_Extract_out0));
        OutputerType1_SV241_Extract * outputer_SV241_Extract_out0 = outputer_SV241_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV241_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_481::Schema row;
            outputer_SV241_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV241_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV241_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV241_Extract
#pragma region SV242_Extract
#if defined(COMPILE_SV242_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_483>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV242_Extract_GetSStream_482;
    SStreamV3ExtractorType_SV242_Extract_GetSStream_482 * CreateExtractor_SV242_Extract_GetSStream_482(unique_ptr<SStreamV3ExtractorType_SV242_Extract_GetSStream_482> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV242_Extract_GetSStream_482(482, "", true/*100*/, UID_GetSStream_482));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV242_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV242_Extract_GetSStream_482> extractor_0_ptr;
        SStreamV3ExtractorType_SV242_Extract_GetSStream_482 * extractor_0 = CreateExtractor_SV242_Extract_GetSStream_482(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_483;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_483> sorter_Process_483_ptr (new SorterType_Process_483(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_483));
        SorterType_Process_483 * sorter_Process_483 = sorter_Process_483_ptr.get();
        ULONG sorter_Process_483_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_483, BinaryOutputPolicy<typename SorterType_Process_483::Schema>, BinaryOutputStream, false> OutputerType1_SV242_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV242_Extract> outputer_SV242_Extract_out0_ptr(new OutputerType1_SV242_Extract(sorter_Process_483, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV242_Extract_out0));
        OutputerType1_SV242_Extract * outputer_SV242_Extract_out0 = outputer_SV242_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV242_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_483::Schema row;
            outputer_SV242_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV242_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV242_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV242_Extract
#pragma region SV243_Extract
#if defined(COMPILE_SV243_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_485>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV243_Extract_GetSStream_484;
    SStreamV3ExtractorType_SV243_Extract_GetSStream_484 * CreateExtractor_SV243_Extract_GetSStream_484(unique_ptr<SStreamV3ExtractorType_SV243_Extract_GetSStream_484> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV243_Extract_GetSStream_484(484, "", true/*100*/, UID_GetSStream_484));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV243_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV243_Extract_GetSStream_484> extractor_0_ptr;
        SStreamV3ExtractorType_SV243_Extract_GetSStream_484 * extractor_0 = CreateExtractor_SV243_Extract_GetSStream_484(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_485;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_485> sorter_Process_485_ptr (new SorterType_Process_485(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_485));
        SorterType_Process_485 * sorter_Process_485 = sorter_Process_485_ptr.get();
        ULONG sorter_Process_485_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_485, BinaryOutputPolicy<typename SorterType_Process_485::Schema>, BinaryOutputStream, false> OutputerType1_SV243_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV243_Extract> outputer_SV243_Extract_out0_ptr(new OutputerType1_SV243_Extract(sorter_Process_485, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV243_Extract_out0));
        OutputerType1_SV243_Extract * outputer_SV243_Extract_out0 = outputer_SV243_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV243_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_485::Schema row;
            outputer_SV243_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV243_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV243_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV243_Extract
#pragma region SV244_Extract
#if defined(COMPILE_SV244_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_487>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV244_Extract_GetSStream_486;
    SStreamV3ExtractorType_SV244_Extract_GetSStream_486 * CreateExtractor_SV244_Extract_GetSStream_486(unique_ptr<SStreamV3ExtractorType_SV244_Extract_GetSStream_486> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV244_Extract_GetSStream_486(486, "", true/*100*/, UID_GetSStream_486));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV244_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV244_Extract_GetSStream_486> extractor_0_ptr;
        SStreamV3ExtractorType_SV244_Extract_GetSStream_486 * extractor_0 = CreateExtractor_SV244_Extract_GetSStream_486(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_487;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_487> sorter_Process_487_ptr (new SorterType_Process_487(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_487));
        SorterType_Process_487 * sorter_Process_487 = sorter_Process_487_ptr.get();
        ULONG sorter_Process_487_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_487, BinaryOutputPolicy<typename SorterType_Process_487::Schema>, BinaryOutputStream, false> OutputerType1_SV244_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV244_Extract> outputer_SV244_Extract_out0_ptr(new OutputerType1_SV244_Extract(sorter_Process_487, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV244_Extract_out0));
        OutputerType1_SV244_Extract * outputer_SV244_Extract_out0 = outputer_SV244_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV244_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_487::Schema row;
            outputer_SV244_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV244_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV244_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV244_Extract
#pragma region SV245_Extract
#if defined(COMPILE_SV245_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_489>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV245_Extract_GetSStream_488;
    SStreamV3ExtractorType_SV245_Extract_GetSStream_488 * CreateExtractor_SV245_Extract_GetSStream_488(unique_ptr<SStreamV3ExtractorType_SV245_Extract_GetSStream_488> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV245_Extract_GetSStream_488(488, "", true/*100*/, UID_GetSStream_488));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV245_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV245_Extract_GetSStream_488> extractor_0_ptr;
        SStreamV3ExtractorType_SV245_Extract_GetSStream_488 * extractor_0 = CreateExtractor_SV245_Extract_GetSStream_488(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_489;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_489> sorter_Process_489_ptr (new SorterType_Process_489(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_489));
        SorterType_Process_489 * sorter_Process_489 = sorter_Process_489_ptr.get();
        ULONG sorter_Process_489_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_489, BinaryOutputPolicy<typename SorterType_Process_489::Schema>, BinaryOutputStream, false> OutputerType1_SV245_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV245_Extract> outputer_SV245_Extract_out0_ptr(new OutputerType1_SV245_Extract(sorter_Process_489, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV245_Extract_out0));
        OutputerType1_SV245_Extract * outputer_SV245_Extract_out0 = outputer_SV245_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV245_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_489::Schema row;
            outputer_SV245_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV245_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV245_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV245_Extract
#pragma region SV246_Extract
#if defined(COMPILE_SV246_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_491>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV246_Extract_GetSStream_490;
    SStreamV3ExtractorType_SV246_Extract_GetSStream_490 * CreateExtractor_SV246_Extract_GetSStream_490(unique_ptr<SStreamV3ExtractorType_SV246_Extract_GetSStream_490> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV246_Extract_GetSStream_490(490, "", true/*100*/, UID_GetSStream_490));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV246_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV246_Extract_GetSStream_490> extractor_0_ptr;
        SStreamV3ExtractorType_SV246_Extract_GetSStream_490 * extractor_0 = CreateExtractor_SV246_Extract_GetSStream_490(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_491;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_491> sorter_Process_491_ptr (new SorterType_Process_491(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_491));
        SorterType_Process_491 * sorter_Process_491 = sorter_Process_491_ptr.get();
        ULONG sorter_Process_491_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_491, BinaryOutputPolicy<typename SorterType_Process_491::Schema>, BinaryOutputStream, false> OutputerType1_SV246_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV246_Extract> outputer_SV246_Extract_out0_ptr(new OutputerType1_SV246_Extract(sorter_Process_491, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV246_Extract_out0));
        OutputerType1_SV246_Extract * outputer_SV246_Extract_out0 = outputer_SV246_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV246_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_491::Schema row;
            outputer_SV246_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV246_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV246_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV246_Extract
#pragma region SV247_Extract
#if defined(COMPILE_SV247_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_493>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV247_Extract_GetSStream_492;
    SStreamV3ExtractorType_SV247_Extract_GetSStream_492 * CreateExtractor_SV247_Extract_GetSStream_492(unique_ptr<SStreamV3ExtractorType_SV247_Extract_GetSStream_492> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV247_Extract_GetSStream_492(492, "", true/*100*/, UID_GetSStream_492));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV247_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV247_Extract_GetSStream_492> extractor_0_ptr;
        SStreamV3ExtractorType_SV247_Extract_GetSStream_492 * extractor_0 = CreateExtractor_SV247_Extract_GetSStream_492(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_493;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_493> sorter_Process_493_ptr (new SorterType_Process_493(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_493));
        SorterType_Process_493 * sorter_Process_493 = sorter_Process_493_ptr.get();
        ULONG sorter_Process_493_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_493, BinaryOutputPolicy<typename SorterType_Process_493::Schema>, BinaryOutputStream, false> OutputerType1_SV247_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV247_Extract> outputer_SV247_Extract_out0_ptr(new OutputerType1_SV247_Extract(sorter_Process_493, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV247_Extract_out0));
        OutputerType1_SV247_Extract * outputer_SV247_Extract_out0 = outputer_SV247_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV247_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_493::Schema row;
            outputer_SV247_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV247_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV247_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV247_Extract
#pragma region SV248_Extract
#if defined(COMPILE_SV248_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_495>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV248_Extract_GetSStream_494;
    SStreamV3ExtractorType_SV248_Extract_GetSStream_494 * CreateExtractor_SV248_Extract_GetSStream_494(unique_ptr<SStreamV3ExtractorType_SV248_Extract_GetSStream_494> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV248_Extract_GetSStream_494(494, "", true/*100*/, UID_GetSStream_494));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV248_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV248_Extract_GetSStream_494> extractor_0_ptr;
        SStreamV3ExtractorType_SV248_Extract_GetSStream_494 * extractor_0 = CreateExtractor_SV248_Extract_GetSStream_494(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_495;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_495> sorter_Process_495_ptr (new SorterType_Process_495(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_495));
        SorterType_Process_495 * sorter_Process_495 = sorter_Process_495_ptr.get();
        ULONG sorter_Process_495_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_495, BinaryOutputPolicy<typename SorterType_Process_495::Schema>, BinaryOutputStream, false> OutputerType1_SV248_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV248_Extract> outputer_SV248_Extract_out0_ptr(new OutputerType1_SV248_Extract(sorter_Process_495, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV248_Extract_out0));
        OutputerType1_SV248_Extract * outputer_SV248_Extract_out0 = outputer_SV248_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV248_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_495::Schema row;
            outputer_SV248_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV248_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV248_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV248_Extract
#pragma region SV249_Extract
#if defined(COMPILE_SV249_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_497>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV249_Extract_GetSStream_496;
    SStreamV3ExtractorType_SV249_Extract_GetSStream_496 * CreateExtractor_SV249_Extract_GetSStream_496(unique_ptr<SStreamV3ExtractorType_SV249_Extract_GetSStream_496> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV249_Extract_GetSStream_496(496, "", true/*100*/, UID_GetSStream_496));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV249_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV249_Extract_GetSStream_496> extractor_0_ptr;
        SStreamV3ExtractorType_SV249_Extract_GetSStream_496 * extractor_0 = CreateExtractor_SV249_Extract_GetSStream_496(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_497;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_497> sorter_Process_497_ptr (new SorterType_Process_497(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_497));
        SorterType_Process_497 * sorter_Process_497 = sorter_Process_497_ptr.get();
        ULONG sorter_Process_497_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_497, BinaryOutputPolicy<typename SorterType_Process_497::Schema>, BinaryOutputStream, false> OutputerType1_SV249_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV249_Extract> outputer_SV249_Extract_out0_ptr(new OutputerType1_SV249_Extract(sorter_Process_497, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV249_Extract_out0));
        OutputerType1_SV249_Extract * outputer_SV249_Extract_out0 = outputer_SV249_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV249_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_497::Schema row;
            outputer_SV249_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV249_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV249_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV249_Extract
#pragma region SV250_Extract
#if defined(COMPILE_SV250_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_499>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV250_Extract_GetSStream_498;
    SStreamV3ExtractorType_SV250_Extract_GetSStream_498 * CreateExtractor_SV250_Extract_GetSStream_498(unique_ptr<SStreamV3ExtractorType_SV250_Extract_GetSStream_498> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV250_Extract_GetSStream_498(498, "", true/*100*/, UID_GetSStream_498));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV250_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV250_Extract_GetSStream_498> extractor_0_ptr;
        SStreamV3ExtractorType_SV250_Extract_GetSStream_498 * extractor_0 = CreateExtractor_SV250_Extract_GetSStream_498(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_499;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_499> sorter_Process_499_ptr (new SorterType_Process_499(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_499));
        SorterType_Process_499 * sorter_Process_499 = sorter_Process_499_ptr.get();
        ULONG sorter_Process_499_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_499, BinaryOutputPolicy<typename SorterType_Process_499::Schema>, BinaryOutputStream, false> OutputerType1_SV250_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV250_Extract> outputer_SV250_Extract_out0_ptr(new OutputerType1_SV250_Extract(sorter_Process_499, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV250_Extract_out0));
        OutputerType1_SV250_Extract * outputer_SV250_Extract_out0 = outputer_SV250_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV250_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_499::Schema row;
            outputer_SV250_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV250_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV250_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV250_Extract
#pragma region SV251_Extract
#if defined(COMPILE_SV251_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_501>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV251_Extract_GetSStream_500;
    SStreamV3ExtractorType_SV251_Extract_GetSStream_500 * CreateExtractor_SV251_Extract_GetSStream_500(unique_ptr<SStreamV3ExtractorType_SV251_Extract_GetSStream_500> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV251_Extract_GetSStream_500(500, "", true/*100*/, UID_GetSStream_500));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV251_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV251_Extract_GetSStream_500> extractor_0_ptr;
        SStreamV3ExtractorType_SV251_Extract_GetSStream_500 * extractor_0 = CreateExtractor_SV251_Extract_GetSStream_500(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_501;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_501> sorter_Process_501_ptr (new SorterType_Process_501(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_501));
        SorterType_Process_501 * sorter_Process_501 = sorter_Process_501_ptr.get();
        ULONG sorter_Process_501_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_501, BinaryOutputPolicy<typename SorterType_Process_501::Schema>, BinaryOutputStream, false> OutputerType1_SV251_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV251_Extract> outputer_SV251_Extract_out0_ptr(new OutputerType1_SV251_Extract(sorter_Process_501, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV251_Extract_out0));
        OutputerType1_SV251_Extract * outputer_SV251_Extract_out0 = outputer_SV251_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV251_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_501::Schema row;
            outputer_SV251_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV251_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV251_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV251_Extract
#pragma region SV252_Extract
#if defined(COMPILE_SV252_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_503>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV252_Extract_GetSStream_502;
    SStreamV3ExtractorType_SV252_Extract_GetSStream_502 * CreateExtractor_SV252_Extract_GetSStream_502(unique_ptr<SStreamV3ExtractorType_SV252_Extract_GetSStream_502> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV252_Extract_GetSStream_502(502, "", true/*100*/, UID_GetSStream_502));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV252_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV252_Extract_GetSStream_502> extractor_0_ptr;
        SStreamV3ExtractorType_SV252_Extract_GetSStream_502 * extractor_0 = CreateExtractor_SV252_Extract_GetSStream_502(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_503;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_503> sorter_Process_503_ptr (new SorterType_Process_503(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_503));
        SorterType_Process_503 * sorter_Process_503 = sorter_Process_503_ptr.get();
        ULONG sorter_Process_503_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_503, BinaryOutputPolicy<typename SorterType_Process_503::Schema>, BinaryOutputStream, false> OutputerType1_SV252_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV252_Extract> outputer_SV252_Extract_out0_ptr(new OutputerType1_SV252_Extract(sorter_Process_503, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV252_Extract_out0));
        OutputerType1_SV252_Extract * outputer_SV252_Extract_out0 = outputer_SV252_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV252_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_503::Schema row;
            outputer_SV252_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV252_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV252_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV252_Extract
#pragma region SV253_Extract
#if defined(COMPILE_SV253_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_505>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV253_Extract_GetSStream_504;
    SStreamV3ExtractorType_SV253_Extract_GetSStream_504 * CreateExtractor_SV253_Extract_GetSStream_504(unique_ptr<SStreamV3ExtractorType_SV253_Extract_GetSStream_504> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV253_Extract_GetSStream_504(504, "", true/*100*/, UID_GetSStream_504));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV253_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV253_Extract_GetSStream_504> extractor_0_ptr;
        SStreamV3ExtractorType_SV253_Extract_GetSStream_504 * extractor_0 = CreateExtractor_SV253_Extract_GetSStream_504(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_505;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_505> sorter_Process_505_ptr (new SorterType_Process_505(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_505));
        SorterType_Process_505 * sorter_Process_505 = sorter_Process_505_ptr.get();
        ULONG sorter_Process_505_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_505, BinaryOutputPolicy<typename SorterType_Process_505::Schema>, BinaryOutputStream, false> OutputerType1_SV253_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV253_Extract> outputer_SV253_Extract_out0_ptr(new OutputerType1_SV253_Extract(sorter_Process_505, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV253_Extract_out0));
        OutputerType1_SV253_Extract * outputer_SV253_Extract_out0 = outputer_SV253_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV253_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_505::Schema row;
            outputer_SV253_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV253_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV253_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV253_Extract
#pragma region SV254_Extract
#if defined(COMPILE_SV254_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_507>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV254_Extract_GetSStream_506;
    SStreamV3ExtractorType_SV254_Extract_GetSStream_506 * CreateExtractor_SV254_Extract_GetSStream_506(unique_ptr<SStreamV3ExtractorType_SV254_Extract_GetSStream_506> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV254_Extract_GetSStream_506(506, "", true/*100*/, UID_GetSStream_506));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV254_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV254_Extract_GetSStream_506> extractor_0_ptr;
        SStreamV3ExtractorType_SV254_Extract_GetSStream_506 * extractor_0 = CreateExtractor_SV254_Extract_GetSStream_506(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_507;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_507> sorter_Process_507_ptr (new SorterType_Process_507(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_507));
        SorterType_Process_507 * sorter_Process_507 = sorter_Process_507_ptr.get();
        ULONG sorter_Process_507_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_507, BinaryOutputPolicy<typename SorterType_Process_507::Schema>, BinaryOutputStream, false> OutputerType1_SV254_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV254_Extract> outputer_SV254_Extract_out0_ptr(new OutputerType1_SV254_Extract(sorter_Process_507, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV254_Extract_out0));
        OutputerType1_SV254_Extract * outputer_SV254_Extract_out0 = outputer_SV254_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV254_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_507::Schema row;
            outputer_SV254_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV254_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV254_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV254_Extract
#pragma region SV255_Extract
#if defined(COMPILE_SV255_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_509>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV255_Extract_GetSStream_508;
    SStreamV3ExtractorType_SV255_Extract_GetSStream_508 * CreateExtractor_SV255_Extract_GetSStream_508(unique_ptr<SStreamV3ExtractorType_SV255_Extract_GetSStream_508> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV255_Extract_GetSStream_508(508, "", true/*100*/, UID_GetSStream_508));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV255_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV255_Extract_GetSStream_508> extractor_0_ptr;
        SStreamV3ExtractorType_SV255_Extract_GetSStream_508 * extractor_0 = CreateExtractor_SV255_Extract_GetSStream_508(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_509;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_509> sorter_Process_509_ptr (new SorterType_Process_509(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_509));
        SorterType_Process_509 * sorter_Process_509 = sorter_Process_509_ptr.get();
        ULONG sorter_Process_509_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_509, BinaryOutputPolicy<typename SorterType_Process_509::Schema>, BinaryOutputStream, false> OutputerType1_SV255_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV255_Extract> outputer_SV255_Extract_out0_ptr(new OutputerType1_SV255_Extract(sorter_Process_509, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV255_Extract_out0));
        OutputerType1_SV255_Extract * outputer_SV255_Extract_out0 = outputer_SV255_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV255_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_509::Schema row;
            outputer_SV255_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV255_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV255_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV255_Extract
#pragma region SV256_Extract
#if defined(COMPILE_SV256_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_511>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV256_Extract_GetSStream_510;
    SStreamV3ExtractorType_SV256_Extract_GetSStream_510 * CreateExtractor_SV256_Extract_GetSStream_510(unique_ptr<SStreamV3ExtractorType_SV256_Extract_GetSStream_510> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV256_Extract_GetSStream_510(510, "", true/*100*/, UID_GetSStream_510));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV256_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV256_Extract_GetSStream_510> extractor_0_ptr;
        SStreamV3ExtractorType_SV256_Extract_GetSStream_510 * extractor_0 = CreateExtractor_SV256_Extract_GetSStream_510(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_511;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_511> sorter_Process_511_ptr (new SorterType_Process_511(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_511));
        SorterType_Process_511 * sorter_Process_511 = sorter_Process_511_ptr.get();
        ULONG sorter_Process_511_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_511, BinaryOutputPolicy<typename SorterType_Process_511::Schema>, BinaryOutputStream, false> OutputerType1_SV256_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV256_Extract> outputer_SV256_Extract_out0_ptr(new OutputerType1_SV256_Extract(sorter_Process_511, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV256_Extract_out0));
        OutputerType1_SV256_Extract * outputer_SV256_Extract_out0 = outputer_SV256_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV256_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_511::Schema row;
            outputer_SV256_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV256_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV256_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV256_Extract
#pragma region SV257_Extract
#if defined(COMPILE_SV257_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_513>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV257_Extract_GetSStream_512;
    SStreamV3ExtractorType_SV257_Extract_GetSStream_512 * CreateExtractor_SV257_Extract_GetSStream_512(unique_ptr<SStreamV3ExtractorType_SV257_Extract_GetSStream_512> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV257_Extract_GetSStream_512(512, "", true/*100*/, UID_GetSStream_512));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV257_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV257_Extract_GetSStream_512> extractor_0_ptr;
        SStreamV3ExtractorType_SV257_Extract_GetSStream_512 * extractor_0 = CreateExtractor_SV257_Extract_GetSStream_512(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_513;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_513> sorter_Process_513_ptr (new SorterType_Process_513(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_513));
        SorterType_Process_513 * sorter_Process_513 = sorter_Process_513_ptr.get();
        ULONG sorter_Process_513_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_513, BinaryOutputPolicy<typename SorterType_Process_513::Schema>, BinaryOutputStream, false> OutputerType1_SV257_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV257_Extract> outputer_SV257_Extract_out0_ptr(new OutputerType1_SV257_Extract(sorter_Process_513, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV257_Extract_out0));
        OutputerType1_SV257_Extract * outputer_SV257_Extract_out0 = outputer_SV257_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV257_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_513::Schema row;
            outputer_SV257_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV257_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV257_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV257_Extract
#pragma region SV258_Extract
#if defined(COMPILE_SV258_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_515>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV258_Extract_GetSStream_514;
    SStreamV3ExtractorType_SV258_Extract_GetSStream_514 * CreateExtractor_SV258_Extract_GetSStream_514(unique_ptr<SStreamV3ExtractorType_SV258_Extract_GetSStream_514> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV258_Extract_GetSStream_514(514, "", true/*100*/, UID_GetSStream_514));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV258_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV258_Extract_GetSStream_514> extractor_0_ptr;
        SStreamV3ExtractorType_SV258_Extract_GetSStream_514 * extractor_0 = CreateExtractor_SV258_Extract_GetSStream_514(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_515;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_515> sorter_Process_515_ptr (new SorterType_Process_515(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_515));
        SorterType_Process_515 * sorter_Process_515 = sorter_Process_515_ptr.get();
        ULONG sorter_Process_515_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_515, BinaryOutputPolicy<typename SorterType_Process_515::Schema>, BinaryOutputStream, false> OutputerType1_SV258_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV258_Extract> outputer_SV258_Extract_out0_ptr(new OutputerType1_SV258_Extract(sorter_Process_515, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV258_Extract_out0));
        OutputerType1_SV258_Extract * outputer_SV258_Extract_out0 = outputer_SV258_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV258_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_515::Schema row;
            outputer_SV258_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV258_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV258_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV258_Extract
#pragma region SV259_Extract
#if defined(COMPILE_SV259_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_517>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV259_Extract_GetSStream_516;
    SStreamV3ExtractorType_SV259_Extract_GetSStream_516 * CreateExtractor_SV259_Extract_GetSStream_516(unique_ptr<SStreamV3ExtractorType_SV259_Extract_GetSStream_516> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV259_Extract_GetSStream_516(516, "", true/*100*/, UID_GetSStream_516));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV259_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV259_Extract_GetSStream_516> extractor_0_ptr;
        SStreamV3ExtractorType_SV259_Extract_GetSStream_516 * extractor_0 = CreateExtractor_SV259_Extract_GetSStream_516(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_517;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_517> sorter_Process_517_ptr (new SorterType_Process_517(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_517));
        SorterType_Process_517 * sorter_Process_517 = sorter_Process_517_ptr.get();
        ULONG sorter_Process_517_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_517, BinaryOutputPolicy<typename SorterType_Process_517::Schema>, BinaryOutputStream, false> OutputerType1_SV259_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV259_Extract> outputer_SV259_Extract_out0_ptr(new OutputerType1_SV259_Extract(sorter_Process_517, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV259_Extract_out0));
        OutputerType1_SV259_Extract * outputer_SV259_Extract_out0 = outputer_SV259_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV259_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_517::Schema row;
            outputer_SV259_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV259_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV259_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV259_Extract
#pragma region SV260_Extract
#if defined(COMPILE_SV260_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_519>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV260_Extract_GetSStream_518;
    SStreamV3ExtractorType_SV260_Extract_GetSStream_518 * CreateExtractor_SV260_Extract_GetSStream_518(unique_ptr<SStreamV3ExtractorType_SV260_Extract_GetSStream_518> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV260_Extract_GetSStream_518(518, "", true/*100*/, UID_GetSStream_518));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV260_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV260_Extract_GetSStream_518> extractor_0_ptr;
        SStreamV3ExtractorType_SV260_Extract_GetSStream_518 * extractor_0 = CreateExtractor_SV260_Extract_GetSStream_518(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_519;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_519> sorter_Process_519_ptr (new SorterType_Process_519(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_519));
        SorterType_Process_519 * sorter_Process_519 = sorter_Process_519_ptr.get();
        ULONG sorter_Process_519_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_519, BinaryOutputPolicy<typename SorterType_Process_519::Schema>, BinaryOutputStream, false> OutputerType1_SV260_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV260_Extract> outputer_SV260_Extract_out0_ptr(new OutputerType1_SV260_Extract(sorter_Process_519, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV260_Extract_out0));
        OutputerType1_SV260_Extract * outputer_SV260_Extract_out0 = outputer_SV260_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV260_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_519::Schema row;
            outputer_SV260_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV260_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV260_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV260_Extract
#pragma region SV261_Extract
#if defined(COMPILE_SV261_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_521>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV261_Extract_GetSStream_520;
    SStreamV3ExtractorType_SV261_Extract_GetSStream_520 * CreateExtractor_SV261_Extract_GetSStream_520(unique_ptr<SStreamV3ExtractorType_SV261_Extract_GetSStream_520> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV261_Extract_GetSStream_520(520, "", true/*100*/, UID_GetSStream_520));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV261_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV261_Extract_GetSStream_520> extractor_0_ptr;
        SStreamV3ExtractorType_SV261_Extract_GetSStream_520 * extractor_0 = CreateExtractor_SV261_Extract_GetSStream_520(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_521;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_521> sorter_Process_521_ptr (new SorterType_Process_521(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_521));
        SorterType_Process_521 * sorter_Process_521 = sorter_Process_521_ptr.get();
        ULONG sorter_Process_521_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_521, BinaryOutputPolicy<typename SorterType_Process_521::Schema>, BinaryOutputStream, false> OutputerType1_SV261_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV261_Extract> outputer_SV261_Extract_out0_ptr(new OutputerType1_SV261_Extract(sorter_Process_521, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV261_Extract_out0));
        OutputerType1_SV261_Extract * outputer_SV261_Extract_out0 = outputer_SV261_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV261_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_521::Schema row;
            outputer_SV261_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV261_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV261_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV261_Extract
#pragma region SV262_Extract
#if defined(COMPILE_SV262_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_523>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV262_Extract_GetSStream_522;
    SStreamV3ExtractorType_SV262_Extract_GetSStream_522 * CreateExtractor_SV262_Extract_GetSStream_522(unique_ptr<SStreamV3ExtractorType_SV262_Extract_GetSStream_522> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV262_Extract_GetSStream_522(522, "", true/*100*/, UID_GetSStream_522));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV262_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV262_Extract_GetSStream_522> extractor_0_ptr;
        SStreamV3ExtractorType_SV262_Extract_GetSStream_522 * extractor_0 = CreateExtractor_SV262_Extract_GetSStream_522(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_523;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_523> sorter_Process_523_ptr (new SorterType_Process_523(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_523));
        SorterType_Process_523 * sorter_Process_523 = sorter_Process_523_ptr.get();
        ULONG sorter_Process_523_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_523, BinaryOutputPolicy<typename SorterType_Process_523::Schema>, BinaryOutputStream, false> OutputerType1_SV262_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV262_Extract> outputer_SV262_Extract_out0_ptr(new OutputerType1_SV262_Extract(sorter_Process_523, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV262_Extract_out0));
        OutputerType1_SV262_Extract * outputer_SV262_Extract_out0 = outputer_SV262_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV262_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_523::Schema row;
            outputer_SV262_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV262_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV262_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV262_Extract
#pragma region SV263_Extract
#if defined(COMPILE_SV263_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_525>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV263_Extract_GetSStream_524;
    SStreamV3ExtractorType_SV263_Extract_GetSStream_524 * CreateExtractor_SV263_Extract_GetSStream_524(unique_ptr<SStreamV3ExtractorType_SV263_Extract_GetSStream_524> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV263_Extract_GetSStream_524(524, "", true/*100*/, UID_GetSStream_524));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV263_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV263_Extract_GetSStream_524> extractor_0_ptr;
        SStreamV3ExtractorType_SV263_Extract_GetSStream_524 * extractor_0 = CreateExtractor_SV263_Extract_GetSStream_524(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_525;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_525> sorter_Process_525_ptr (new SorterType_Process_525(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_525));
        SorterType_Process_525 * sorter_Process_525 = sorter_Process_525_ptr.get();
        ULONG sorter_Process_525_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_525, BinaryOutputPolicy<typename SorterType_Process_525::Schema>, BinaryOutputStream, false> OutputerType1_SV263_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV263_Extract> outputer_SV263_Extract_out0_ptr(new OutputerType1_SV263_Extract(sorter_Process_525, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV263_Extract_out0));
        OutputerType1_SV263_Extract * outputer_SV263_Extract_out0 = outputer_SV263_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV263_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_525::Schema row;
            outputer_SV263_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV263_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV263_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV263_Extract
#pragma region SV264_Extract
#if defined(COMPILE_SV264_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_527>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV264_Extract_GetSStream_526;
    SStreamV3ExtractorType_SV264_Extract_GetSStream_526 * CreateExtractor_SV264_Extract_GetSStream_526(unique_ptr<SStreamV3ExtractorType_SV264_Extract_GetSStream_526> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV264_Extract_GetSStream_526(526, "", true/*100*/, UID_GetSStream_526));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV264_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV264_Extract_GetSStream_526> extractor_0_ptr;
        SStreamV3ExtractorType_SV264_Extract_GetSStream_526 * extractor_0 = CreateExtractor_SV264_Extract_GetSStream_526(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_527;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_527> sorter_Process_527_ptr (new SorterType_Process_527(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_527));
        SorterType_Process_527 * sorter_Process_527 = sorter_Process_527_ptr.get();
        ULONG sorter_Process_527_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_527, BinaryOutputPolicy<typename SorterType_Process_527::Schema>, BinaryOutputStream, false> OutputerType1_SV264_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV264_Extract> outputer_SV264_Extract_out0_ptr(new OutputerType1_SV264_Extract(sorter_Process_527, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV264_Extract_out0));
        OutputerType1_SV264_Extract * outputer_SV264_Extract_out0 = outputer_SV264_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV264_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_527::Schema row;
            outputer_SV264_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV264_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV264_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV264_Extract
#pragma region SV265_Extract
#if defined(COMPILE_SV265_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_529>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV265_Extract_GetSStream_528;
    SStreamV3ExtractorType_SV265_Extract_GetSStream_528 * CreateExtractor_SV265_Extract_GetSStream_528(unique_ptr<SStreamV3ExtractorType_SV265_Extract_GetSStream_528> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV265_Extract_GetSStream_528(528, "", true/*100*/, UID_GetSStream_528));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV265_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV265_Extract_GetSStream_528> extractor_0_ptr;
        SStreamV3ExtractorType_SV265_Extract_GetSStream_528 * extractor_0 = CreateExtractor_SV265_Extract_GetSStream_528(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_529;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_529> sorter_Process_529_ptr (new SorterType_Process_529(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_529));
        SorterType_Process_529 * sorter_Process_529 = sorter_Process_529_ptr.get();
        ULONG sorter_Process_529_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_529, BinaryOutputPolicy<typename SorterType_Process_529::Schema>, BinaryOutputStream, false> OutputerType1_SV265_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV265_Extract> outputer_SV265_Extract_out0_ptr(new OutputerType1_SV265_Extract(sorter_Process_529, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV265_Extract_out0));
        OutputerType1_SV265_Extract * outputer_SV265_Extract_out0 = outputer_SV265_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV265_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_529::Schema row;
            outputer_SV265_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV265_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV265_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV265_Extract
#pragma region SV266_Extract
#if defined(COMPILE_SV266_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_531>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV266_Extract_GetSStream_530;
    SStreamV3ExtractorType_SV266_Extract_GetSStream_530 * CreateExtractor_SV266_Extract_GetSStream_530(unique_ptr<SStreamV3ExtractorType_SV266_Extract_GetSStream_530> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV266_Extract_GetSStream_530(530, "", true/*100*/, UID_GetSStream_530));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV266_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV266_Extract_GetSStream_530> extractor_0_ptr;
        SStreamV3ExtractorType_SV266_Extract_GetSStream_530 * extractor_0 = CreateExtractor_SV266_Extract_GetSStream_530(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_531;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_531> sorter_Process_531_ptr (new SorterType_Process_531(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_531));
        SorterType_Process_531 * sorter_Process_531 = sorter_Process_531_ptr.get();
        ULONG sorter_Process_531_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_531, BinaryOutputPolicy<typename SorterType_Process_531::Schema>, BinaryOutputStream, false> OutputerType1_SV266_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV266_Extract> outputer_SV266_Extract_out0_ptr(new OutputerType1_SV266_Extract(sorter_Process_531, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV266_Extract_out0));
        OutputerType1_SV266_Extract * outputer_SV266_Extract_out0 = outputer_SV266_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV266_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_531::Schema row;
            outputer_SV266_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV266_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV266_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV266_Extract
#pragma region SV267_Extract
#if defined(COMPILE_SV267_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_533>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV267_Extract_GetSStream_532;
    SStreamV3ExtractorType_SV267_Extract_GetSStream_532 * CreateExtractor_SV267_Extract_GetSStream_532(unique_ptr<SStreamV3ExtractorType_SV267_Extract_GetSStream_532> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV267_Extract_GetSStream_532(532, "", true/*100*/, UID_GetSStream_532));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV267_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV267_Extract_GetSStream_532> extractor_0_ptr;
        SStreamV3ExtractorType_SV267_Extract_GetSStream_532 * extractor_0 = CreateExtractor_SV267_Extract_GetSStream_532(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_533;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_533> sorter_Process_533_ptr (new SorterType_Process_533(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_533));
        SorterType_Process_533 * sorter_Process_533 = sorter_Process_533_ptr.get();
        ULONG sorter_Process_533_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_533, BinaryOutputPolicy<typename SorterType_Process_533::Schema>, BinaryOutputStream, false> OutputerType1_SV267_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV267_Extract> outputer_SV267_Extract_out0_ptr(new OutputerType1_SV267_Extract(sorter_Process_533, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV267_Extract_out0));
        OutputerType1_SV267_Extract * outputer_SV267_Extract_out0 = outputer_SV267_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV267_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_533::Schema row;
            outputer_SV267_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV267_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV267_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV267_Extract
#pragma region SV268_Extract
#if defined(COMPILE_SV268_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_535>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV268_Extract_GetSStream_534;
    SStreamV3ExtractorType_SV268_Extract_GetSStream_534 * CreateExtractor_SV268_Extract_GetSStream_534(unique_ptr<SStreamV3ExtractorType_SV268_Extract_GetSStream_534> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV268_Extract_GetSStream_534(534, "", true/*100*/, UID_GetSStream_534));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV268_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV268_Extract_GetSStream_534> extractor_0_ptr;
        SStreamV3ExtractorType_SV268_Extract_GetSStream_534 * extractor_0 = CreateExtractor_SV268_Extract_GetSStream_534(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_535;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_535> sorter_Process_535_ptr (new SorterType_Process_535(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_535));
        SorterType_Process_535 * sorter_Process_535 = sorter_Process_535_ptr.get();
        ULONG sorter_Process_535_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_535, BinaryOutputPolicy<typename SorterType_Process_535::Schema>, BinaryOutputStream, false> OutputerType1_SV268_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV268_Extract> outputer_SV268_Extract_out0_ptr(new OutputerType1_SV268_Extract(sorter_Process_535, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV268_Extract_out0));
        OutputerType1_SV268_Extract * outputer_SV268_Extract_out0 = outputer_SV268_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV268_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_535::Schema row;
            outputer_SV268_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV268_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV268_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV268_Extract
#pragma region SV269_Extract
#if defined(COMPILE_SV269_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_537>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV269_Extract_GetSStream_536;
    SStreamV3ExtractorType_SV269_Extract_GetSStream_536 * CreateExtractor_SV269_Extract_GetSStream_536(unique_ptr<SStreamV3ExtractorType_SV269_Extract_GetSStream_536> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV269_Extract_GetSStream_536(536, "", true/*100*/, UID_GetSStream_536));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV269_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV269_Extract_GetSStream_536> extractor_0_ptr;
        SStreamV3ExtractorType_SV269_Extract_GetSStream_536 * extractor_0 = CreateExtractor_SV269_Extract_GetSStream_536(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_537;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_537> sorter_Process_537_ptr (new SorterType_Process_537(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_537));
        SorterType_Process_537 * sorter_Process_537 = sorter_Process_537_ptr.get();
        ULONG sorter_Process_537_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_537, BinaryOutputPolicy<typename SorterType_Process_537::Schema>, BinaryOutputStream, false> OutputerType1_SV269_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV269_Extract> outputer_SV269_Extract_out0_ptr(new OutputerType1_SV269_Extract(sorter_Process_537, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV269_Extract_out0));
        OutputerType1_SV269_Extract * outputer_SV269_Extract_out0 = outputer_SV269_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV269_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_537::Schema row;
            outputer_SV269_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV269_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV269_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV269_Extract
#pragma region SV270_Extract
#if defined(COMPILE_SV270_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_539>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV270_Extract_GetSStream_538;
    SStreamV3ExtractorType_SV270_Extract_GetSStream_538 * CreateExtractor_SV270_Extract_GetSStream_538(unique_ptr<SStreamV3ExtractorType_SV270_Extract_GetSStream_538> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV270_Extract_GetSStream_538(538, "", true/*100*/, UID_GetSStream_538));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV270_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV270_Extract_GetSStream_538> extractor_0_ptr;
        SStreamV3ExtractorType_SV270_Extract_GetSStream_538 * extractor_0 = CreateExtractor_SV270_Extract_GetSStream_538(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_539;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_539> sorter_Process_539_ptr (new SorterType_Process_539(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_539));
        SorterType_Process_539 * sorter_Process_539 = sorter_Process_539_ptr.get();
        ULONG sorter_Process_539_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_539, BinaryOutputPolicy<typename SorterType_Process_539::Schema>, BinaryOutputStream, false> OutputerType1_SV270_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV270_Extract> outputer_SV270_Extract_out0_ptr(new OutputerType1_SV270_Extract(sorter_Process_539, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV270_Extract_out0));
        OutputerType1_SV270_Extract * outputer_SV270_Extract_out0 = outputer_SV270_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV270_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_539::Schema row;
            outputer_SV270_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV270_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV270_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV270_Extract
#pragma region SV271_Extract
#if defined(COMPILE_SV271_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_541>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV271_Extract_GetSStream_540;
    SStreamV3ExtractorType_SV271_Extract_GetSStream_540 * CreateExtractor_SV271_Extract_GetSStream_540(unique_ptr<SStreamV3ExtractorType_SV271_Extract_GetSStream_540> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV271_Extract_GetSStream_540(540, "", true/*100*/, UID_GetSStream_540));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV271_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV271_Extract_GetSStream_540> extractor_0_ptr;
        SStreamV3ExtractorType_SV271_Extract_GetSStream_540 * extractor_0 = CreateExtractor_SV271_Extract_GetSStream_540(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_541;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_541> sorter_Process_541_ptr (new SorterType_Process_541(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_541));
        SorterType_Process_541 * sorter_Process_541 = sorter_Process_541_ptr.get();
        ULONG sorter_Process_541_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_541, BinaryOutputPolicy<typename SorterType_Process_541::Schema>, BinaryOutputStream, false> OutputerType1_SV271_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV271_Extract> outputer_SV271_Extract_out0_ptr(new OutputerType1_SV271_Extract(sorter_Process_541, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV271_Extract_out0));
        OutputerType1_SV271_Extract * outputer_SV271_Extract_out0 = outputer_SV271_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV271_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_541::Schema row;
            outputer_SV271_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV271_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV271_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV271_Extract
#pragma region SV272_Extract
#if defined(COMPILE_SV272_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_543>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV272_Extract_GetSStream_542;
    SStreamV3ExtractorType_SV272_Extract_GetSStream_542 * CreateExtractor_SV272_Extract_GetSStream_542(unique_ptr<SStreamV3ExtractorType_SV272_Extract_GetSStream_542> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV272_Extract_GetSStream_542(542, "", true/*100*/, UID_GetSStream_542));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV272_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV272_Extract_GetSStream_542> extractor_0_ptr;
        SStreamV3ExtractorType_SV272_Extract_GetSStream_542 * extractor_0 = CreateExtractor_SV272_Extract_GetSStream_542(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_543;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_543> sorter_Process_543_ptr (new SorterType_Process_543(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_543));
        SorterType_Process_543 * sorter_Process_543 = sorter_Process_543_ptr.get();
        ULONG sorter_Process_543_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_543, BinaryOutputPolicy<typename SorterType_Process_543::Schema>, BinaryOutputStream, false> OutputerType1_SV272_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV272_Extract> outputer_SV272_Extract_out0_ptr(new OutputerType1_SV272_Extract(sorter_Process_543, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV272_Extract_out0));
        OutputerType1_SV272_Extract * outputer_SV272_Extract_out0 = outputer_SV272_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV272_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_543::Schema row;
            outputer_SV272_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV272_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV272_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV272_Extract
#pragma region SV273_Extract
#if defined(COMPILE_SV273_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_545>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV273_Extract_GetSStream_544;
    SStreamV3ExtractorType_SV273_Extract_GetSStream_544 * CreateExtractor_SV273_Extract_GetSStream_544(unique_ptr<SStreamV3ExtractorType_SV273_Extract_GetSStream_544> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV273_Extract_GetSStream_544(544, "", true/*100*/, UID_GetSStream_544));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV273_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV273_Extract_GetSStream_544> extractor_0_ptr;
        SStreamV3ExtractorType_SV273_Extract_GetSStream_544 * extractor_0 = CreateExtractor_SV273_Extract_GetSStream_544(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_545;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_545> sorter_Process_545_ptr (new SorterType_Process_545(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_545));
        SorterType_Process_545 * sorter_Process_545 = sorter_Process_545_ptr.get();
        ULONG sorter_Process_545_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_545, BinaryOutputPolicy<typename SorterType_Process_545::Schema>, BinaryOutputStream, false> OutputerType1_SV273_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV273_Extract> outputer_SV273_Extract_out0_ptr(new OutputerType1_SV273_Extract(sorter_Process_545, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV273_Extract_out0));
        OutputerType1_SV273_Extract * outputer_SV273_Extract_out0 = outputer_SV273_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV273_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_545::Schema row;
            outputer_SV273_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV273_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV273_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV273_Extract
#pragma region SV274_Extract
#if defined(COMPILE_SV274_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_547>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV274_Extract_GetSStream_546;
    SStreamV3ExtractorType_SV274_Extract_GetSStream_546 * CreateExtractor_SV274_Extract_GetSStream_546(unique_ptr<SStreamV3ExtractorType_SV274_Extract_GetSStream_546> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV274_Extract_GetSStream_546(546, "", true/*100*/, UID_GetSStream_546));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV274_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV274_Extract_GetSStream_546> extractor_0_ptr;
        SStreamV3ExtractorType_SV274_Extract_GetSStream_546 * extractor_0 = CreateExtractor_SV274_Extract_GetSStream_546(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_547;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_547> sorter_Process_547_ptr (new SorterType_Process_547(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_547));
        SorterType_Process_547 * sorter_Process_547 = sorter_Process_547_ptr.get();
        ULONG sorter_Process_547_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_547, BinaryOutputPolicy<typename SorterType_Process_547::Schema>, BinaryOutputStream, false> OutputerType1_SV274_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV274_Extract> outputer_SV274_Extract_out0_ptr(new OutputerType1_SV274_Extract(sorter_Process_547, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV274_Extract_out0));
        OutputerType1_SV274_Extract * outputer_SV274_Extract_out0 = outputer_SV274_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV274_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_547::Schema row;
            outputer_SV274_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV274_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV274_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV274_Extract
#pragma region SV275_Extract
#if defined(COMPILE_SV275_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_549>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV275_Extract_GetSStream_548;
    SStreamV3ExtractorType_SV275_Extract_GetSStream_548 * CreateExtractor_SV275_Extract_GetSStream_548(unique_ptr<SStreamV3ExtractorType_SV275_Extract_GetSStream_548> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV275_Extract_GetSStream_548(548, "", true/*100*/, UID_GetSStream_548));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV275_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV275_Extract_GetSStream_548> extractor_0_ptr;
        SStreamV3ExtractorType_SV275_Extract_GetSStream_548 * extractor_0 = CreateExtractor_SV275_Extract_GetSStream_548(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_549;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_549> sorter_Process_549_ptr (new SorterType_Process_549(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_549));
        SorterType_Process_549 * sorter_Process_549 = sorter_Process_549_ptr.get();
        ULONG sorter_Process_549_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_549, BinaryOutputPolicy<typename SorterType_Process_549::Schema>, BinaryOutputStream, false> OutputerType1_SV275_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV275_Extract> outputer_SV275_Extract_out0_ptr(new OutputerType1_SV275_Extract(sorter_Process_549, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV275_Extract_out0));
        OutputerType1_SV275_Extract * outputer_SV275_Extract_out0 = outputer_SV275_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV275_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_549::Schema row;
            outputer_SV275_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV275_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV275_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV275_Extract
#pragma region SV276_Extract
#if defined(COMPILE_SV276_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_551>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV276_Extract_GetSStream_550;
    SStreamV3ExtractorType_SV276_Extract_GetSStream_550 * CreateExtractor_SV276_Extract_GetSStream_550(unique_ptr<SStreamV3ExtractorType_SV276_Extract_GetSStream_550> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV276_Extract_GetSStream_550(550, "", true/*100*/, UID_GetSStream_550));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV276_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV276_Extract_GetSStream_550> extractor_0_ptr;
        SStreamV3ExtractorType_SV276_Extract_GetSStream_550 * extractor_0 = CreateExtractor_SV276_Extract_GetSStream_550(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_551;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_551> sorter_Process_551_ptr (new SorterType_Process_551(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_551));
        SorterType_Process_551 * sorter_Process_551 = sorter_Process_551_ptr.get();
        ULONG sorter_Process_551_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_551, BinaryOutputPolicy<typename SorterType_Process_551::Schema>, BinaryOutputStream, false> OutputerType1_SV276_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV276_Extract> outputer_SV276_Extract_out0_ptr(new OutputerType1_SV276_Extract(sorter_Process_551, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV276_Extract_out0));
        OutputerType1_SV276_Extract * outputer_SV276_Extract_out0 = outputer_SV276_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV276_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_551::Schema row;
            outputer_SV276_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV276_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV276_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV276_Extract
#pragma region SV277_Extract
#if defined(COMPILE_SV277_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_553>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV277_Extract_GetSStream_552;
    SStreamV3ExtractorType_SV277_Extract_GetSStream_552 * CreateExtractor_SV277_Extract_GetSStream_552(unique_ptr<SStreamV3ExtractorType_SV277_Extract_GetSStream_552> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV277_Extract_GetSStream_552(552, "", true/*100*/, UID_GetSStream_552));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV277_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV277_Extract_GetSStream_552> extractor_0_ptr;
        SStreamV3ExtractorType_SV277_Extract_GetSStream_552 * extractor_0 = CreateExtractor_SV277_Extract_GetSStream_552(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_553;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_553> sorter_Process_553_ptr (new SorterType_Process_553(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_553));
        SorterType_Process_553 * sorter_Process_553 = sorter_Process_553_ptr.get();
        ULONG sorter_Process_553_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_553, BinaryOutputPolicy<typename SorterType_Process_553::Schema>, BinaryOutputStream, false> OutputerType1_SV277_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV277_Extract> outputer_SV277_Extract_out0_ptr(new OutputerType1_SV277_Extract(sorter_Process_553, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV277_Extract_out0));
        OutputerType1_SV277_Extract * outputer_SV277_Extract_out0 = outputer_SV277_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV277_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_553::Schema row;
            outputer_SV277_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV277_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV277_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV277_Extract
#pragma region SV278_Extract
#if defined(COMPILE_SV278_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_555>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV278_Extract_GetSStream_554;
    SStreamV3ExtractorType_SV278_Extract_GetSStream_554 * CreateExtractor_SV278_Extract_GetSStream_554(unique_ptr<SStreamV3ExtractorType_SV278_Extract_GetSStream_554> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV278_Extract_GetSStream_554(554, "", true/*100*/, UID_GetSStream_554));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV278_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV278_Extract_GetSStream_554> extractor_0_ptr;
        SStreamV3ExtractorType_SV278_Extract_GetSStream_554 * extractor_0 = CreateExtractor_SV278_Extract_GetSStream_554(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_555;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_555> sorter_Process_555_ptr (new SorterType_Process_555(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_555));
        SorterType_Process_555 * sorter_Process_555 = sorter_Process_555_ptr.get();
        ULONG sorter_Process_555_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_555, BinaryOutputPolicy<typename SorterType_Process_555::Schema>, BinaryOutputStream, false> OutputerType1_SV278_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV278_Extract> outputer_SV278_Extract_out0_ptr(new OutputerType1_SV278_Extract(sorter_Process_555, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV278_Extract_out0));
        OutputerType1_SV278_Extract * outputer_SV278_Extract_out0 = outputer_SV278_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV278_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_555::Schema row;
            outputer_SV278_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV278_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV278_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV278_Extract
#pragma region SV279_Extract
#if defined(COMPILE_SV279_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_557>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV279_Extract_GetSStream_556;
    SStreamV3ExtractorType_SV279_Extract_GetSStream_556 * CreateExtractor_SV279_Extract_GetSStream_556(unique_ptr<SStreamV3ExtractorType_SV279_Extract_GetSStream_556> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV279_Extract_GetSStream_556(556, "", true/*100*/, UID_GetSStream_556));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV279_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV279_Extract_GetSStream_556> extractor_0_ptr;
        SStreamV3ExtractorType_SV279_Extract_GetSStream_556 * extractor_0 = CreateExtractor_SV279_Extract_GetSStream_556(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_557;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_557> sorter_Process_557_ptr (new SorterType_Process_557(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_557));
        SorterType_Process_557 * sorter_Process_557 = sorter_Process_557_ptr.get();
        ULONG sorter_Process_557_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_557, BinaryOutputPolicy<typename SorterType_Process_557::Schema>, BinaryOutputStream, false> OutputerType1_SV279_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV279_Extract> outputer_SV279_Extract_out0_ptr(new OutputerType1_SV279_Extract(sorter_Process_557, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV279_Extract_out0));
        OutputerType1_SV279_Extract * outputer_SV279_Extract_out0 = outputer_SV279_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV279_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_557::Schema row;
            outputer_SV279_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV279_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV279_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV279_Extract
#pragma region SV280_Extract
#if defined(COMPILE_SV280_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_559>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV280_Extract_GetSStream_558;
    SStreamV3ExtractorType_SV280_Extract_GetSStream_558 * CreateExtractor_SV280_Extract_GetSStream_558(unique_ptr<SStreamV3ExtractorType_SV280_Extract_GetSStream_558> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV280_Extract_GetSStream_558(558, "", true/*100*/, UID_GetSStream_558));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV280_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV280_Extract_GetSStream_558> extractor_0_ptr;
        SStreamV3ExtractorType_SV280_Extract_GetSStream_558 * extractor_0 = CreateExtractor_SV280_Extract_GetSStream_558(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_559;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_559> sorter_Process_559_ptr (new SorterType_Process_559(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_559));
        SorterType_Process_559 * sorter_Process_559 = sorter_Process_559_ptr.get();
        ULONG sorter_Process_559_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_559, BinaryOutputPolicy<typename SorterType_Process_559::Schema>, BinaryOutputStream, false> OutputerType1_SV280_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV280_Extract> outputer_SV280_Extract_out0_ptr(new OutputerType1_SV280_Extract(sorter_Process_559, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV280_Extract_out0));
        OutputerType1_SV280_Extract * outputer_SV280_Extract_out0 = outputer_SV280_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV280_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_559::Schema row;
            outputer_SV280_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV280_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV280_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV280_Extract
#pragma region SV281_Extract
#if defined(COMPILE_SV281_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_561>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV281_Extract_GetSStream_560;
    SStreamV3ExtractorType_SV281_Extract_GetSStream_560 * CreateExtractor_SV281_Extract_GetSStream_560(unique_ptr<SStreamV3ExtractorType_SV281_Extract_GetSStream_560> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV281_Extract_GetSStream_560(560, "", true/*100*/, UID_GetSStream_560));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV281_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV281_Extract_GetSStream_560> extractor_0_ptr;
        SStreamV3ExtractorType_SV281_Extract_GetSStream_560 * extractor_0 = CreateExtractor_SV281_Extract_GetSStream_560(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_561;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_561> sorter_Process_561_ptr (new SorterType_Process_561(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_561));
        SorterType_Process_561 * sorter_Process_561 = sorter_Process_561_ptr.get();
        ULONG sorter_Process_561_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_561, BinaryOutputPolicy<typename SorterType_Process_561::Schema>, BinaryOutputStream, false> OutputerType1_SV281_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV281_Extract> outputer_SV281_Extract_out0_ptr(new OutputerType1_SV281_Extract(sorter_Process_561, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV281_Extract_out0));
        OutputerType1_SV281_Extract * outputer_SV281_Extract_out0 = outputer_SV281_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV281_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_561::Schema row;
            outputer_SV281_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV281_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV281_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV281_Extract
#pragma region SV282_Extract
#if defined(COMPILE_SV282_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_563>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV282_Extract_GetSStream_562;
    SStreamV3ExtractorType_SV282_Extract_GetSStream_562 * CreateExtractor_SV282_Extract_GetSStream_562(unique_ptr<SStreamV3ExtractorType_SV282_Extract_GetSStream_562> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV282_Extract_GetSStream_562(562, "", true/*100*/, UID_GetSStream_562));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV282_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV282_Extract_GetSStream_562> extractor_0_ptr;
        SStreamV3ExtractorType_SV282_Extract_GetSStream_562 * extractor_0 = CreateExtractor_SV282_Extract_GetSStream_562(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_563;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_563> sorter_Process_563_ptr (new SorterType_Process_563(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_563));
        SorterType_Process_563 * sorter_Process_563 = sorter_Process_563_ptr.get();
        ULONG sorter_Process_563_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_563, BinaryOutputPolicy<typename SorterType_Process_563::Schema>, BinaryOutputStream, false> OutputerType1_SV282_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV282_Extract> outputer_SV282_Extract_out0_ptr(new OutputerType1_SV282_Extract(sorter_Process_563, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV282_Extract_out0));
        OutputerType1_SV282_Extract * outputer_SV282_Extract_out0 = outputer_SV282_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV282_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_563::Schema row;
            outputer_SV282_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV282_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV282_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV282_Extract
#pragma region SV283_Extract
#if defined(COMPILE_SV283_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_565>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV283_Extract_GetSStream_564;
    SStreamV3ExtractorType_SV283_Extract_GetSStream_564 * CreateExtractor_SV283_Extract_GetSStream_564(unique_ptr<SStreamV3ExtractorType_SV283_Extract_GetSStream_564> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV283_Extract_GetSStream_564(564, "", true/*100*/, UID_GetSStream_564));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV283_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV283_Extract_GetSStream_564> extractor_0_ptr;
        SStreamV3ExtractorType_SV283_Extract_GetSStream_564 * extractor_0 = CreateExtractor_SV283_Extract_GetSStream_564(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_565;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_565> sorter_Process_565_ptr (new SorterType_Process_565(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_565));
        SorterType_Process_565 * sorter_Process_565 = sorter_Process_565_ptr.get();
        ULONG sorter_Process_565_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_565, BinaryOutputPolicy<typename SorterType_Process_565::Schema>, BinaryOutputStream, false> OutputerType1_SV283_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV283_Extract> outputer_SV283_Extract_out0_ptr(new OutputerType1_SV283_Extract(sorter_Process_565, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV283_Extract_out0));
        OutputerType1_SV283_Extract * outputer_SV283_Extract_out0 = outputer_SV283_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV283_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_565::Schema row;
            outputer_SV283_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV283_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV283_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV283_Extract
#pragma region SV284_Extract
#if defined(COMPILE_SV284_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_567>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV284_Extract_GetSStream_566;
    SStreamV3ExtractorType_SV284_Extract_GetSStream_566 * CreateExtractor_SV284_Extract_GetSStream_566(unique_ptr<SStreamV3ExtractorType_SV284_Extract_GetSStream_566> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV284_Extract_GetSStream_566(566, "", true/*100*/, UID_GetSStream_566));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV284_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV284_Extract_GetSStream_566> extractor_0_ptr;
        SStreamV3ExtractorType_SV284_Extract_GetSStream_566 * extractor_0 = CreateExtractor_SV284_Extract_GetSStream_566(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_567;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_567> sorter_Process_567_ptr (new SorterType_Process_567(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_567));
        SorterType_Process_567 * sorter_Process_567 = sorter_Process_567_ptr.get();
        ULONG sorter_Process_567_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_567, BinaryOutputPolicy<typename SorterType_Process_567::Schema>, BinaryOutputStream, false> OutputerType1_SV284_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV284_Extract> outputer_SV284_Extract_out0_ptr(new OutputerType1_SV284_Extract(sorter_Process_567, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV284_Extract_out0));
        OutputerType1_SV284_Extract * outputer_SV284_Extract_out0 = outputer_SV284_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV284_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_567::Schema row;
            outputer_SV284_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV284_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV284_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV284_Extract
#pragma region SV285_Extract
#if defined(COMPILE_SV285_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_569>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV285_Extract_GetSStream_568;
    SStreamV3ExtractorType_SV285_Extract_GetSStream_568 * CreateExtractor_SV285_Extract_GetSStream_568(unique_ptr<SStreamV3ExtractorType_SV285_Extract_GetSStream_568> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV285_Extract_GetSStream_568(568, "", true/*100*/, UID_GetSStream_568));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV285_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV285_Extract_GetSStream_568> extractor_0_ptr;
        SStreamV3ExtractorType_SV285_Extract_GetSStream_568 * extractor_0 = CreateExtractor_SV285_Extract_GetSStream_568(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_569;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_569> sorter_Process_569_ptr (new SorterType_Process_569(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_569));
        SorterType_Process_569 * sorter_Process_569 = sorter_Process_569_ptr.get();
        ULONG sorter_Process_569_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_569, BinaryOutputPolicy<typename SorterType_Process_569::Schema>, BinaryOutputStream, false> OutputerType1_SV285_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV285_Extract> outputer_SV285_Extract_out0_ptr(new OutputerType1_SV285_Extract(sorter_Process_569, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV285_Extract_out0));
        OutputerType1_SV285_Extract * outputer_SV285_Extract_out0 = outputer_SV285_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV285_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_569::Schema row;
            outputer_SV285_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV285_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV285_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV285_Extract
#pragma region SV286_Extract
#if defined(COMPILE_SV286_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_571>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV286_Extract_GetSStream_570;
    SStreamV3ExtractorType_SV286_Extract_GetSStream_570 * CreateExtractor_SV286_Extract_GetSStream_570(unique_ptr<SStreamV3ExtractorType_SV286_Extract_GetSStream_570> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV286_Extract_GetSStream_570(570, "", true/*100*/, UID_GetSStream_570));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV286_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV286_Extract_GetSStream_570> extractor_0_ptr;
        SStreamV3ExtractorType_SV286_Extract_GetSStream_570 * extractor_0 = CreateExtractor_SV286_Extract_GetSStream_570(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_571;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_571> sorter_Process_571_ptr (new SorterType_Process_571(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_571));
        SorterType_Process_571 * sorter_Process_571 = sorter_Process_571_ptr.get();
        ULONG sorter_Process_571_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_571, BinaryOutputPolicy<typename SorterType_Process_571::Schema>, BinaryOutputStream, false> OutputerType1_SV286_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV286_Extract> outputer_SV286_Extract_out0_ptr(new OutputerType1_SV286_Extract(sorter_Process_571, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV286_Extract_out0));
        OutputerType1_SV286_Extract * outputer_SV286_Extract_out0 = outputer_SV286_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV286_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_571::Schema row;
            outputer_SV286_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV286_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV286_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV286_Extract
#pragma region SV287_Extract
#if defined(COMPILE_SV287_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_573>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV287_Extract_GetSStream_572;
    SStreamV3ExtractorType_SV287_Extract_GetSStream_572 * CreateExtractor_SV287_Extract_GetSStream_572(unique_ptr<SStreamV3ExtractorType_SV287_Extract_GetSStream_572> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV287_Extract_GetSStream_572(572, "", true/*100*/, UID_GetSStream_572));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV287_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV287_Extract_GetSStream_572> extractor_0_ptr;
        SStreamV3ExtractorType_SV287_Extract_GetSStream_572 * extractor_0 = CreateExtractor_SV287_Extract_GetSStream_572(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_573;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_573> sorter_Process_573_ptr (new SorterType_Process_573(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_573));
        SorterType_Process_573 * sorter_Process_573 = sorter_Process_573_ptr.get();
        ULONG sorter_Process_573_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_573, BinaryOutputPolicy<typename SorterType_Process_573::Schema>, BinaryOutputStream, false> OutputerType1_SV287_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV287_Extract> outputer_SV287_Extract_out0_ptr(new OutputerType1_SV287_Extract(sorter_Process_573, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV287_Extract_out0));
        OutputerType1_SV287_Extract * outputer_SV287_Extract_out0 = outputer_SV287_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV287_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_573::Schema row;
            outputer_SV287_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV287_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV287_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV287_Extract
#pragma region SV288_Extract
#if defined(COMPILE_SV288_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_575>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV288_Extract_GetSStream_574;
    SStreamV3ExtractorType_SV288_Extract_GetSStream_574 * CreateExtractor_SV288_Extract_GetSStream_574(unique_ptr<SStreamV3ExtractorType_SV288_Extract_GetSStream_574> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV288_Extract_GetSStream_574(574, "", true/*100*/, UID_GetSStream_574));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV288_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV288_Extract_GetSStream_574> extractor_0_ptr;
        SStreamV3ExtractorType_SV288_Extract_GetSStream_574 * extractor_0 = CreateExtractor_SV288_Extract_GetSStream_574(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_575;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_575> sorter_Process_575_ptr (new SorterType_Process_575(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_575));
        SorterType_Process_575 * sorter_Process_575 = sorter_Process_575_ptr.get();
        ULONG sorter_Process_575_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_575, BinaryOutputPolicy<typename SorterType_Process_575::Schema>, BinaryOutputStream, false> OutputerType1_SV288_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV288_Extract> outputer_SV288_Extract_out0_ptr(new OutputerType1_SV288_Extract(sorter_Process_575, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV288_Extract_out0));
        OutputerType1_SV288_Extract * outputer_SV288_Extract_out0 = outputer_SV288_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV288_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_575::Schema row;
            outputer_SV288_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV288_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV288_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV288_Extract
#pragma region SV289_Extract
#if defined(COMPILE_SV289_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_577>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV289_Extract_GetSStream_576;
    SStreamV3ExtractorType_SV289_Extract_GetSStream_576 * CreateExtractor_SV289_Extract_GetSStream_576(unique_ptr<SStreamV3ExtractorType_SV289_Extract_GetSStream_576> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV289_Extract_GetSStream_576(576, "", true/*100*/, UID_GetSStream_576));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV289_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV289_Extract_GetSStream_576> extractor_0_ptr;
        SStreamV3ExtractorType_SV289_Extract_GetSStream_576 * extractor_0 = CreateExtractor_SV289_Extract_GetSStream_576(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_577;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_577> sorter_Process_577_ptr (new SorterType_Process_577(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_577));
        SorterType_Process_577 * sorter_Process_577 = sorter_Process_577_ptr.get();
        ULONG sorter_Process_577_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_577, BinaryOutputPolicy<typename SorterType_Process_577::Schema>, BinaryOutputStream, false> OutputerType1_SV289_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV289_Extract> outputer_SV289_Extract_out0_ptr(new OutputerType1_SV289_Extract(sorter_Process_577, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV289_Extract_out0));
        OutputerType1_SV289_Extract * outputer_SV289_Extract_out0 = outputer_SV289_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV289_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_577::Schema row;
            outputer_SV289_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV289_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV289_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV289_Extract
#pragma region SV290_Extract
#if defined(COMPILE_SV290_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_579>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV290_Extract_GetSStream_578;
    SStreamV3ExtractorType_SV290_Extract_GetSStream_578 * CreateExtractor_SV290_Extract_GetSStream_578(unique_ptr<SStreamV3ExtractorType_SV290_Extract_GetSStream_578> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV290_Extract_GetSStream_578(578, "", true/*100*/, UID_GetSStream_578));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV290_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV290_Extract_GetSStream_578> extractor_0_ptr;
        SStreamV3ExtractorType_SV290_Extract_GetSStream_578 * extractor_0 = CreateExtractor_SV290_Extract_GetSStream_578(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_579;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_579> sorter_Process_579_ptr (new SorterType_Process_579(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_579));
        SorterType_Process_579 * sorter_Process_579 = sorter_Process_579_ptr.get();
        ULONG sorter_Process_579_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_579, BinaryOutputPolicy<typename SorterType_Process_579::Schema>, BinaryOutputStream, false> OutputerType1_SV290_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV290_Extract> outputer_SV290_Extract_out0_ptr(new OutputerType1_SV290_Extract(sorter_Process_579, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV290_Extract_out0));
        OutputerType1_SV290_Extract * outputer_SV290_Extract_out0 = outputer_SV290_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV290_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_579::Schema row;
            outputer_SV290_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV290_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV290_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV290_Extract
#pragma region SV291_Extract
#if defined(COMPILE_SV291_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_581>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV291_Extract_GetSStream_580;
    SStreamV3ExtractorType_SV291_Extract_GetSStream_580 * CreateExtractor_SV291_Extract_GetSStream_580(unique_ptr<SStreamV3ExtractorType_SV291_Extract_GetSStream_580> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV291_Extract_GetSStream_580(580, "", true/*100*/, UID_GetSStream_580));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV291_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV291_Extract_GetSStream_580> extractor_0_ptr;
        SStreamV3ExtractorType_SV291_Extract_GetSStream_580 * extractor_0 = CreateExtractor_SV291_Extract_GetSStream_580(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_581;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_581> sorter_Process_581_ptr (new SorterType_Process_581(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_581));
        SorterType_Process_581 * sorter_Process_581 = sorter_Process_581_ptr.get();
        ULONG sorter_Process_581_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_581, BinaryOutputPolicy<typename SorterType_Process_581::Schema>, BinaryOutputStream, false> OutputerType1_SV291_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV291_Extract> outputer_SV291_Extract_out0_ptr(new OutputerType1_SV291_Extract(sorter_Process_581, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV291_Extract_out0));
        OutputerType1_SV291_Extract * outputer_SV291_Extract_out0 = outputer_SV291_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV291_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_581::Schema row;
            outputer_SV291_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV291_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV291_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV291_Extract
#pragma region SV292_Extract
#if defined(COMPILE_SV292_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_583>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV292_Extract_GetSStream_582;
    SStreamV3ExtractorType_SV292_Extract_GetSStream_582 * CreateExtractor_SV292_Extract_GetSStream_582(unique_ptr<SStreamV3ExtractorType_SV292_Extract_GetSStream_582> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV292_Extract_GetSStream_582(582, "", true/*100*/, UID_GetSStream_582));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV292_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV292_Extract_GetSStream_582> extractor_0_ptr;
        SStreamV3ExtractorType_SV292_Extract_GetSStream_582 * extractor_0 = CreateExtractor_SV292_Extract_GetSStream_582(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_583;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_583> sorter_Process_583_ptr (new SorterType_Process_583(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_583));
        SorterType_Process_583 * sorter_Process_583 = sorter_Process_583_ptr.get();
        ULONG sorter_Process_583_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_583, BinaryOutputPolicy<typename SorterType_Process_583::Schema>, BinaryOutputStream, false> OutputerType1_SV292_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV292_Extract> outputer_SV292_Extract_out0_ptr(new OutputerType1_SV292_Extract(sorter_Process_583, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV292_Extract_out0));
        OutputerType1_SV292_Extract * outputer_SV292_Extract_out0 = outputer_SV292_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV292_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_583::Schema row;
            outputer_SV292_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV292_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV292_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV292_Extract
#pragma region SV293_Extract
#if defined(COMPILE_SV293_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_585>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV293_Extract_GetSStream_584;
    SStreamV3ExtractorType_SV293_Extract_GetSStream_584 * CreateExtractor_SV293_Extract_GetSStream_584(unique_ptr<SStreamV3ExtractorType_SV293_Extract_GetSStream_584> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV293_Extract_GetSStream_584(584, "", true/*100*/, UID_GetSStream_584));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV293_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV293_Extract_GetSStream_584> extractor_0_ptr;
        SStreamV3ExtractorType_SV293_Extract_GetSStream_584 * extractor_0 = CreateExtractor_SV293_Extract_GetSStream_584(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_585;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_585> sorter_Process_585_ptr (new SorterType_Process_585(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_585));
        SorterType_Process_585 * sorter_Process_585 = sorter_Process_585_ptr.get();
        ULONG sorter_Process_585_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_585, BinaryOutputPolicy<typename SorterType_Process_585::Schema>, BinaryOutputStream, false> OutputerType1_SV293_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV293_Extract> outputer_SV293_Extract_out0_ptr(new OutputerType1_SV293_Extract(sorter_Process_585, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV293_Extract_out0));
        OutputerType1_SV293_Extract * outputer_SV293_Extract_out0 = outputer_SV293_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV293_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_585::Schema row;
            outputer_SV293_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV293_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV293_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV293_Extract
#pragma region SV294_Extract
#if defined(COMPILE_SV294_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_587>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV294_Extract_GetSStream_586;
    SStreamV3ExtractorType_SV294_Extract_GetSStream_586 * CreateExtractor_SV294_Extract_GetSStream_586(unique_ptr<SStreamV3ExtractorType_SV294_Extract_GetSStream_586> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV294_Extract_GetSStream_586(586, "", true/*100*/, UID_GetSStream_586));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV294_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV294_Extract_GetSStream_586> extractor_0_ptr;
        SStreamV3ExtractorType_SV294_Extract_GetSStream_586 * extractor_0 = CreateExtractor_SV294_Extract_GetSStream_586(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_587;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_587> sorter_Process_587_ptr (new SorterType_Process_587(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_587));
        SorterType_Process_587 * sorter_Process_587 = sorter_Process_587_ptr.get();
        ULONG sorter_Process_587_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_587, BinaryOutputPolicy<typename SorterType_Process_587::Schema>, BinaryOutputStream, false> OutputerType1_SV294_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV294_Extract> outputer_SV294_Extract_out0_ptr(new OutputerType1_SV294_Extract(sorter_Process_587, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV294_Extract_out0));
        OutputerType1_SV294_Extract * outputer_SV294_Extract_out0 = outputer_SV294_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV294_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_587::Schema row;
            outputer_SV294_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV294_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV294_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV294_Extract
#pragma region SV295_Extract
#if defined(COMPILE_SV295_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_589>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV295_Extract_GetSStream_588;
    SStreamV3ExtractorType_SV295_Extract_GetSStream_588 * CreateExtractor_SV295_Extract_GetSStream_588(unique_ptr<SStreamV3ExtractorType_SV295_Extract_GetSStream_588> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV295_Extract_GetSStream_588(588, "", true/*100*/, UID_GetSStream_588));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV295_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV295_Extract_GetSStream_588> extractor_0_ptr;
        SStreamV3ExtractorType_SV295_Extract_GetSStream_588 * extractor_0 = CreateExtractor_SV295_Extract_GetSStream_588(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_589;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_589> sorter_Process_589_ptr (new SorterType_Process_589(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_589));
        SorterType_Process_589 * sorter_Process_589 = sorter_Process_589_ptr.get();
        ULONG sorter_Process_589_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_589, BinaryOutputPolicy<typename SorterType_Process_589::Schema>, BinaryOutputStream, false> OutputerType1_SV295_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV295_Extract> outputer_SV295_Extract_out0_ptr(new OutputerType1_SV295_Extract(sorter_Process_589, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV295_Extract_out0));
        OutputerType1_SV295_Extract * outputer_SV295_Extract_out0 = outputer_SV295_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV295_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_589::Schema row;
            outputer_SV295_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV295_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV295_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV295_Extract
#pragma region SV296_Extract
#if defined(COMPILE_SV296_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_591>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV296_Extract_GetSStream_590;
    SStreamV3ExtractorType_SV296_Extract_GetSStream_590 * CreateExtractor_SV296_Extract_GetSStream_590(unique_ptr<SStreamV3ExtractorType_SV296_Extract_GetSStream_590> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV296_Extract_GetSStream_590(590, "", true/*100*/, UID_GetSStream_590));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV296_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV296_Extract_GetSStream_590> extractor_0_ptr;
        SStreamV3ExtractorType_SV296_Extract_GetSStream_590 * extractor_0 = CreateExtractor_SV296_Extract_GetSStream_590(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_591;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_591> sorter_Process_591_ptr (new SorterType_Process_591(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_591));
        SorterType_Process_591 * sorter_Process_591 = sorter_Process_591_ptr.get();
        ULONG sorter_Process_591_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_591, BinaryOutputPolicy<typename SorterType_Process_591::Schema>, BinaryOutputStream, false> OutputerType1_SV296_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV296_Extract> outputer_SV296_Extract_out0_ptr(new OutputerType1_SV296_Extract(sorter_Process_591, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV296_Extract_out0));
        OutputerType1_SV296_Extract * outputer_SV296_Extract_out0 = outputer_SV296_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV296_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_591::Schema row;
            outputer_SV296_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV296_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV296_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV296_Extract
#pragma region SV297_Extract
#if defined(COMPILE_SV297_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_593>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV297_Extract_GetSStream_592;
    SStreamV3ExtractorType_SV297_Extract_GetSStream_592 * CreateExtractor_SV297_Extract_GetSStream_592(unique_ptr<SStreamV3ExtractorType_SV297_Extract_GetSStream_592> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV297_Extract_GetSStream_592(592, "", true/*100*/, UID_GetSStream_592));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV297_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV297_Extract_GetSStream_592> extractor_0_ptr;
        SStreamV3ExtractorType_SV297_Extract_GetSStream_592 * extractor_0 = CreateExtractor_SV297_Extract_GetSStream_592(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_593;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_593> sorter_Process_593_ptr (new SorterType_Process_593(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_593));
        SorterType_Process_593 * sorter_Process_593 = sorter_Process_593_ptr.get();
        ULONG sorter_Process_593_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_593, BinaryOutputPolicy<typename SorterType_Process_593::Schema>, BinaryOutputStream, false> OutputerType1_SV297_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV297_Extract> outputer_SV297_Extract_out0_ptr(new OutputerType1_SV297_Extract(sorter_Process_593, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV297_Extract_out0));
        OutputerType1_SV297_Extract * outputer_SV297_Extract_out0 = outputer_SV297_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV297_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_593::Schema row;
            outputer_SV297_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV297_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV297_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV297_Extract
#pragma region SV298_Extract
#if defined(COMPILE_SV298_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_595>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV298_Extract_GetSStream_594;
    SStreamV3ExtractorType_SV298_Extract_GetSStream_594 * CreateExtractor_SV298_Extract_GetSStream_594(unique_ptr<SStreamV3ExtractorType_SV298_Extract_GetSStream_594> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV298_Extract_GetSStream_594(594, "", true/*100*/, UID_GetSStream_594));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV298_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV298_Extract_GetSStream_594> extractor_0_ptr;
        SStreamV3ExtractorType_SV298_Extract_GetSStream_594 * extractor_0 = CreateExtractor_SV298_Extract_GetSStream_594(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_595;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_595> sorter_Process_595_ptr (new SorterType_Process_595(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_595));
        SorterType_Process_595 * sorter_Process_595 = sorter_Process_595_ptr.get();
        ULONG sorter_Process_595_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_595, BinaryOutputPolicy<typename SorterType_Process_595::Schema>, BinaryOutputStream, false> OutputerType1_SV298_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV298_Extract> outputer_SV298_Extract_out0_ptr(new OutputerType1_SV298_Extract(sorter_Process_595, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV298_Extract_out0));
        OutputerType1_SV298_Extract * outputer_SV298_Extract_out0 = outputer_SV298_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV298_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_595::Schema row;
            outputer_SV298_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV298_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV298_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV298_Extract
#pragma region SV299_Extract
#if defined(COMPILE_SV299_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_597>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV299_Extract_GetSStream_596;
    SStreamV3ExtractorType_SV299_Extract_GetSStream_596 * CreateExtractor_SV299_Extract_GetSStream_596(unique_ptr<SStreamV3ExtractorType_SV299_Extract_GetSStream_596> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV299_Extract_GetSStream_596(596, "", true/*100*/, UID_GetSStream_596));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV299_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV299_Extract_GetSStream_596> extractor_0_ptr;
        SStreamV3ExtractorType_SV299_Extract_GetSStream_596 * extractor_0 = CreateExtractor_SV299_Extract_GetSStream_596(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_597;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_597> sorter_Process_597_ptr (new SorterType_Process_597(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_597));
        SorterType_Process_597 * sorter_Process_597 = sorter_Process_597_ptr.get();
        ULONG sorter_Process_597_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_597, BinaryOutputPolicy<typename SorterType_Process_597::Schema>, BinaryOutputStream, false> OutputerType1_SV299_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV299_Extract> outputer_SV299_Extract_out0_ptr(new OutputerType1_SV299_Extract(sorter_Process_597, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV299_Extract_out0));
        OutputerType1_SV299_Extract * outputer_SV299_Extract_out0 = outputer_SV299_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV299_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_597::Schema row;
            outputer_SV299_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV299_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV299_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV299_Extract
#pragma region SV300_Extract
#if defined(COMPILE_SV300_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_599>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV300_Extract_GetSStream_598;
    SStreamV3ExtractorType_SV300_Extract_GetSStream_598 * CreateExtractor_SV300_Extract_GetSStream_598(unique_ptr<SStreamV3ExtractorType_SV300_Extract_GetSStream_598> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV300_Extract_GetSStream_598(598, "", true/*100*/, UID_GetSStream_598));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV300_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV300_Extract_GetSStream_598> extractor_0_ptr;
        SStreamV3ExtractorType_SV300_Extract_GetSStream_598 * extractor_0 = CreateExtractor_SV300_Extract_GetSStream_598(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_599;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_599> sorter_Process_599_ptr (new SorterType_Process_599(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_599));
        SorterType_Process_599 * sorter_Process_599 = sorter_Process_599_ptr.get();
        ULONG sorter_Process_599_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_599, BinaryOutputPolicy<typename SorterType_Process_599::Schema>, BinaryOutputStream, false> OutputerType1_SV300_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV300_Extract> outputer_SV300_Extract_out0_ptr(new OutputerType1_SV300_Extract(sorter_Process_599, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV300_Extract_out0));
        OutputerType1_SV300_Extract * outputer_SV300_Extract_out0 = outputer_SV300_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV300_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_599::Schema row;
            outputer_SV300_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV300_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV300_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV300_Extract
#pragma region SV301_Extract
#if defined(COMPILE_SV301_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_601>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV301_Extract_GetSStream_600;
    SStreamV3ExtractorType_SV301_Extract_GetSStream_600 * CreateExtractor_SV301_Extract_GetSStream_600(unique_ptr<SStreamV3ExtractorType_SV301_Extract_GetSStream_600> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV301_Extract_GetSStream_600(600, "", true/*100*/, UID_GetSStream_600));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV301_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV301_Extract_GetSStream_600> extractor_0_ptr;
        SStreamV3ExtractorType_SV301_Extract_GetSStream_600 * extractor_0 = CreateExtractor_SV301_Extract_GetSStream_600(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_601;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_601> sorter_Process_601_ptr (new SorterType_Process_601(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_601));
        SorterType_Process_601 * sorter_Process_601 = sorter_Process_601_ptr.get();
        ULONG sorter_Process_601_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_601, BinaryOutputPolicy<typename SorterType_Process_601::Schema>, BinaryOutputStream, false> OutputerType1_SV301_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV301_Extract> outputer_SV301_Extract_out0_ptr(new OutputerType1_SV301_Extract(sorter_Process_601, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV301_Extract_out0));
        OutputerType1_SV301_Extract * outputer_SV301_Extract_out0 = outputer_SV301_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV301_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_601::Schema row;
            outputer_SV301_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV301_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV301_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV301_Extract
#pragma region SV302_Extract
#if defined(COMPILE_SV302_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_603>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV302_Extract_GetSStream_602;
    SStreamV3ExtractorType_SV302_Extract_GetSStream_602 * CreateExtractor_SV302_Extract_GetSStream_602(unique_ptr<SStreamV3ExtractorType_SV302_Extract_GetSStream_602> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV302_Extract_GetSStream_602(602, "", true/*100*/, UID_GetSStream_602));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV302_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV302_Extract_GetSStream_602> extractor_0_ptr;
        SStreamV3ExtractorType_SV302_Extract_GetSStream_602 * extractor_0 = CreateExtractor_SV302_Extract_GetSStream_602(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_603;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_603> sorter_Process_603_ptr (new SorterType_Process_603(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_603));
        SorterType_Process_603 * sorter_Process_603 = sorter_Process_603_ptr.get();
        ULONG sorter_Process_603_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_603, BinaryOutputPolicy<typename SorterType_Process_603::Schema>, BinaryOutputStream, false> OutputerType1_SV302_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV302_Extract> outputer_SV302_Extract_out0_ptr(new OutputerType1_SV302_Extract(sorter_Process_603, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV302_Extract_out0));
        OutputerType1_SV302_Extract * outputer_SV302_Extract_out0 = outputer_SV302_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV302_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_603::Schema row;
            outputer_SV302_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV302_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV302_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV302_Extract
#pragma region SV303_Extract
#if defined(COMPILE_SV303_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_605>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV303_Extract_GetSStream_604;
    SStreamV3ExtractorType_SV303_Extract_GetSStream_604 * CreateExtractor_SV303_Extract_GetSStream_604(unique_ptr<SStreamV3ExtractorType_SV303_Extract_GetSStream_604> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV303_Extract_GetSStream_604(604, "", true/*100*/, UID_GetSStream_604));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV303_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV303_Extract_GetSStream_604> extractor_0_ptr;
        SStreamV3ExtractorType_SV303_Extract_GetSStream_604 * extractor_0 = CreateExtractor_SV303_Extract_GetSStream_604(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_605;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_605> sorter_Process_605_ptr (new SorterType_Process_605(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_605));
        SorterType_Process_605 * sorter_Process_605 = sorter_Process_605_ptr.get();
        ULONG sorter_Process_605_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_605, BinaryOutputPolicy<typename SorterType_Process_605::Schema>, BinaryOutputStream, false> OutputerType1_SV303_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV303_Extract> outputer_SV303_Extract_out0_ptr(new OutputerType1_SV303_Extract(sorter_Process_605, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV303_Extract_out0));
        OutputerType1_SV303_Extract * outputer_SV303_Extract_out0 = outputer_SV303_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV303_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_605::Schema row;
            outputer_SV303_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV303_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV303_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV303_Extract
#pragma region SV304_Extract
#if defined(COMPILE_SV304_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_607>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV304_Extract_GetSStream_606;
    SStreamV3ExtractorType_SV304_Extract_GetSStream_606 * CreateExtractor_SV304_Extract_GetSStream_606(unique_ptr<SStreamV3ExtractorType_SV304_Extract_GetSStream_606> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV304_Extract_GetSStream_606(606, "", true/*100*/, UID_GetSStream_606));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV304_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV304_Extract_GetSStream_606> extractor_0_ptr;
        SStreamV3ExtractorType_SV304_Extract_GetSStream_606 * extractor_0 = CreateExtractor_SV304_Extract_GetSStream_606(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_607;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_607> sorter_Process_607_ptr (new SorterType_Process_607(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_607));
        SorterType_Process_607 * sorter_Process_607 = sorter_Process_607_ptr.get();
        ULONG sorter_Process_607_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_607, BinaryOutputPolicy<typename SorterType_Process_607::Schema>, BinaryOutputStream, false> OutputerType1_SV304_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV304_Extract> outputer_SV304_Extract_out0_ptr(new OutputerType1_SV304_Extract(sorter_Process_607, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV304_Extract_out0));
        OutputerType1_SV304_Extract * outputer_SV304_Extract_out0 = outputer_SV304_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV304_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_607::Schema row;
            outputer_SV304_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV304_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV304_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV304_Extract
#pragma region SV305_Extract
#if defined(COMPILE_SV305_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_609>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV305_Extract_GetSStream_608;
    SStreamV3ExtractorType_SV305_Extract_GetSStream_608 * CreateExtractor_SV305_Extract_GetSStream_608(unique_ptr<SStreamV3ExtractorType_SV305_Extract_GetSStream_608> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV305_Extract_GetSStream_608(608, "", true/*100*/, UID_GetSStream_608));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV305_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV305_Extract_GetSStream_608> extractor_0_ptr;
        SStreamV3ExtractorType_SV305_Extract_GetSStream_608 * extractor_0 = CreateExtractor_SV305_Extract_GetSStream_608(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_609;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_609> sorter_Process_609_ptr (new SorterType_Process_609(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_609));
        SorterType_Process_609 * sorter_Process_609 = sorter_Process_609_ptr.get();
        ULONG sorter_Process_609_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_609, BinaryOutputPolicy<typename SorterType_Process_609::Schema>, BinaryOutputStream, false> OutputerType1_SV305_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV305_Extract> outputer_SV305_Extract_out0_ptr(new OutputerType1_SV305_Extract(sorter_Process_609, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV305_Extract_out0));
        OutputerType1_SV305_Extract * outputer_SV305_Extract_out0 = outputer_SV305_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV305_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_609::Schema row;
            outputer_SV305_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV305_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV305_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV305_Extract
#pragma region SV306_Extract
#if defined(COMPILE_SV306_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_611>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV306_Extract_GetSStream_610;
    SStreamV3ExtractorType_SV306_Extract_GetSStream_610 * CreateExtractor_SV306_Extract_GetSStream_610(unique_ptr<SStreamV3ExtractorType_SV306_Extract_GetSStream_610> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV306_Extract_GetSStream_610(610, "", true/*100*/, UID_GetSStream_610));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV306_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV306_Extract_GetSStream_610> extractor_0_ptr;
        SStreamV3ExtractorType_SV306_Extract_GetSStream_610 * extractor_0 = CreateExtractor_SV306_Extract_GetSStream_610(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_611;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_611> sorter_Process_611_ptr (new SorterType_Process_611(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_611));
        SorterType_Process_611 * sorter_Process_611 = sorter_Process_611_ptr.get();
        ULONG sorter_Process_611_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_611, BinaryOutputPolicy<typename SorterType_Process_611::Schema>, BinaryOutputStream, false> OutputerType1_SV306_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV306_Extract> outputer_SV306_Extract_out0_ptr(new OutputerType1_SV306_Extract(sorter_Process_611, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV306_Extract_out0));
        OutputerType1_SV306_Extract * outputer_SV306_Extract_out0 = outputer_SV306_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV306_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_611::Schema row;
            outputer_SV306_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV306_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV306_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV306_Extract
#pragma region SV307_Extract
#if defined(COMPILE_SV307_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_613>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV307_Extract_GetSStream_612;
    SStreamV3ExtractorType_SV307_Extract_GetSStream_612 * CreateExtractor_SV307_Extract_GetSStream_612(unique_ptr<SStreamV3ExtractorType_SV307_Extract_GetSStream_612> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV307_Extract_GetSStream_612(612, "", true/*100*/, UID_GetSStream_612));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV307_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV307_Extract_GetSStream_612> extractor_0_ptr;
        SStreamV3ExtractorType_SV307_Extract_GetSStream_612 * extractor_0 = CreateExtractor_SV307_Extract_GetSStream_612(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_613;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_613> sorter_Process_613_ptr (new SorterType_Process_613(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_613));
        SorterType_Process_613 * sorter_Process_613 = sorter_Process_613_ptr.get();
        ULONG sorter_Process_613_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_613, BinaryOutputPolicy<typename SorterType_Process_613::Schema>, BinaryOutputStream, false> OutputerType1_SV307_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV307_Extract> outputer_SV307_Extract_out0_ptr(new OutputerType1_SV307_Extract(sorter_Process_613, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV307_Extract_out0));
        OutputerType1_SV307_Extract * outputer_SV307_Extract_out0 = outputer_SV307_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV307_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_613::Schema row;
            outputer_SV307_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV307_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV307_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV307_Extract
#pragma region SV308_Extract
#if defined(COMPILE_SV308_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_615>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV308_Extract_GetSStream_614;
    SStreamV3ExtractorType_SV308_Extract_GetSStream_614 * CreateExtractor_SV308_Extract_GetSStream_614(unique_ptr<SStreamV3ExtractorType_SV308_Extract_GetSStream_614> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV308_Extract_GetSStream_614(614, "", true/*100*/, UID_GetSStream_614));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV308_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV308_Extract_GetSStream_614> extractor_0_ptr;
        SStreamV3ExtractorType_SV308_Extract_GetSStream_614 * extractor_0 = CreateExtractor_SV308_Extract_GetSStream_614(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_615;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_615> sorter_Process_615_ptr (new SorterType_Process_615(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_615));
        SorterType_Process_615 * sorter_Process_615 = sorter_Process_615_ptr.get();
        ULONG sorter_Process_615_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_615, BinaryOutputPolicy<typename SorterType_Process_615::Schema>, BinaryOutputStream, false> OutputerType1_SV308_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV308_Extract> outputer_SV308_Extract_out0_ptr(new OutputerType1_SV308_Extract(sorter_Process_615, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV308_Extract_out0));
        OutputerType1_SV308_Extract * outputer_SV308_Extract_out0 = outputer_SV308_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV308_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_615::Schema row;
            outputer_SV308_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV308_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV308_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV308_Extract
#pragma region SV309_Extract
#if defined(COMPILE_SV309_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_617>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV309_Extract_GetSStream_616;
    SStreamV3ExtractorType_SV309_Extract_GetSStream_616 * CreateExtractor_SV309_Extract_GetSStream_616(unique_ptr<SStreamV3ExtractorType_SV309_Extract_GetSStream_616> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV309_Extract_GetSStream_616(616, "", true/*100*/, UID_GetSStream_616));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV309_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV309_Extract_GetSStream_616> extractor_0_ptr;
        SStreamV3ExtractorType_SV309_Extract_GetSStream_616 * extractor_0 = CreateExtractor_SV309_Extract_GetSStream_616(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_617;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_617> sorter_Process_617_ptr (new SorterType_Process_617(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_617));
        SorterType_Process_617 * sorter_Process_617 = sorter_Process_617_ptr.get();
        ULONG sorter_Process_617_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_617, BinaryOutputPolicy<typename SorterType_Process_617::Schema>, BinaryOutputStream, false> OutputerType1_SV309_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV309_Extract> outputer_SV309_Extract_out0_ptr(new OutputerType1_SV309_Extract(sorter_Process_617, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV309_Extract_out0));
        OutputerType1_SV309_Extract * outputer_SV309_Extract_out0 = outputer_SV309_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV309_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_617::Schema row;
            outputer_SV309_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV309_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV309_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV309_Extract
#pragma region SV310_Extract
#if defined(COMPILE_SV310_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_619>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV310_Extract_GetSStream_618;
    SStreamV3ExtractorType_SV310_Extract_GetSStream_618 * CreateExtractor_SV310_Extract_GetSStream_618(unique_ptr<SStreamV3ExtractorType_SV310_Extract_GetSStream_618> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV310_Extract_GetSStream_618(618, "", true/*100*/, UID_GetSStream_618));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV310_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV310_Extract_GetSStream_618> extractor_0_ptr;
        SStreamV3ExtractorType_SV310_Extract_GetSStream_618 * extractor_0 = CreateExtractor_SV310_Extract_GetSStream_618(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_619;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_619> sorter_Process_619_ptr (new SorterType_Process_619(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_619));
        SorterType_Process_619 * sorter_Process_619 = sorter_Process_619_ptr.get();
        ULONG sorter_Process_619_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_619, BinaryOutputPolicy<typename SorterType_Process_619::Schema>, BinaryOutputStream, false> OutputerType1_SV310_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV310_Extract> outputer_SV310_Extract_out0_ptr(new OutputerType1_SV310_Extract(sorter_Process_619, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV310_Extract_out0));
        OutputerType1_SV310_Extract * outputer_SV310_Extract_out0 = outputer_SV310_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV310_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_619::Schema row;
            outputer_SV310_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV310_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV310_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV310_Extract
#pragma region SV311_Extract
#if defined(COMPILE_SV311_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_621>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV311_Extract_GetSStream_620;
    SStreamV3ExtractorType_SV311_Extract_GetSStream_620 * CreateExtractor_SV311_Extract_GetSStream_620(unique_ptr<SStreamV3ExtractorType_SV311_Extract_GetSStream_620> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV311_Extract_GetSStream_620(620, "", true/*100*/, UID_GetSStream_620));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV311_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV311_Extract_GetSStream_620> extractor_0_ptr;
        SStreamV3ExtractorType_SV311_Extract_GetSStream_620 * extractor_0 = CreateExtractor_SV311_Extract_GetSStream_620(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_621;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_621> sorter_Process_621_ptr (new SorterType_Process_621(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_621));
        SorterType_Process_621 * sorter_Process_621 = sorter_Process_621_ptr.get();
        ULONG sorter_Process_621_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_621, BinaryOutputPolicy<typename SorterType_Process_621::Schema>, BinaryOutputStream, false> OutputerType1_SV311_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV311_Extract> outputer_SV311_Extract_out0_ptr(new OutputerType1_SV311_Extract(sorter_Process_621, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV311_Extract_out0));
        OutputerType1_SV311_Extract * outputer_SV311_Extract_out0 = outputer_SV311_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV311_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_621::Schema row;
            outputer_SV311_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV311_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV311_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV311_Extract
#pragma region SV312_Extract
#if defined(COMPILE_SV312_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_623>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV312_Extract_GetSStream_622;
    SStreamV3ExtractorType_SV312_Extract_GetSStream_622 * CreateExtractor_SV312_Extract_GetSStream_622(unique_ptr<SStreamV3ExtractorType_SV312_Extract_GetSStream_622> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV312_Extract_GetSStream_622(622, "", true/*100*/, UID_GetSStream_622));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV312_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV312_Extract_GetSStream_622> extractor_0_ptr;
        SStreamV3ExtractorType_SV312_Extract_GetSStream_622 * extractor_0 = CreateExtractor_SV312_Extract_GetSStream_622(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_623;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_623> sorter_Process_623_ptr (new SorterType_Process_623(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_623));
        SorterType_Process_623 * sorter_Process_623 = sorter_Process_623_ptr.get();
        ULONG sorter_Process_623_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_623, BinaryOutputPolicy<typename SorterType_Process_623::Schema>, BinaryOutputStream, false> OutputerType1_SV312_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV312_Extract> outputer_SV312_Extract_out0_ptr(new OutputerType1_SV312_Extract(sorter_Process_623, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV312_Extract_out0));
        OutputerType1_SV312_Extract * outputer_SV312_Extract_out0 = outputer_SV312_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV312_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_623::Schema row;
            outputer_SV312_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV312_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV312_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV312_Extract
#pragma region SV313_Extract
#if defined(COMPILE_SV313_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_625>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV313_Extract_GetSStream_624;
    SStreamV3ExtractorType_SV313_Extract_GetSStream_624 * CreateExtractor_SV313_Extract_GetSStream_624(unique_ptr<SStreamV3ExtractorType_SV313_Extract_GetSStream_624> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV313_Extract_GetSStream_624(624, "", true/*100*/, UID_GetSStream_624));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV313_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV313_Extract_GetSStream_624> extractor_0_ptr;
        SStreamV3ExtractorType_SV313_Extract_GetSStream_624 * extractor_0 = CreateExtractor_SV313_Extract_GetSStream_624(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_625;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_625> sorter_Process_625_ptr (new SorterType_Process_625(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_625));
        SorterType_Process_625 * sorter_Process_625 = sorter_Process_625_ptr.get();
        ULONG sorter_Process_625_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_625, BinaryOutputPolicy<typename SorterType_Process_625::Schema>, BinaryOutputStream, false> OutputerType1_SV313_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV313_Extract> outputer_SV313_Extract_out0_ptr(new OutputerType1_SV313_Extract(sorter_Process_625, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV313_Extract_out0));
        OutputerType1_SV313_Extract * outputer_SV313_Extract_out0 = outputer_SV313_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV313_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_625::Schema row;
            outputer_SV313_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV313_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV313_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV313_Extract
#pragma region SV314_Extract
#if defined(COMPILE_SV314_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_627>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV314_Extract_GetSStream_626;
    SStreamV3ExtractorType_SV314_Extract_GetSStream_626 * CreateExtractor_SV314_Extract_GetSStream_626(unique_ptr<SStreamV3ExtractorType_SV314_Extract_GetSStream_626> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV314_Extract_GetSStream_626(626, "", true/*100*/, UID_GetSStream_626));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV314_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV314_Extract_GetSStream_626> extractor_0_ptr;
        SStreamV3ExtractorType_SV314_Extract_GetSStream_626 * extractor_0 = CreateExtractor_SV314_Extract_GetSStream_626(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_627;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_627> sorter_Process_627_ptr (new SorterType_Process_627(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_627));
        SorterType_Process_627 * sorter_Process_627 = sorter_Process_627_ptr.get();
        ULONG sorter_Process_627_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_627, BinaryOutputPolicy<typename SorterType_Process_627::Schema>, BinaryOutputStream, false> OutputerType1_SV314_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV314_Extract> outputer_SV314_Extract_out0_ptr(new OutputerType1_SV314_Extract(sorter_Process_627, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV314_Extract_out0));
        OutputerType1_SV314_Extract * outputer_SV314_Extract_out0 = outputer_SV314_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV314_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_627::Schema row;
            outputer_SV314_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV314_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV314_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV314_Extract
#pragma region SV315_Extract
#if defined(COMPILE_SV315_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_629>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV315_Extract_GetSStream_628;
    SStreamV3ExtractorType_SV315_Extract_GetSStream_628 * CreateExtractor_SV315_Extract_GetSStream_628(unique_ptr<SStreamV3ExtractorType_SV315_Extract_GetSStream_628> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV315_Extract_GetSStream_628(628, "", true/*100*/, UID_GetSStream_628));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV315_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV315_Extract_GetSStream_628> extractor_0_ptr;
        SStreamV3ExtractorType_SV315_Extract_GetSStream_628 * extractor_0 = CreateExtractor_SV315_Extract_GetSStream_628(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_629;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_629> sorter_Process_629_ptr (new SorterType_Process_629(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_629));
        SorterType_Process_629 * sorter_Process_629 = sorter_Process_629_ptr.get();
        ULONG sorter_Process_629_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_629, BinaryOutputPolicy<typename SorterType_Process_629::Schema>, BinaryOutputStream, false> OutputerType1_SV315_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV315_Extract> outputer_SV315_Extract_out0_ptr(new OutputerType1_SV315_Extract(sorter_Process_629, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV315_Extract_out0));
        OutputerType1_SV315_Extract * outputer_SV315_Extract_out0 = outputer_SV315_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV315_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_629::Schema row;
            outputer_SV315_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV315_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV315_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV315_Extract
#pragma region SV316_Extract
#if defined(COMPILE_SV316_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_631>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV316_Extract_GetSStream_630;
    SStreamV3ExtractorType_SV316_Extract_GetSStream_630 * CreateExtractor_SV316_Extract_GetSStream_630(unique_ptr<SStreamV3ExtractorType_SV316_Extract_GetSStream_630> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV316_Extract_GetSStream_630(630, "", true/*100*/, UID_GetSStream_630));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV316_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV316_Extract_GetSStream_630> extractor_0_ptr;
        SStreamV3ExtractorType_SV316_Extract_GetSStream_630 * extractor_0 = CreateExtractor_SV316_Extract_GetSStream_630(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_631;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_631> sorter_Process_631_ptr (new SorterType_Process_631(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_631));
        SorterType_Process_631 * sorter_Process_631 = sorter_Process_631_ptr.get();
        ULONG sorter_Process_631_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_631, BinaryOutputPolicy<typename SorterType_Process_631::Schema>, BinaryOutputStream, false> OutputerType1_SV316_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV316_Extract> outputer_SV316_Extract_out0_ptr(new OutputerType1_SV316_Extract(sorter_Process_631, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV316_Extract_out0));
        OutputerType1_SV316_Extract * outputer_SV316_Extract_out0 = outputer_SV316_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV316_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_631::Schema row;
            outputer_SV316_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV316_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV316_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV316_Extract
#pragma region SV317_Extract
#if defined(COMPILE_SV317_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_633>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV317_Extract_GetSStream_632;
    SStreamV3ExtractorType_SV317_Extract_GetSStream_632 * CreateExtractor_SV317_Extract_GetSStream_632(unique_ptr<SStreamV3ExtractorType_SV317_Extract_GetSStream_632> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV317_Extract_GetSStream_632(632, "", true/*100*/, UID_GetSStream_632));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV317_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV317_Extract_GetSStream_632> extractor_0_ptr;
        SStreamV3ExtractorType_SV317_Extract_GetSStream_632 * extractor_0 = CreateExtractor_SV317_Extract_GetSStream_632(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_633;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_633> sorter_Process_633_ptr (new SorterType_Process_633(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_633));
        SorterType_Process_633 * sorter_Process_633 = sorter_Process_633_ptr.get();
        ULONG sorter_Process_633_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_633, BinaryOutputPolicy<typename SorterType_Process_633::Schema>, BinaryOutputStream, false> OutputerType1_SV317_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV317_Extract> outputer_SV317_Extract_out0_ptr(new OutputerType1_SV317_Extract(sorter_Process_633, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV317_Extract_out0));
        OutputerType1_SV317_Extract * outputer_SV317_Extract_out0 = outputer_SV317_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV317_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_633::Schema row;
            outputer_SV317_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV317_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV317_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV317_Extract
#pragma region SV318_Extract
#if defined(COMPILE_SV318_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_635>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV318_Extract_GetSStream_634;
    SStreamV3ExtractorType_SV318_Extract_GetSStream_634 * CreateExtractor_SV318_Extract_GetSStream_634(unique_ptr<SStreamV3ExtractorType_SV318_Extract_GetSStream_634> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV318_Extract_GetSStream_634(634, "", true/*100*/, UID_GetSStream_634));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV318_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV318_Extract_GetSStream_634> extractor_0_ptr;
        SStreamV3ExtractorType_SV318_Extract_GetSStream_634 * extractor_0 = CreateExtractor_SV318_Extract_GetSStream_634(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_635;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_635> sorter_Process_635_ptr (new SorterType_Process_635(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_635));
        SorterType_Process_635 * sorter_Process_635 = sorter_Process_635_ptr.get();
        ULONG sorter_Process_635_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_635, BinaryOutputPolicy<typename SorterType_Process_635::Schema>, BinaryOutputStream, false> OutputerType1_SV318_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV318_Extract> outputer_SV318_Extract_out0_ptr(new OutputerType1_SV318_Extract(sorter_Process_635, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV318_Extract_out0));
        OutputerType1_SV318_Extract * outputer_SV318_Extract_out0 = outputer_SV318_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV318_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_635::Schema row;
            outputer_SV318_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV318_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV318_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV318_Extract
#pragma region SV319_Extract
#if defined(COMPILE_SV319_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_637>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV319_Extract_GetSStream_636;
    SStreamV3ExtractorType_SV319_Extract_GetSStream_636 * CreateExtractor_SV319_Extract_GetSStream_636(unique_ptr<SStreamV3ExtractorType_SV319_Extract_GetSStream_636> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV319_Extract_GetSStream_636(636, "", true/*100*/, UID_GetSStream_636));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV319_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV319_Extract_GetSStream_636> extractor_0_ptr;
        SStreamV3ExtractorType_SV319_Extract_GetSStream_636 * extractor_0 = CreateExtractor_SV319_Extract_GetSStream_636(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_637;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_637> sorter_Process_637_ptr (new SorterType_Process_637(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_637));
        SorterType_Process_637 * sorter_Process_637 = sorter_Process_637_ptr.get();
        ULONG sorter_Process_637_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_637, BinaryOutputPolicy<typename SorterType_Process_637::Schema>, BinaryOutputStream, false> OutputerType1_SV319_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV319_Extract> outputer_SV319_Extract_out0_ptr(new OutputerType1_SV319_Extract(sorter_Process_637, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV319_Extract_out0));
        OutputerType1_SV319_Extract * outputer_SV319_Extract_out0 = outputer_SV319_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV319_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_637::Schema row;
            outputer_SV319_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV319_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV319_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV319_Extract
#pragma region SV320_Extract
#if defined(COMPILE_SV320_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_639>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV320_Extract_GetSStream_638;
    SStreamV3ExtractorType_SV320_Extract_GetSStream_638 * CreateExtractor_SV320_Extract_GetSStream_638(unique_ptr<SStreamV3ExtractorType_SV320_Extract_GetSStream_638> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV320_Extract_GetSStream_638(638, "", true/*100*/, UID_GetSStream_638));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV320_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV320_Extract_GetSStream_638> extractor_0_ptr;
        SStreamV3ExtractorType_SV320_Extract_GetSStream_638 * extractor_0 = CreateExtractor_SV320_Extract_GetSStream_638(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_639;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_639> sorter_Process_639_ptr (new SorterType_Process_639(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_639));
        SorterType_Process_639 * sorter_Process_639 = sorter_Process_639_ptr.get();
        ULONG sorter_Process_639_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_639, BinaryOutputPolicy<typename SorterType_Process_639::Schema>, BinaryOutputStream, false> OutputerType1_SV320_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV320_Extract> outputer_SV320_Extract_out0_ptr(new OutputerType1_SV320_Extract(sorter_Process_639, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV320_Extract_out0));
        OutputerType1_SV320_Extract * outputer_SV320_Extract_out0 = outputer_SV320_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV320_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_639::Schema row;
            outputer_SV320_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV320_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV320_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV320_Extract
#pragma region SV321_Extract
#if defined(COMPILE_SV321_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_641>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV321_Extract_GetSStream_640;
    SStreamV3ExtractorType_SV321_Extract_GetSStream_640 * CreateExtractor_SV321_Extract_GetSStream_640(unique_ptr<SStreamV3ExtractorType_SV321_Extract_GetSStream_640> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV321_Extract_GetSStream_640(640, "", true/*100*/, UID_GetSStream_640));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV321_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV321_Extract_GetSStream_640> extractor_0_ptr;
        SStreamV3ExtractorType_SV321_Extract_GetSStream_640 * extractor_0 = CreateExtractor_SV321_Extract_GetSStream_640(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_641;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_641> sorter_Process_641_ptr (new SorterType_Process_641(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_641));
        SorterType_Process_641 * sorter_Process_641 = sorter_Process_641_ptr.get();
        ULONG sorter_Process_641_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_641, BinaryOutputPolicy<typename SorterType_Process_641::Schema>, BinaryOutputStream, false> OutputerType1_SV321_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV321_Extract> outputer_SV321_Extract_out0_ptr(new OutputerType1_SV321_Extract(sorter_Process_641, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV321_Extract_out0));
        OutputerType1_SV321_Extract * outputer_SV321_Extract_out0 = outputer_SV321_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV321_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_641::Schema row;
            outputer_SV321_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV321_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV321_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV321_Extract
#pragma region SV322_Extract
#if defined(COMPILE_SV322_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_643>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV322_Extract_GetSStream_642;
    SStreamV3ExtractorType_SV322_Extract_GetSStream_642 * CreateExtractor_SV322_Extract_GetSStream_642(unique_ptr<SStreamV3ExtractorType_SV322_Extract_GetSStream_642> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV322_Extract_GetSStream_642(642, "", true/*100*/, UID_GetSStream_642));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV322_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV322_Extract_GetSStream_642> extractor_0_ptr;
        SStreamV3ExtractorType_SV322_Extract_GetSStream_642 * extractor_0 = CreateExtractor_SV322_Extract_GetSStream_642(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_643;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_643> sorter_Process_643_ptr (new SorterType_Process_643(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_643));
        SorterType_Process_643 * sorter_Process_643 = sorter_Process_643_ptr.get();
        ULONG sorter_Process_643_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_643, BinaryOutputPolicy<typename SorterType_Process_643::Schema>, BinaryOutputStream, false> OutputerType1_SV322_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV322_Extract> outputer_SV322_Extract_out0_ptr(new OutputerType1_SV322_Extract(sorter_Process_643, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV322_Extract_out0));
        OutputerType1_SV322_Extract * outputer_SV322_Extract_out0 = outputer_SV322_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV322_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_643::Schema row;
            outputer_SV322_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV322_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV322_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV322_Extract
#pragma region SV323_Extract
#if defined(COMPILE_SV323_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_645>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV323_Extract_GetSStream_644;
    SStreamV3ExtractorType_SV323_Extract_GetSStream_644 * CreateExtractor_SV323_Extract_GetSStream_644(unique_ptr<SStreamV3ExtractorType_SV323_Extract_GetSStream_644> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV323_Extract_GetSStream_644(644, "", true/*100*/, UID_GetSStream_644));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV323_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV323_Extract_GetSStream_644> extractor_0_ptr;
        SStreamV3ExtractorType_SV323_Extract_GetSStream_644 * extractor_0 = CreateExtractor_SV323_Extract_GetSStream_644(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_645;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_645> sorter_Process_645_ptr (new SorterType_Process_645(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_645));
        SorterType_Process_645 * sorter_Process_645 = sorter_Process_645_ptr.get();
        ULONG sorter_Process_645_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_645, BinaryOutputPolicy<typename SorterType_Process_645::Schema>, BinaryOutputStream, false> OutputerType1_SV323_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV323_Extract> outputer_SV323_Extract_out0_ptr(new OutputerType1_SV323_Extract(sorter_Process_645, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV323_Extract_out0));
        OutputerType1_SV323_Extract * outputer_SV323_Extract_out0 = outputer_SV323_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV323_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_645::Schema row;
            outputer_SV323_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV323_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV323_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV323_Extract
#pragma region SV324_Extract
#if defined(COMPILE_SV324_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_647>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV324_Extract_GetSStream_646;
    SStreamV3ExtractorType_SV324_Extract_GetSStream_646 * CreateExtractor_SV324_Extract_GetSStream_646(unique_ptr<SStreamV3ExtractorType_SV324_Extract_GetSStream_646> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV324_Extract_GetSStream_646(646, "", true/*100*/, UID_GetSStream_646));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV324_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV324_Extract_GetSStream_646> extractor_0_ptr;
        SStreamV3ExtractorType_SV324_Extract_GetSStream_646 * extractor_0 = CreateExtractor_SV324_Extract_GetSStream_646(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_647;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_647> sorter_Process_647_ptr (new SorterType_Process_647(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_647));
        SorterType_Process_647 * sorter_Process_647 = sorter_Process_647_ptr.get();
        ULONG sorter_Process_647_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_647, BinaryOutputPolicy<typename SorterType_Process_647::Schema>, BinaryOutputStream, false> OutputerType1_SV324_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV324_Extract> outputer_SV324_Extract_out0_ptr(new OutputerType1_SV324_Extract(sorter_Process_647, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV324_Extract_out0));
        OutputerType1_SV324_Extract * outputer_SV324_Extract_out0 = outputer_SV324_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV324_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_647::Schema row;
            outputer_SV324_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV324_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV324_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV324_Extract
#pragma region SV325_Extract
#if defined(COMPILE_SV325_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_649>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV325_Extract_GetSStream_648;
    SStreamV3ExtractorType_SV325_Extract_GetSStream_648 * CreateExtractor_SV325_Extract_GetSStream_648(unique_ptr<SStreamV3ExtractorType_SV325_Extract_GetSStream_648> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV325_Extract_GetSStream_648(648, "", true/*100*/, UID_GetSStream_648));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV325_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV325_Extract_GetSStream_648> extractor_0_ptr;
        SStreamV3ExtractorType_SV325_Extract_GetSStream_648 * extractor_0 = CreateExtractor_SV325_Extract_GetSStream_648(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_649;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_649> sorter_Process_649_ptr (new SorterType_Process_649(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_649));
        SorterType_Process_649 * sorter_Process_649 = sorter_Process_649_ptr.get();
        ULONG sorter_Process_649_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_649, BinaryOutputPolicy<typename SorterType_Process_649::Schema>, BinaryOutputStream, false> OutputerType1_SV325_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV325_Extract> outputer_SV325_Extract_out0_ptr(new OutputerType1_SV325_Extract(sorter_Process_649, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV325_Extract_out0));
        OutputerType1_SV325_Extract * outputer_SV325_Extract_out0 = outputer_SV325_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV325_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_649::Schema row;
            outputer_SV325_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV325_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV325_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV325_Extract
#pragma region SV326_Extract
#if defined(COMPILE_SV326_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_651>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV326_Extract_GetSStream_650;
    SStreamV3ExtractorType_SV326_Extract_GetSStream_650 * CreateExtractor_SV326_Extract_GetSStream_650(unique_ptr<SStreamV3ExtractorType_SV326_Extract_GetSStream_650> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV326_Extract_GetSStream_650(650, "", true/*100*/, UID_GetSStream_650));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV326_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV326_Extract_GetSStream_650> extractor_0_ptr;
        SStreamV3ExtractorType_SV326_Extract_GetSStream_650 * extractor_0 = CreateExtractor_SV326_Extract_GetSStream_650(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_651;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_651> sorter_Process_651_ptr (new SorterType_Process_651(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_651));
        SorterType_Process_651 * sorter_Process_651 = sorter_Process_651_ptr.get();
        ULONG sorter_Process_651_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_651, BinaryOutputPolicy<typename SorterType_Process_651::Schema>, BinaryOutputStream, false> OutputerType1_SV326_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV326_Extract> outputer_SV326_Extract_out0_ptr(new OutputerType1_SV326_Extract(sorter_Process_651, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV326_Extract_out0));
        OutputerType1_SV326_Extract * outputer_SV326_Extract_out0 = outputer_SV326_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV326_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_651::Schema row;
            outputer_SV326_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV326_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV326_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV326_Extract
#pragma region SV327_Extract
#if defined(COMPILE_SV327_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_653>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV327_Extract_GetSStream_652;
    SStreamV3ExtractorType_SV327_Extract_GetSStream_652 * CreateExtractor_SV327_Extract_GetSStream_652(unique_ptr<SStreamV3ExtractorType_SV327_Extract_GetSStream_652> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV327_Extract_GetSStream_652(652, "", true/*100*/, UID_GetSStream_652));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV327_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV327_Extract_GetSStream_652> extractor_0_ptr;
        SStreamV3ExtractorType_SV327_Extract_GetSStream_652 * extractor_0 = CreateExtractor_SV327_Extract_GetSStream_652(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_653;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_653> sorter_Process_653_ptr (new SorterType_Process_653(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_653));
        SorterType_Process_653 * sorter_Process_653 = sorter_Process_653_ptr.get();
        ULONG sorter_Process_653_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_653, BinaryOutputPolicy<typename SorterType_Process_653::Schema>, BinaryOutputStream, false> OutputerType1_SV327_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV327_Extract> outputer_SV327_Extract_out0_ptr(new OutputerType1_SV327_Extract(sorter_Process_653, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV327_Extract_out0));
        OutputerType1_SV327_Extract * outputer_SV327_Extract_out0 = outputer_SV327_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV327_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_653::Schema row;
            outputer_SV327_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV327_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV327_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV327_Extract
#pragma region SV328_Extract
#if defined(COMPILE_SV328_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_655>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV328_Extract_GetSStream_654;
    SStreamV3ExtractorType_SV328_Extract_GetSStream_654 * CreateExtractor_SV328_Extract_GetSStream_654(unique_ptr<SStreamV3ExtractorType_SV328_Extract_GetSStream_654> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV328_Extract_GetSStream_654(654, "", true/*100*/, UID_GetSStream_654));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV328_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV328_Extract_GetSStream_654> extractor_0_ptr;
        SStreamV3ExtractorType_SV328_Extract_GetSStream_654 * extractor_0 = CreateExtractor_SV328_Extract_GetSStream_654(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_655;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_655> sorter_Process_655_ptr (new SorterType_Process_655(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_655));
        SorterType_Process_655 * sorter_Process_655 = sorter_Process_655_ptr.get();
        ULONG sorter_Process_655_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_655, BinaryOutputPolicy<typename SorterType_Process_655::Schema>, BinaryOutputStream, false> OutputerType1_SV328_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV328_Extract> outputer_SV328_Extract_out0_ptr(new OutputerType1_SV328_Extract(sorter_Process_655, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV328_Extract_out0));
        OutputerType1_SV328_Extract * outputer_SV328_Extract_out0 = outputer_SV328_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV328_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_655::Schema row;
            outputer_SV328_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV328_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV328_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV328_Extract
#pragma region SV329_Extract
#if defined(COMPILE_SV329_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_657>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV329_Extract_GetSStream_656;
    SStreamV3ExtractorType_SV329_Extract_GetSStream_656 * CreateExtractor_SV329_Extract_GetSStream_656(unique_ptr<SStreamV3ExtractorType_SV329_Extract_GetSStream_656> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV329_Extract_GetSStream_656(656, "", true/*100*/, UID_GetSStream_656));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV329_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV329_Extract_GetSStream_656> extractor_0_ptr;
        SStreamV3ExtractorType_SV329_Extract_GetSStream_656 * extractor_0 = CreateExtractor_SV329_Extract_GetSStream_656(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_657;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_657> sorter_Process_657_ptr (new SorterType_Process_657(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_657));
        SorterType_Process_657 * sorter_Process_657 = sorter_Process_657_ptr.get();
        ULONG sorter_Process_657_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_657, BinaryOutputPolicy<typename SorterType_Process_657::Schema>, BinaryOutputStream, false> OutputerType1_SV329_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV329_Extract> outputer_SV329_Extract_out0_ptr(new OutputerType1_SV329_Extract(sorter_Process_657, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV329_Extract_out0));
        OutputerType1_SV329_Extract * outputer_SV329_Extract_out0 = outputer_SV329_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV329_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_657::Schema row;
            outputer_SV329_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV329_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV329_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV329_Extract
#pragma region SV330_Extract
#if defined(COMPILE_SV330_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_659>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV330_Extract_GetSStream_658;
    SStreamV3ExtractorType_SV330_Extract_GetSStream_658 * CreateExtractor_SV330_Extract_GetSStream_658(unique_ptr<SStreamV3ExtractorType_SV330_Extract_GetSStream_658> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV330_Extract_GetSStream_658(658, "", true/*100*/, UID_GetSStream_658));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV330_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV330_Extract_GetSStream_658> extractor_0_ptr;
        SStreamV3ExtractorType_SV330_Extract_GetSStream_658 * extractor_0 = CreateExtractor_SV330_Extract_GetSStream_658(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_659;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_659> sorter_Process_659_ptr (new SorterType_Process_659(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_659));
        SorterType_Process_659 * sorter_Process_659 = sorter_Process_659_ptr.get();
        ULONG sorter_Process_659_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_659, BinaryOutputPolicy<typename SorterType_Process_659::Schema>, BinaryOutputStream, false> OutputerType1_SV330_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV330_Extract> outputer_SV330_Extract_out0_ptr(new OutputerType1_SV330_Extract(sorter_Process_659, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV330_Extract_out0));
        OutputerType1_SV330_Extract * outputer_SV330_Extract_out0 = outputer_SV330_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV330_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_659::Schema row;
            outputer_SV330_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV330_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV330_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV330_Extract
#pragma region SV331_Extract
#if defined(COMPILE_SV331_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_661>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV331_Extract_GetSStream_660;
    SStreamV3ExtractorType_SV331_Extract_GetSStream_660 * CreateExtractor_SV331_Extract_GetSStream_660(unique_ptr<SStreamV3ExtractorType_SV331_Extract_GetSStream_660> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV331_Extract_GetSStream_660(660, "", true/*100*/, UID_GetSStream_660));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV331_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV331_Extract_GetSStream_660> extractor_0_ptr;
        SStreamV3ExtractorType_SV331_Extract_GetSStream_660 * extractor_0 = CreateExtractor_SV331_Extract_GetSStream_660(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_661;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_661> sorter_Process_661_ptr (new SorterType_Process_661(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_661));
        SorterType_Process_661 * sorter_Process_661 = sorter_Process_661_ptr.get();
        ULONG sorter_Process_661_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_661, BinaryOutputPolicy<typename SorterType_Process_661::Schema>, BinaryOutputStream, false> OutputerType1_SV331_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV331_Extract> outputer_SV331_Extract_out0_ptr(new OutputerType1_SV331_Extract(sorter_Process_661, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV331_Extract_out0));
        OutputerType1_SV331_Extract * outputer_SV331_Extract_out0 = outputer_SV331_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV331_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_661::Schema row;
            outputer_SV331_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV331_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV331_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV331_Extract
#pragma region SV332_Extract
#if defined(COMPILE_SV332_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_663>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV332_Extract_GetSStream_662;
    SStreamV3ExtractorType_SV332_Extract_GetSStream_662 * CreateExtractor_SV332_Extract_GetSStream_662(unique_ptr<SStreamV3ExtractorType_SV332_Extract_GetSStream_662> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV332_Extract_GetSStream_662(662, "", true/*100*/, UID_GetSStream_662));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV332_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV332_Extract_GetSStream_662> extractor_0_ptr;
        SStreamV3ExtractorType_SV332_Extract_GetSStream_662 * extractor_0 = CreateExtractor_SV332_Extract_GetSStream_662(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_663;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_663> sorter_Process_663_ptr (new SorterType_Process_663(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_663));
        SorterType_Process_663 * sorter_Process_663 = sorter_Process_663_ptr.get();
        ULONG sorter_Process_663_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_663, BinaryOutputPolicy<typename SorterType_Process_663::Schema>, BinaryOutputStream, false> OutputerType1_SV332_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV332_Extract> outputer_SV332_Extract_out0_ptr(new OutputerType1_SV332_Extract(sorter_Process_663, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV332_Extract_out0));
        OutputerType1_SV332_Extract * outputer_SV332_Extract_out0 = outputer_SV332_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV332_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_663::Schema row;
            outputer_SV332_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV332_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV332_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV332_Extract
#pragma region SV333_Extract
#if defined(COMPILE_SV333_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_665>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV333_Extract_GetSStream_664;
    SStreamV3ExtractorType_SV333_Extract_GetSStream_664 * CreateExtractor_SV333_Extract_GetSStream_664(unique_ptr<SStreamV3ExtractorType_SV333_Extract_GetSStream_664> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV333_Extract_GetSStream_664(664, "", true/*100*/, UID_GetSStream_664));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV333_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV333_Extract_GetSStream_664> extractor_0_ptr;
        SStreamV3ExtractorType_SV333_Extract_GetSStream_664 * extractor_0 = CreateExtractor_SV333_Extract_GetSStream_664(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_665;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_665> sorter_Process_665_ptr (new SorterType_Process_665(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_665));
        SorterType_Process_665 * sorter_Process_665 = sorter_Process_665_ptr.get();
        ULONG sorter_Process_665_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_665, BinaryOutputPolicy<typename SorterType_Process_665::Schema>, BinaryOutputStream, false> OutputerType1_SV333_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV333_Extract> outputer_SV333_Extract_out0_ptr(new OutputerType1_SV333_Extract(sorter_Process_665, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV333_Extract_out0));
        OutputerType1_SV333_Extract * outputer_SV333_Extract_out0 = outputer_SV333_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV333_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_665::Schema row;
            outputer_SV333_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV333_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV333_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV333_Extract
#pragma region SV334_Extract
#if defined(COMPILE_SV334_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_667>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV334_Extract_GetSStream_666;
    SStreamV3ExtractorType_SV334_Extract_GetSStream_666 * CreateExtractor_SV334_Extract_GetSStream_666(unique_ptr<SStreamV3ExtractorType_SV334_Extract_GetSStream_666> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV334_Extract_GetSStream_666(666, "", true/*100*/, UID_GetSStream_666));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV334_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV334_Extract_GetSStream_666> extractor_0_ptr;
        SStreamV3ExtractorType_SV334_Extract_GetSStream_666 * extractor_0 = CreateExtractor_SV334_Extract_GetSStream_666(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_667;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_667> sorter_Process_667_ptr (new SorterType_Process_667(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_667));
        SorterType_Process_667 * sorter_Process_667 = sorter_Process_667_ptr.get();
        ULONG sorter_Process_667_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_667, BinaryOutputPolicy<typename SorterType_Process_667::Schema>, BinaryOutputStream, false> OutputerType1_SV334_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV334_Extract> outputer_SV334_Extract_out0_ptr(new OutputerType1_SV334_Extract(sorter_Process_667, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV334_Extract_out0));
        OutputerType1_SV334_Extract * outputer_SV334_Extract_out0 = outputer_SV334_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV334_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_667::Schema row;
            outputer_SV334_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV334_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV334_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV334_Extract
#pragma region SV335_Extract
#if defined(COMPILE_SV335_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_669>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV335_Extract_GetSStream_668;
    SStreamV3ExtractorType_SV335_Extract_GetSStream_668 * CreateExtractor_SV335_Extract_GetSStream_668(unique_ptr<SStreamV3ExtractorType_SV335_Extract_GetSStream_668> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV335_Extract_GetSStream_668(668, "", true/*100*/, UID_GetSStream_668));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV335_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV335_Extract_GetSStream_668> extractor_0_ptr;
        SStreamV3ExtractorType_SV335_Extract_GetSStream_668 * extractor_0 = CreateExtractor_SV335_Extract_GetSStream_668(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_669;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_669> sorter_Process_669_ptr (new SorterType_Process_669(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_669));
        SorterType_Process_669 * sorter_Process_669 = sorter_Process_669_ptr.get();
        ULONG sorter_Process_669_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_669, BinaryOutputPolicy<typename SorterType_Process_669::Schema>, BinaryOutputStream, false> OutputerType1_SV335_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV335_Extract> outputer_SV335_Extract_out0_ptr(new OutputerType1_SV335_Extract(sorter_Process_669, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV335_Extract_out0));
        OutputerType1_SV335_Extract * outputer_SV335_Extract_out0 = outputer_SV335_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV335_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_669::Schema row;
            outputer_SV335_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV335_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV335_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV335_Extract
#pragma region SV336_Extract
#if defined(COMPILE_SV336_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_671>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV336_Extract_GetSStream_670;
    SStreamV3ExtractorType_SV336_Extract_GetSStream_670 * CreateExtractor_SV336_Extract_GetSStream_670(unique_ptr<SStreamV3ExtractorType_SV336_Extract_GetSStream_670> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV336_Extract_GetSStream_670(670, "", true/*100*/, UID_GetSStream_670));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV336_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV336_Extract_GetSStream_670> extractor_0_ptr;
        SStreamV3ExtractorType_SV336_Extract_GetSStream_670 * extractor_0 = CreateExtractor_SV336_Extract_GetSStream_670(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_671;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_671> sorter_Process_671_ptr (new SorterType_Process_671(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_671));
        SorterType_Process_671 * sorter_Process_671 = sorter_Process_671_ptr.get();
        ULONG sorter_Process_671_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_671, BinaryOutputPolicy<typename SorterType_Process_671::Schema>, BinaryOutputStream, false> OutputerType1_SV336_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV336_Extract> outputer_SV336_Extract_out0_ptr(new OutputerType1_SV336_Extract(sorter_Process_671, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV336_Extract_out0));
        OutputerType1_SV336_Extract * outputer_SV336_Extract_out0 = outputer_SV336_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV336_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_671::Schema row;
            outputer_SV336_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV336_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV336_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV336_Extract
#pragma region SV337_Extract
#if defined(COMPILE_SV337_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_673>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV337_Extract_GetSStream_672;
    SStreamV3ExtractorType_SV337_Extract_GetSStream_672 * CreateExtractor_SV337_Extract_GetSStream_672(unique_ptr<SStreamV3ExtractorType_SV337_Extract_GetSStream_672> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV337_Extract_GetSStream_672(672, "", true/*100*/, UID_GetSStream_672));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV337_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV337_Extract_GetSStream_672> extractor_0_ptr;
        SStreamV3ExtractorType_SV337_Extract_GetSStream_672 * extractor_0 = CreateExtractor_SV337_Extract_GetSStream_672(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_673;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_673> sorter_Process_673_ptr (new SorterType_Process_673(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_673));
        SorterType_Process_673 * sorter_Process_673 = sorter_Process_673_ptr.get();
        ULONG sorter_Process_673_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_673, BinaryOutputPolicy<typename SorterType_Process_673::Schema>, BinaryOutputStream, false> OutputerType1_SV337_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV337_Extract> outputer_SV337_Extract_out0_ptr(new OutputerType1_SV337_Extract(sorter_Process_673, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV337_Extract_out0));
        OutputerType1_SV337_Extract * outputer_SV337_Extract_out0 = outputer_SV337_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV337_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_673::Schema row;
            outputer_SV337_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV337_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV337_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV337_Extract
#pragma region SV338_Extract
#if defined(COMPILE_SV338_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_675>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV338_Extract_GetSStream_674;
    SStreamV3ExtractorType_SV338_Extract_GetSStream_674 * CreateExtractor_SV338_Extract_GetSStream_674(unique_ptr<SStreamV3ExtractorType_SV338_Extract_GetSStream_674> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV338_Extract_GetSStream_674(674, "", true/*100*/, UID_GetSStream_674));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV338_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV338_Extract_GetSStream_674> extractor_0_ptr;
        SStreamV3ExtractorType_SV338_Extract_GetSStream_674 * extractor_0 = CreateExtractor_SV338_Extract_GetSStream_674(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_675;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_675> sorter_Process_675_ptr (new SorterType_Process_675(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_675));
        SorterType_Process_675 * sorter_Process_675 = sorter_Process_675_ptr.get();
        ULONG sorter_Process_675_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_675, BinaryOutputPolicy<typename SorterType_Process_675::Schema>, BinaryOutputStream, false> OutputerType1_SV338_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV338_Extract> outputer_SV338_Extract_out0_ptr(new OutputerType1_SV338_Extract(sorter_Process_675, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV338_Extract_out0));
        OutputerType1_SV338_Extract * outputer_SV338_Extract_out0 = outputer_SV338_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV338_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_675::Schema row;
            outputer_SV338_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV338_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV338_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV338_Extract
#pragma region SV339_Extract
#if defined(COMPILE_SV339_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_677>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV339_Extract_GetSStream_676;
    SStreamV3ExtractorType_SV339_Extract_GetSStream_676 * CreateExtractor_SV339_Extract_GetSStream_676(unique_ptr<SStreamV3ExtractorType_SV339_Extract_GetSStream_676> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV339_Extract_GetSStream_676(676, "", true/*100*/, UID_GetSStream_676));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV339_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV339_Extract_GetSStream_676> extractor_0_ptr;
        SStreamV3ExtractorType_SV339_Extract_GetSStream_676 * extractor_0 = CreateExtractor_SV339_Extract_GetSStream_676(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_677;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_677> sorter_Process_677_ptr (new SorterType_Process_677(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_677));
        SorterType_Process_677 * sorter_Process_677 = sorter_Process_677_ptr.get();
        ULONG sorter_Process_677_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_677, BinaryOutputPolicy<typename SorterType_Process_677::Schema>, BinaryOutputStream, false> OutputerType1_SV339_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV339_Extract> outputer_SV339_Extract_out0_ptr(new OutputerType1_SV339_Extract(sorter_Process_677, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV339_Extract_out0));
        OutputerType1_SV339_Extract * outputer_SV339_Extract_out0 = outputer_SV339_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV339_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_677::Schema row;
            outputer_SV339_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV339_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV339_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV339_Extract
#pragma region SV340_Extract
#if defined(COMPILE_SV340_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_679>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV340_Extract_GetSStream_678;
    SStreamV3ExtractorType_SV340_Extract_GetSStream_678 * CreateExtractor_SV340_Extract_GetSStream_678(unique_ptr<SStreamV3ExtractorType_SV340_Extract_GetSStream_678> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV340_Extract_GetSStream_678(678, "", true/*100*/, UID_GetSStream_678));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV340_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV340_Extract_GetSStream_678> extractor_0_ptr;
        SStreamV3ExtractorType_SV340_Extract_GetSStream_678 * extractor_0 = CreateExtractor_SV340_Extract_GetSStream_678(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_679;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_679> sorter_Process_679_ptr (new SorterType_Process_679(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_679));
        SorterType_Process_679 * sorter_Process_679 = sorter_Process_679_ptr.get();
        ULONG sorter_Process_679_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_679, BinaryOutputPolicy<typename SorterType_Process_679::Schema>, BinaryOutputStream, false> OutputerType1_SV340_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV340_Extract> outputer_SV340_Extract_out0_ptr(new OutputerType1_SV340_Extract(sorter_Process_679, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV340_Extract_out0));
        OutputerType1_SV340_Extract * outputer_SV340_Extract_out0 = outputer_SV340_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV340_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_679::Schema row;
            outputer_SV340_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV340_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV340_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV340_Extract
#pragma region SV341_Extract
#if defined(COMPILE_SV341_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_681>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV341_Extract_GetSStream_680;
    SStreamV3ExtractorType_SV341_Extract_GetSStream_680 * CreateExtractor_SV341_Extract_GetSStream_680(unique_ptr<SStreamV3ExtractorType_SV341_Extract_GetSStream_680> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV341_Extract_GetSStream_680(680, "", true/*100*/, UID_GetSStream_680));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV341_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV341_Extract_GetSStream_680> extractor_0_ptr;
        SStreamV3ExtractorType_SV341_Extract_GetSStream_680 * extractor_0 = CreateExtractor_SV341_Extract_GetSStream_680(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_681;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_681> sorter_Process_681_ptr (new SorterType_Process_681(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_681));
        SorterType_Process_681 * sorter_Process_681 = sorter_Process_681_ptr.get();
        ULONG sorter_Process_681_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_681, BinaryOutputPolicy<typename SorterType_Process_681::Schema>, BinaryOutputStream, false> OutputerType1_SV341_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV341_Extract> outputer_SV341_Extract_out0_ptr(new OutputerType1_SV341_Extract(sorter_Process_681, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV341_Extract_out0));
        OutputerType1_SV341_Extract * outputer_SV341_Extract_out0 = outputer_SV341_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV341_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_681::Schema row;
            outputer_SV341_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV341_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV341_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV341_Extract
#pragma region SV342_Extract
#if defined(COMPILE_SV342_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_683>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV342_Extract_GetSStream_682;
    SStreamV3ExtractorType_SV342_Extract_GetSStream_682 * CreateExtractor_SV342_Extract_GetSStream_682(unique_ptr<SStreamV3ExtractorType_SV342_Extract_GetSStream_682> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV342_Extract_GetSStream_682(682, "", true/*100*/, UID_GetSStream_682));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV342_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV342_Extract_GetSStream_682> extractor_0_ptr;
        SStreamV3ExtractorType_SV342_Extract_GetSStream_682 * extractor_0 = CreateExtractor_SV342_Extract_GetSStream_682(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_683;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_683> sorter_Process_683_ptr (new SorterType_Process_683(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_683));
        SorterType_Process_683 * sorter_Process_683 = sorter_Process_683_ptr.get();
        ULONG sorter_Process_683_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_683, BinaryOutputPolicy<typename SorterType_Process_683::Schema>, BinaryOutputStream, false> OutputerType1_SV342_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV342_Extract> outputer_SV342_Extract_out0_ptr(new OutputerType1_SV342_Extract(sorter_Process_683, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV342_Extract_out0));
        OutputerType1_SV342_Extract * outputer_SV342_Extract_out0 = outputer_SV342_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV342_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_683::Schema row;
            outputer_SV342_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV342_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV342_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV342_Extract
#pragma region SV343_Extract
#if defined(COMPILE_SV343_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_685>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV343_Extract_GetSStream_684;
    SStreamV3ExtractorType_SV343_Extract_GetSStream_684 * CreateExtractor_SV343_Extract_GetSStream_684(unique_ptr<SStreamV3ExtractorType_SV343_Extract_GetSStream_684> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV343_Extract_GetSStream_684(684, "", true/*100*/, UID_GetSStream_684));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV343_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV343_Extract_GetSStream_684> extractor_0_ptr;
        SStreamV3ExtractorType_SV343_Extract_GetSStream_684 * extractor_0 = CreateExtractor_SV343_Extract_GetSStream_684(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_685;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_685> sorter_Process_685_ptr (new SorterType_Process_685(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_685));
        SorterType_Process_685 * sorter_Process_685 = sorter_Process_685_ptr.get();
        ULONG sorter_Process_685_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_685, BinaryOutputPolicy<typename SorterType_Process_685::Schema>, BinaryOutputStream, false> OutputerType1_SV343_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV343_Extract> outputer_SV343_Extract_out0_ptr(new OutputerType1_SV343_Extract(sorter_Process_685, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV343_Extract_out0));
        OutputerType1_SV343_Extract * outputer_SV343_Extract_out0 = outputer_SV343_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV343_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_685::Schema row;
            outputer_SV343_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV343_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV343_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV343_Extract
#pragma region SV344_Extract
#if defined(COMPILE_SV344_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_687>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV344_Extract_GetSStream_686;
    SStreamV3ExtractorType_SV344_Extract_GetSStream_686 * CreateExtractor_SV344_Extract_GetSStream_686(unique_ptr<SStreamV3ExtractorType_SV344_Extract_GetSStream_686> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV344_Extract_GetSStream_686(686, "", true/*100*/, UID_GetSStream_686));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV344_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV344_Extract_GetSStream_686> extractor_0_ptr;
        SStreamV3ExtractorType_SV344_Extract_GetSStream_686 * extractor_0 = CreateExtractor_SV344_Extract_GetSStream_686(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_687;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_687> sorter_Process_687_ptr (new SorterType_Process_687(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_687));
        SorterType_Process_687 * sorter_Process_687 = sorter_Process_687_ptr.get();
        ULONG sorter_Process_687_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_687, BinaryOutputPolicy<typename SorterType_Process_687::Schema>, BinaryOutputStream, false> OutputerType1_SV344_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV344_Extract> outputer_SV344_Extract_out0_ptr(new OutputerType1_SV344_Extract(sorter_Process_687, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV344_Extract_out0));
        OutputerType1_SV344_Extract * outputer_SV344_Extract_out0 = outputer_SV344_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV344_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_687::Schema row;
            outputer_SV344_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV344_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV344_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV344_Extract
#pragma region SV345_Extract
#if defined(COMPILE_SV345_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_689>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV345_Extract_GetSStream_688;
    SStreamV3ExtractorType_SV345_Extract_GetSStream_688 * CreateExtractor_SV345_Extract_GetSStream_688(unique_ptr<SStreamV3ExtractorType_SV345_Extract_GetSStream_688> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV345_Extract_GetSStream_688(688, "", true/*100*/, UID_GetSStream_688));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV345_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV345_Extract_GetSStream_688> extractor_0_ptr;
        SStreamV3ExtractorType_SV345_Extract_GetSStream_688 * extractor_0 = CreateExtractor_SV345_Extract_GetSStream_688(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_689;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_689> sorter_Process_689_ptr (new SorterType_Process_689(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_689));
        SorterType_Process_689 * sorter_Process_689 = sorter_Process_689_ptr.get();
        ULONG sorter_Process_689_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_689, BinaryOutputPolicy<typename SorterType_Process_689::Schema>, BinaryOutputStream, false> OutputerType1_SV345_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV345_Extract> outputer_SV345_Extract_out0_ptr(new OutputerType1_SV345_Extract(sorter_Process_689, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV345_Extract_out0));
        OutputerType1_SV345_Extract * outputer_SV345_Extract_out0 = outputer_SV345_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV345_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_689::Schema row;
            outputer_SV345_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV345_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV345_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV345_Extract
#pragma region SV346_Extract
#if defined(COMPILE_SV346_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_691>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV346_Extract_GetSStream_690;
    SStreamV3ExtractorType_SV346_Extract_GetSStream_690 * CreateExtractor_SV346_Extract_GetSStream_690(unique_ptr<SStreamV3ExtractorType_SV346_Extract_GetSStream_690> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV346_Extract_GetSStream_690(690, "", true/*100*/, UID_GetSStream_690));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV346_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV346_Extract_GetSStream_690> extractor_0_ptr;
        SStreamV3ExtractorType_SV346_Extract_GetSStream_690 * extractor_0 = CreateExtractor_SV346_Extract_GetSStream_690(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_691;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_691> sorter_Process_691_ptr (new SorterType_Process_691(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_691));
        SorterType_Process_691 * sorter_Process_691 = sorter_Process_691_ptr.get();
        ULONG sorter_Process_691_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_691, BinaryOutputPolicy<typename SorterType_Process_691::Schema>, BinaryOutputStream, false> OutputerType1_SV346_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV346_Extract> outputer_SV346_Extract_out0_ptr(new OutputerType1_SV346_Extract(sorter_Process_691, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV346_Extract_out0));
        OutputerType1_SV346_Extract * outputer_SV346_Extract_out0 = outputer_SV346_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV346_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_691::Schema row;
            outputer_SV346_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV346_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV346_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV346_Extract
#pragma region SV347_Extract
#if defined(COMPILE_SV347_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_693>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV347_Extract_GetSStream_692;
    SStreamV3ExtractorType_SV347_Extract_GetSStream_692 * CreateExtractor_SV347_Extract_GetSStream_692(unique_ptr<SStreamV3ExtractorType_SV347_Extract_GetSStream_692> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV347_Extract_GetSStream_692(692, "", true/*100*/, UID_GetSStream_692));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV347_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV347_Extract_GetSStream_692> extractor_0_ptr;
        SStreamV3ExtractorType_SV347_Extract_GetSStream_692 * extractor_0 = CreateExtractor_SV347_Extract_GetSStream_692(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_693;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_693> sorter_Process_693_ptr (new SorterType_Process_693(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_693));
        SorterType_Process_693 * sorter_Process_693 = sorter_Process_693_ptr.get();
        ULONG sorter_Process_693_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_693, BinaryOutputPolicy<typename SorterType_Process_693::Schema>, BinaryOutputStream, false> OutputerType1_SV347_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV347_Extract> outputer_SV347_Extract_out0_ptr(new OutputerType1_SV347_Extract(sorter_Process_693, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV347_Extract_out0));
        OutputerType1_SV347_Extract * outputer_SV347_Extract_out0 = outputer_SV347_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV347_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_693::Schema row;
            outputer_SV347_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV347_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV347_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV347_Extract
#pragma region SV348_Extract
#if defined(COMPILE_SV348_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_695>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV348_Extract_GetSStream_694;
    SStreamV3ExtractorType_SV348_Extract_GetSStream_694 * CreateExtractor_SV348_Extract_GetSStream_694(unique_ptr<SStreamV3ExtractorType_SV348_Extract_GetSStream_694> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV348_Extract_GetSStream_694(694, "", true/*100*/, UID_GetSStream_694));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV348_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV348_Extract_GetSStream_694> extractor_0_ptr;
        SStreamV3ExtractorType_SV348_Extract_GetSStream_694 * extractor_0 = CreateExtractor_SV348_Extract_GetSStream_694(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_695;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_695> sorter_Process_695_ptr (new SorterType_Process_695(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_695));
        SorterType_Process_695 * sorter_Process_695 = sorter_Process_695_ptr.get();
        ULONG sorter_Process_695_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_695, BinaryOutputPolicy<typename SorterType_Process_695::Schema>, BinaryOutputStream, false> OutputerType1_SV348_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV348_Extract> outputer_SV348_Extract_out0_ptr(new OutputerType1_SV348_Extract(sorter_Process_695, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV348_Extract_out0));
        OutputerType1_SV348_Extract * outputer_SV348_Extract_out0 = outputer_SV348_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV348_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_695::Schema row;
            outputer_SV348_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV348_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV348_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV348_Extract
#pragma region SV349_Extract
#if defined(COMPILE_SV349_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_697>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV349_Extract_GetSStream_696;
    SStreamV3ExtractorType_SV349_Extract_GetSStream_696 * CreateExtractor_SV349_Extract_GetSStream_696(unique_ptr<SStreamV3ExtractorType_SV349_Extract_GetSStream_696> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV349_Extract_GetSStream_696(696, "", true/*100*/, UID_GetSStream_696));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV349_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV349_Extract_GetSStream_696> extractor_0_ptr;
        SStreamV3ExtractorType_SV349_Extract_GetSStream_696 * extractor_0 = CreateExtractor_SV349_Extract_GetSStream_696(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_697;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_697> sorter_Process_697_ptr (new SorterType_Process_697(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_697));
        SorterType_Process_697 * sorter_Process_697 = sorter_Process_697_ptr.get();
        ULONG sorter_Process_697_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_697, BinaryOutputPolicy<typename SorterType_Process_697::Schema>, BinaryOutputStream, false> OutputerType1_SV349_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV349_Extract> outputer_SV349_Extract_out0_ptr(new OutputerType1_SV349_Extract(sorter_Process_697, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV349_Extract_out0));
        OutputerType1_SV349_Extract * outputer_SV349_Extract_out0 = outputer_SV349_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV349_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_697::Schema row;
            outputer_SV349_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV349_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV349_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV349_Extract
#pragma region SV350_Extract
#if defined(COMPILE_SV350_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_699>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV350_Extract_GetSStream_698;
    SStreamV3ExtractorType_SV350_Extract_GetSStream_698 * CreateExtractor_SV350_Extract_GetSStream_698(unique_ptr<SStreamV3ExtractorType_SV350_Extract_GetSStream_698> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV350_Extract_GetSStream_698(698, "", true/*100*/, UID_GetSStream_698));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV350_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV350_Extract_GetSStream_698> extractor_0_ptr;
        SStreamV3ExtractorType_SV350_Extract_GetSStream_698 * extractor_0 = CreateExtractor_SV350_Extract_GetSStream_698(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_699;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_699> sorter_Process_699_ptr (new SorterType_Process_699(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_699));
        SorterType_Process_699 * sorter_Process_699 = sorter_Process_699_ptr.get();
        ULONG sorter_Process_699_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_699, BinaryOutputPolicy<typename SorterType_Process_699::Schema>, BinaryOutputStream, false> OutputerType1_SV350_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV350_Extract> outputer_SV350_Extract_out0_ptr(new OutputerType1_SV350_Extract(sorter_Process_699, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV350_Extract_out0));
        OutputerType1_SV350_Extract * outputer_SV350_Extract_out0 = outputer_SV350_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV350_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_699::Schema row;
            outputer_SV350_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV350_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV350_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV350_Extract
#pragma region SV351_Extract
#if defined(COMPILE_SV351_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_701>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV351_Extract_GetSStream_700;
    SStreamV3ExtractorType_SV351_Extract_GetSStream_700 * CreateExtractor_SV351_Extract_GetSStream_700(unique_ptr<SStreamV3ExtractorType_SV351_Extract_GetSStream_700> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV351_Extract_GetSStream_700(700, "", true/*100*/, UID_GetSStream_700));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV351_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV351_Extract_GetSStream_700> extractor_0_ptr;
        SStreamV3ExtractorType_SV351_Extract_GetSStream_700 * extractor_0 = CreateExtractor_SV351_Extract_GetSStream_700(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_701;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_701> sorter_Process_701_ptr (new SorterType_Process_701(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_701));
        SorterType_Process_701 * sorter_Process_701 = sorter_Process_701_ptr.get();
        ULONG sorter_Process_701_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_701, BinaryOutputPolicy<typename SorterType_Process_701::Schema>, BinaryOutputStream, false> OutputerType1_SV351_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV351_Extract> outputer_SV351_Extract_out0_ptr(new OutputerType1_SV351_Extract(sorter_Process_701, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV351_Extract_out0));
        OutputerType1_SV351_Extract * outputer_SV351_Extract_out0 = outputer_SV351_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV351_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_701::Schema row;
            outputer_SV351_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV351_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV351_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV351_Extract
#pragma region SV352_Extract
#if defined(COMPILE_SV352_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_703>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV352_Extract_GetSStream_702;
    SStreamV3ExtractorType_SV352_Extract_GetSStream_702 * CreateExtractor_SV352_Extract_GetSStream_702(unique_ptr<SStreamV3ExtractorType_SV352_Extract_GetSStream_702> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV352_Extract_GetSStream_702(702, "", true/*100*/, UID_GetSStream_702));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV352_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV352_Extract_GetSStream_702> extractor_0_ptr;
        SStreamV3ExtractorType_SV352_Extract_GetSStream_702 * extractor_0 = CreateExtractor_SV352_Extract_GetSStream_702(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_703;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_703> sorter_Process_703_ptr (new SorterType_Process_703(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_703));
        SorterType_Process_703 * sorter_Process_703 = sorter_Process_703_ptr.get();
        ULONG sorter_Process_703_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_703, BinaryOutputPolicy<typename SorterType_Process_703::Schema>, BinaryOutputStream, false> OutputerType1_SV352_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV352_Extract> outputer_SV352_Extract_out0_ptr(new OutputerType1_SV352_Extract(sorter_Process_703, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV352_Extract_out0));
        OutputerType1_SV352_Extract * outputer_SV352_Extract_out0 = outputer_SV352_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV352_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_703::Schema row;
            outputer_SV352_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV352_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV352_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV352_Extract
#pragma region SV353_Extract
#if defined(COMPILE_SV353_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_705>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV353_Extract_GetSStream_704;
    SStreamV3ExtractorType_SV353_Extract_GetSStream_704 * CreateExtractor_SV353_Extract_GetSStream_704(unique_ptr<SStreamV3ExtractorType_SV353_Extract_GetSStream_704> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV353_Extract_GetSStream_704(704, "", true/*100*/, UID_GetSStream_704));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV353_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV353_Extract_GetSStream_704> extractor_0_ptr;
        SStreamV3ExtractorType_SV353_Extract_GetSStream_704 * extractor_0 = CreateExtractor_SV353_Extract_GetSStream_704(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_705;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_705> sorter_Process_705_ptr (new SorterType_Process_705(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_705));
        SorterType_Process_705 * sorter_Process_705 = sorter_Process_705_ptr.get();
        ULONG sorter_Process_705_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_705, BinaryOutputPolicy<typename SorterType_Process_705::Schema>, BinaryOutputStream, false> OutputerType1_SV353_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV353_Extract> outputer_SV353_Extract_out0_ptr(new OutputerType1_SV353_Extract(sorter_Process_705, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV353_Extract_out0));
        OutputerType1_SV353_Extract * outputer_SV353_Extract_out0 = outputer_SV353_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV353_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_705::Schema row;
            outputer_SV353_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV353_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV353_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV353_Extract
#pragma region SV354_Extract
#if defined(COMPILE_SV354_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_707>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV354_Extract_GetSStream_706;
    SStreamV3ExtractorType_SV354_Extract_GetSStream_706 * CreateExtractor_SV354_Extract_GetSStream_706(unique_ptr<SStreamV3ExtractorType_SV354_Extract_GetSStream_706> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV354_Extract_GetSStream_706(706, "", true/*100*/, UID_GetSStream_706));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV354_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV354_Extract_GetSStream_706> extractor_0_ptr;
        SStreamV3ExtractorType_SV354_Extract_GetSStream_706 * extractor_0 = CreateExtractor_SV354_Extract_GetSStream_706(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_707;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_707> sorter_Process_707_ptr (new SorterType_Process_707(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_707));
        SorterType_Process_707 * sorter_Process_707 = sorter_Process_707_ptr.get();
        ULONG sorter_Process_707_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_707, BinaryOutputPolicy<typename SorterType_Process_707::Schema>, BinaryOutputStream, false> OutputerType1_SV354_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV354_Extract> outputer_SV354_Extract_out0_ptr(new OutputerType1_SV354_Extract(sorter_Process_707, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV354_Extract_out0));
        OutputerType1_SV354_Extract * outputer_SV354_Extract_out0 = outputer_SV354_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV354_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_707::Schema row;
            outputer_SV354_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV354_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV354_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV354_Extract
#pragma region SV355_Extract
#if defined(COMPILE_SV355_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_709>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV355_Extract_GetSStream_708;
    SStreamV3ExtractorType_SV355_Extract_GetSStream_708 * CreateExtractor_SV355_Extract_GetSStream_708(unique_ptr<SStreamV3ExtractorType_SV355_Extract_GetSStream_708> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV355_Extract_GetSStream_708(708, "", true/*100*/, UID_GetSStream_708));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV355_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV355_Extract_GetSStream_708> extractor_0_ptr;
        SStreamV3ExtractorType_SV355_Extract_GetSStream_708 * extractor_0 = CreateExtractor_SV355_Extract_GetSStream_708(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_709;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_709> sorter_Process_709_ptr (new SorterType_Process_709(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_709));
        SorterType_Process_709 * sorter_Process_709 = sorter_Process_709_ptr.get();
        ULONG sorter_Process_709_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_709, BinaryOutputPolicy<typename SorterType_Process_709::Schema>, BinaryOutputStream, false> OutputerType1_SV355_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV355_Extract> outputer_SV355_Extract_out0_ptr(new OutputerType1_SV355_Extract(sorter_Process_709, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV355_Extract_out0));
        OutputerType1_SV355_Extract * outputer_SV355_Extract_out0 = outputer_SV355_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV355_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_709::Schema row;
            outputer_SV355_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV355_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV355_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV355_Extract
#pragma region SV356_Extract
#if defined(COMPILE_SV356_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_711>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV356_Extract_GetSStream_710;
    SStreamV3ExtractorType_SV356_Extract_GetSStream_710 * CreateExtractor_SV356_Extract_GetSStream_710(unique_ptr<SStreamV3ExtractorType_SV356_Extract_GetSStream_710> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV356_Extract_GetSStream_710(710, "", true/*100*/, UID_GetSStream_710));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV356_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV356_Extract_GetSStream_710> extractor_0_ptr;
        SStreamV3ExtractorType_SV356_Extract_GetSStream_710 * extractor_0 = CreateExtractor_SV356_Extract_GetSStream_710(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_711;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_711> sorter_Process_711_ptr (new SorterType_Process_711(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_711));
        SorterType_Process_711 * sorter_Process_711 = sorter_Process_711_ptr.get();
        ULONG sorter_Process_711_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_711, BinaryOutputPolicy<typename SorterType_Process_711::Schema>, BinaryOutputStream, false> OutputerType1_SV356_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV356_Extract> outputer_SV356_Extract_out0_ptr(new OutputerType1_SV356_Extract(sorter_Process_711, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV356_Extract_out0));
        OutputerType1_SV356_Extract * outputer_SV356_Extract_out0 = outputer_SV356_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV356_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_711::Schema row;
            outputer_SV356_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV356_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV356_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV356_Extract
#pragma region SV357_Extract
#if defined(COMPILE_SV357_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_713>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV357_Extract_GetSStream_712;
    SStreamV3ExtractorType_SV357_Extract_GetSStream_712 * CreateExtractor_SV357_Extract_GetSStream_712(unique_ptr<SStreamV3ExtractorType_SV357_Extract_GetSStream_712> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV357_Extract_GetSStream_712(712, "", true/*100*/, UID_GetSStream_712));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV357_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV357_Extract_GetSStream_712> extractor_0_ptr;
        SStreamV3ExtractorType_SV357_Extract_GetSStream_712 * extractor_0 = CreateExtractor_SV357_Extract_GetSStream_712(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_713;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_713> sorter_Process_713_ptr (new SorterType_Process_713(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_713));
        SorterType_Process_713 * sorter_Process_713 = sorter_Process_713_ptr.get();
        ULONG sorter_Process_713_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_713, BinaryOutputPolicy<typename SorterType_Process_713::Schema>, BinaryOutputStream, false> OutputerType1_SV357_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV357_Extract> outputer_SV357_Extract_out0_ptr(new OutputerType1_SV357_Extract(sorter_Process_713, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV357_Extract_out0));
        OutputerType1_SV357_Extract * outputer_SV357_Extract_out0 = outputer_SV357_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV357_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_713::Schema row;
            outputer_SV357_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV357_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV357_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV357_Extract
#pragma region SV358_Extract
#if defined(COMPILE_SV358_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_715>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV358_Extract_GetSStream_714;
    SStreamV3ExtractorType_SV358_Extract_GetSStream_714 * CreateExtractor_SV358_Extract_GetSStream_714(unique_ptr<SStreamV3ExtractorType_SV358_Extract_GetSStream_714> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV358_Extract_GetSStream_714(714, "", true/*100*/, UID_GetSStream_714));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV358_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV358_Extract_GetSStream_714> extractor_0_ptr;
        SStreamV3ExtractorType_SV358_Extract_GetSStream_714 * extractor_0 = CreateExtractor_SV358_Extract_GetSStream_714(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_715;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_715> sorter_Process_715_ptr (new SorterType_Process_715(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_715));
        SorterType_Process_715 * sorter_Process_715 = sorter_Process_715_ptr.get();
        ULONG sorter_Process_715_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_715, BinaryOutputPolicy<typename SorterType_Process_715::Schema>, BinaryOutputStream, false> OutputerType1_SV358_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV358_Extract> outputer_SV358_Extract_out0_ptr(new OutputerType1_SV358_Extract(sorter_Process_715, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV358_Extract_out0));
        OutputerType1_SV358_Extract * outputer_SV358_Extract_out0 = outputer_SV358_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV358_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_715::Schema row;
            outputer_SV358_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV358_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV358_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV358_Extract
#pragma region SV359_Extract
#if defined(COMPILE_SV359_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_717>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV359_Extract_GetSStream_716;
    SStreamV3ExtractorType_SV359_Extract_GetSStream_716 * CreateExtractor_SV359_Extract_GetSStream_716(unique_ptr<SStreamV3ExtractorType_SV359_Extract_GetSStream_716> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV359_Extract_GetSStream_716(716, "", true/*100*/, UID_GetSStream_716));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV359_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV359_Extract_GetSStream_716> extractor_0_ptr;
        SStreamV3ExtractorType_SV359_Extract_GetSStream_716 * extractor_0 = CreateExtractor_SV359_Extract_GetSStream_716(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_717;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_717> sorter_Process_717_ptr (new SorterType_Process_717(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_717));
        SorterType_Process_717 * sorter_Process_717 = sorter_Process_717_ptr.get();
        ULONG sorter_Process_717_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_717, BinaryOutputPolicy<typename SorterType_Process_717::Schema>, BinaryOutputStream, false> OutputerType1_SV359_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV359_Extract> outputer_SV359_Extract_out0_ptr(new OutputerType1_SV359_Extract(sorter_Process_717, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV359_Extract_out0));
        OutputerType1_SV359_Extract * outputer_SV359_Extract_out0 = outputer_SV359_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV359_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_717::Schema row;
            outputer_SV359_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV359_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV359_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV359_Extract
#pragma region SV360_Extract
#if defined(COMPILE_SV360_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_719>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV360_Extract_GetSStream_718;
    SStreamV3ExtractorType_SV360_Extract_GetSStream_718 * CreateExtractor_SV360_Extract_GetSStream_718(unique_ptr<SStreamV3ExtractorType_SV360_Extract_GetSStream_718> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV360_Extract_GetSStream_718(718, "", true/*100*/, UID_GetSStream_718));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV360_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV360_Extract_GetSStream_718> extractor_0_ptr;
        SStreamV3ExtractorType_SV360_Extract_GetSStream_718 * extractor_0 = CreateExtractor_SV360_Extract_GetSStream_718(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_719;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_719> sorter_Process_719_ptr (new SorterType_Process_719(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_719));
        SorterType_Process_719 * sorter_Process_719 = sorter_Process_719_ptr.get();
        ULONG sorter_Process_719_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_719, BinaryOutputPolicy<typename SorterType_Process_719::Schema>, BinaryOutputStream, false> OutputerType1_SV360_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV360_Extract> outputer_SV360_Extract_out0_ptr(new OutputerType1_SV360_Extract(sorter_Process_719, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV360_Extract_out0));
        OutputerType1_SV360_Extract * outputer_SV360_Extract_out0 = outputer_SV360_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV360_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_719::Schema row;
            outputer_SV360_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV360_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV360_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV360_Extract
#pragma region SV361_Extract
#if defined(COMPILE_SV361_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_721>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV361_Extract_GetSStream_720;
    SStreamV3ExtractorType_SV361_Extract_GetSStream_720 * CreateExtractor_SV361_Extract_GetSStream_720(unique_ptr<SStreamV3ExtractorType_SV361_Extract_GetSStream_720> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV361_Extract_GetSStream_720(720, "", true/*100*/, UID_GetSStream_720));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV361_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV361_Extract_GetSStream_720> extractor_0_ptr;
        SStreamV3ExtractorType_SV361_Extract_GetSStream_720 * extractor_0 = CreateExtractor_SV361_Extract_GetSStream_720(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_721;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_721> sorter_Process_721_ptr (new SorterType_Process_721(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_721));
        SorterType_Process_721 * sorter_Process_721 = sorter_Process_721_ptr.get();
        ULONG sorter_Process_721_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_721, BinaryOutputPolicy<typename SorterType_Process_721::Schema>, BinaryOutputStream, false> OutputerType1_SV361_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV361_Extract> outputer_SV361_Extract_out0_ptr(new OutputerType1_SV361_Extract(sorter_Process_721, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV361_Extract_out0));
        OutputerType1_SV361_Extract * outputer_SV361_Extract_out0 = outputer_SV361_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV361_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_721::Schema row;
            outputer_SV361_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV361_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV361_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV361_Extract
#pragma region SV362_Extract
#if defined(COMPILE_SV362_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_723>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV362_Extract_GetSStream_722;
    SStreamV3ExtractorType_SV362_Extract_GetSStream_722 * CreateExtractor_SV362_Extract_GetSStream_722(unique_ptr<SStreamV3ExtractorType_SV362_Extract_GetSStream_722> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV362_Extract_GetSStream_722(722, "", true/*100*/, UID_GetSStream_722));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV362_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV362_Extract_GetSStream_722> extractor_0_ptr;
        SStreamV3ExtractorType_SV362_Extract_GetSStream_722 * extractor_0 = CreateExtractor_SV362_Extract_GetSStream_722(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_723;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_723> sorter_Process_723_ptr (new SorterType_Process_723(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_723));
        SorterType_Process_723 * sorter_Process_723 = sorter_Process_723_ptr.get();
        ULONG sorter_Process_723_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_723, BinaryOutputPolicy<typename SorterType_Process_723::Schema>, BinaryOutputStream, false> OutputerType1_SV362_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV362_Extract> outputer_SV362_Extract_out0_ptr(new OutputerType1_SV362_Extract(sorter_Process_723, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV362_Extract_out0));
        OutputerType1_SV362_Extract * outputer_SV362_Extract_out0 = outputer_SV362_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV362_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_723::Schema row;
            outputer_SV362_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV362_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV362_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV362_Extract
#pragma region SV363_Extract
#if defined(COMPILE_SV363_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_725>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV363_Extract_GetSStream_724;
    SStreamV3ExtractorType_SV363_Extract_GetSStream_724 * CreateExtractor_SV363_Extract_GetSStream_724(unique_ptr<SStreamV3ExtractorType_SV363_Extract_GetSStream_724> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV363_Extract_GetSStream_724(724, "", true/*100*/, UID_GetSStream_724));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV363_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV363_Extract_GetSStream_724> extractor_0_ptr;
        SStreamV3ExtractorType_SV363_Extract_GetSStream_724 * extractor_0 = CreateExtractor_SV363_Extract_GetSStream_724(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_725;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_725> sorter_Process_725_ptr (new SorterType_Process_725(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_725));
        SorterType_Process_725 * sorter_Process_725 = sorter_Process_725_ptr.get();
        ULONG sorter_Process_725_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_725, BinaryOutputPolicy<typename SorterType_Process_725::Schema>, BinaryOutputStream, false> OutputerType1_SV363_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV363_Extract> outputer_SV363_Extract_out0_ptr(new OutputerType1_SV363_Extract(sorter_Process_725, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV363_Extract_out0));
        OutputerType1_SV363_Extract * outputer_SV363_Extract_out0 = outputer_SV363_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV363_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_725::Schema row;
            outputer_SV363_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV363_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV363_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV363_Extract
#pragma region SV364_Extract
#if defined(COMPILE_SV364_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_727>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV364_Extract_GetSStream_726;
    SStreamV3ExtractorType_SV364_Extract_GetSStream_726 * CreateExtractor_SV364_Extract_GetSStream_726(unique_ptr<SStreamV3ExtractorType_SV364_Extract_GetSStream_726> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV364_Extract_GetSStream_726(726, "", true/*100*/, UID_GetSStream_726));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV364_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV364_Extract_GetSStream_726> extractor_0_ptr;
        SStreamV3ExtractorType_SV364_Extract_GetSStream_726 * extractor_0 = CreateExtractor_SV364_Extract_GetSStream_726(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_727;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_727> sorter_Process_727_ptr (new SorterType_Process_727(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_727));
        SorterType_Process_727 * sorter_Process_727 = sorter_Process_727_ptr.get();
        ULONG sorter_Process_727_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_727, BinaryOutputPolicy<typename SorterType_Process_727::Schema>, BinaryOutputStream, false> OutputerType1_SV364_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV364_Extract> outputer_SV364_Extract_out0_ptr(new OutputerType1_SV364_Extract(sorter_Process_727, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV364_Extract_out0));
        OutputerType1_SV364_Extract * outputer_SV364_Extract_out0 = outputer_SV364_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV364_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_727::Schema row;
            outputer_SV364_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV364_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV364_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV364_Extract
#pragma region SV365_Extract
#if defined(COMPILE_SV365_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_729>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV365_Extract_GetSStream_728;
    SStreamV3ExtractorType_SV365_Extract_GetSStream_728 * CreateExtractor_SV365_Extract_GetSStream_728(unique_ptr<SStreamV3ExtractorType_SV365_Extract_GetSStream_728> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV365_Extract_GetSStream_728(728, "", true/*100*/, UID_GetSStream_728));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV365_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV365_Extract_GetSStream_728> extractor_0_ptr;
        SStreamV3ExtractorType_SV365_Extract_GetSStream_728 * extractor_0 = CreateExtractor_SV365_Extract_GetSStream_728(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_729;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_729> sorter_Process_729_ptr (new SorterType_Process_729(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_729));
        SorterType_Process_729 * sorter_Process_729 = sorter_Process_729_ptr.get();
        ULONG sorter_Process_729_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_729, BinaryOutputPolicy<typename SorterType_Process_729::Schema>, BinaryOutputStream, false> OutputerType1_SV365_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV365_Extract> outputer_SV365_Extract_out0_ptr(new OutputerType1_SV365_Extract(sorter_Process_729, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV365_Extract_out0));
        OutputerType1_SV365_Extract * outputer_SV365_Extract_out0 = outputer_SV365_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV365_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_729::Schema row;
            outputer_SV365_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV365_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV365_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV365_Extract
#pragma region SV366_Extract
#if defined(COMPILE_SV366_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_731>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV366_Extract_GetSStream_730;
    SStreamV3ExtractorType_SV366_Extract_GetSStream_730 * CreateExtractor_SV366_Extract_GetSStream_730(unique_ptr<SStreamV3ExtractorType_SV366_Extract_GetSStream_730> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV366_Extract_GetSStream_730(730, "", true/*100*/, UID_GetSStream_730));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV366_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV366_Extract_GetSStream_730> extractor_0_ptr;
        SStreamV3ExtractorType_SV366_Extract_GetSStream_730 * extractor_0 = CreateExtractor_SV366_Extract_GetSStream_730(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_731;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_731> sorter_Process_731_ptr (new SorterType_Process_731(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_731));
        SorterType_Process_731 * sorter_Process_731 = sorter_Process_731_ptr.get();
        ULONG sorter_Process_731_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_731, BinaryOutputPolicy<typename SorterType_Process_731::Schema>, BinaryOutputStream, false> OutputerType1_SV366_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV366_Extract> outputer_SV366_Extract_out0_ptr(new OutputerType1_SV366_Extract(sorter_Process_731, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV366_Extract_out0));
        OutputerType1_SV366_Extract * outputer_SV366_Extract_out0 = outputer_SV366_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV366_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_731::Schema row;
            outputer_SV366_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV366_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV366_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV366_Extract
#pragma region SV367_Extract
#if defined(COMPILE_SV367_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_733>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV367_Extract_GetSStream_732;
    SStreamV3ExtractorType_SV367_Extract_GetSStream_732 * CreateExtractor_SV367_Extract_GetSStream_732(unique_ptr<SStreamV3ExtractorType_SV367_Extract_GetSStream_732> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV367_Extract_GetSStream_732(732, "", true/*100*/, UID_GetSStream_732));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV367_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV367_Extract_GetSStream_732> extractor_0_ptr;
        SStreamV3ExtractorType_SV367_Extract_GetSStream_732 * extractor_0 = CreateExtractor_SV367_Extract_GetSStream_732(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_733;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_733> sorter_Process_733_ptr (new SorterType_Process_733(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_733));
        SorterType_Process_733 * sorter_Process_733 = sorter_Process_733_ptr.get();
        ULONG sorter_Process_733_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_733, BinaryOutputPolicy<typename SorterType_Process_733::Schema>, BinaryOutputStream, false> OutputerType1_SV367_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV367_Extract> outputer_SV367_Extract_out0_ptr(new OutputerType1_SV367_Extract(sorter_Process_733, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV367_Extract_out0));
        OutputerType1_SV367_Extract * outputer_SV367_Extract_out0 = outputer_SV367_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV367_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_733::Schema row;
            outputer_SV367_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV367_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV367_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV367_Extract
#pragma region SV368_Extract
#if defined(COMPILE_SV368_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_735>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV368_Extract_GetSStream_734;
    SStreamV3ExtractorType_SV368_Extract_GetSStream_734 * CreateExtractor_SV368_Extract_GetSStream_734(unique_ptr<SStreamV3ExtractorType_SV368_Extract_GetSStream_734> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV368_Extract_GetSStream_734(734, "", true/*100*/, UID_GetSStream_734));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV368_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV368_Extract_GetSStream_734> extractor_0_ptr;
        SStreamV3ExtractorType_SV368_Extract_GetSStream_734 * extractor_0 = CreateExtractor_SV368_Extract_GetSStream_734(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_735;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_735> sorter_Process_735_ptr (new SorterType_Process_735(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_735));
        SorterType_Process_735 * sorter_Process_735 = sorter_Process_735_ptr.get();
        ULONG sorter_Process_735_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_735, BinaryOutputPolicy<typename SorterType_Process_735::Schema>, BinaryOutputStream, false> OutputerType1_SV368_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV368_Extract> outputer_SV368_Extract_out0_ptr(new OutputerType1_SV368_Extract(sorter_Process_735, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV368_Extract_out0));
        OutputerType1_SV368_Extract * outputer_SV368_Extract_out0 = outputer_SV368_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV368_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_735::Schema row;
            outputer_SV368_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV368_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV368_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV368_Extract
#pragma region SV369_Extract
#if defined(COMPILE_SV369_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_737>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV369_Extract_GetSStream_736;
    SStreamV3ExtractorType_SV369_Extract_GetSStream_736 * CreateExtractor_SV369_Extract_GetSStream_736(unique_ptr<SStreamV3ExtractorType_SV369_Extract_GetSStream_736> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV369_Extract_GetSStream_736(736, "", true/*100*/, UID_GetSStream_736));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV369_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV369_Extract_GetSStream_736> extractor_0_ptr;
        SStreamV3ExtractorType_SV369_Extract_GetSStream_736 * extractor_0 = CreateExtractor_SV369_Extract_GetSStream_736(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_737;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_737> sorter_Process_737_ptr (new SorterType_Process_737(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_737));
        SorterType_Process_737 * sorter_Process_737 = sorter_Process_737_ptr.get();
        ULONG sorter_Process_737_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_737, BinaryOutputPolicy<typename SorterType_Process_737::Schema>, BinaryOutputStream, false> OutputerType1_SV369_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV369_Extract> outputer_SV369_Extract_out0_ptr(new OutputerType1_SV369_Extract(sorter_Process_737, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV369_Extract_out0));
        OutputerType1_SV369_Extract * outputer_SV369_Extract_out0 = outputer_SV369_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV369_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_737::Schema row;
            outputer_SV369_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV369_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV369_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV369_Extract
#pragma region SV370_Extract
#if defined(COMPILE_SV370_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_739>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV370_Extract_GetSStream_738;
    SStreamV3ExtractorType_SV370_Extract_GetSStream_738 * CreateExtractor_SV370_Extract_GetSStream_738(unique_ptr<SStreamV3ExtractorType_SV370_Extract_GetSStream_738> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV370_Extract_GetSStream_738(738, "", true/*100*/, UID_GetSStream_738));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV370_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV370_Extract_GetSStream_738> extractor_0_ptr;
        SStreamV3ExtractorType_SV370_Extract_GetSStream_738 * extractor_0 = CreateExtractor_SV370_Extract_GetSStream_738(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_739;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_739> sorter_Process_739_ptr (new SorterType_Process_739(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_739));
        SorterType_Process_739 * sorter_Process_739 = sorter_Process_739_ptr.get();
        ULONG sorter_Process_739_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_739, BinaryOutputPolicy<typename SorterType_Process_739::Schema>, BinaryOutputStream, false> OutputerType1_SV370_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV370_Extract> outputer_SV370_Extract_out0_ptr(new OutputerType1_SV370_Extract(sorter_Process_739, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV370_Extract_out0));
        OutputerType1_SV370_Extract * outputer_SV370_Extract_out0 = outputer_SV370_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV370_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_739::Schema row;
            outputer_SV370_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV370_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV370_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV370_Extract
#pragma region SV371_Extract
#if defined(COMPILE_SV371_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_741>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV371_Extract_GetSStream_740;
    SStreamV3ExtractorType_SV371_Extract_GetSStream_740 * CreateExtractor_SV371_Extract_GetSStream_740(unique_ptr<SStreamV3ExtractorType_SV371_Extract_GetSStream_740> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV371_Extract_GetSStream_740(740, "", true/*100*/, UID_GetSStream_740));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV371_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV371_Extract_GetSStream_740> extractor_0_ptr;
        SStreamV3ExtractorType_SV371_Extract_GetSStream_740 * extractor_0 = CreateExtractor_SV371_Extract_GetSStream_740(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_741;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_741> sorter_Process_741_ptr (new SorterType_Process_741(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_741));
        SorterType_Process_741 * sorter_Process_741 = sorter_Process_741_ptr.get();
        ULONG sorter_Process_741_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_741, BinaryOutputPolicy<typename SorterType_Process_741::Schema>, BinaryOutputStream, false> OutputerType1_SV371_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV371_Extract> outputer_SV371_Extract_out0_ptr(new OutputerType1_SV371_Extract(sorter_Process_741, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV371_Extract_out0));
        OutputerType1_SV371_Extract * outputer_SV371_Extract_out0 = outputer_SV371_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV371_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_741::Schema row;
            outputer_SV371_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV371_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV371_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV371_Extract
#pragma region SV372_Extract
#if defined(COMPILE_SV372_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_743>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV372_Extract_GetSStream_742;
    SStreamV3ExtractorType_SV372_Extract_GetSStream_742 * CreateExtractor_SV372_Extract_GetSStream_742(unique_ptr<SStreamV3ExtractorType_SV372_Extract_GetSStream_742> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV372_Extract_GetSStream_742(742, "", true/*100*/, UID_GetSStream_742));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV372_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV372_Extract_GetSStream_742> extractor_0_ptr;
        SStreamV3ExtractorType_SV372_Extract_GetSStream_742 * extractor_0 = CreateExtractor_SV372_Extract_GetSStream_742(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_743;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_743> sorter_Process_743_ptr (new SorterType_Process_743(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_743));
        SorterType_Process_743 * sorter_Process_743 = sorter_Process_743_ptr.get();
        ULONG sorter_Process_743_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_743, BinaryOutputPolicy<typename SorterType_Process_743::Schema>, BinaryOutputStream, false> OutputerType1_SV372_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV372_Extract> outputer_SV372_Extract_out0_ptr(new OutputerType1_SV372_Extract(sorter_Process_743, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV372_Extract_out0));
        OutputerType1_SV372_Extract * outputer_SV372_Extract_out0 = outputer_SV372_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV372_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_743::Schema row;
            outputer_SV372_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV372_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV372_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV372_Extract
#pragma region SV373_Extract
#if defined(COMPILE_SV373_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_745>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV373_Extract_GetSStream_744;
    SStreamV3ExtractorType_SV373_Extract_GetSStream_744 * CreateExtractor_SV373_Extract_GetSStream_744(unique_ptr<SStreamV3ExtractorType_SV373_Extract_GetSStream_744> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV373_Extract_GetSStream_744(744, "", true/*100*/, UID_GetSStream_744));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV373_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV373_Extract_GetSStream_744> extractor_0_ptr;
        SStreamV3ExtractorType_SV373_Extract_GetSStream_744 * extractor_0 = CreateExtractor_SV373_Extract_GetSStream_744(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_745;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_745> sorter_Process_745_ptr (new SorterType_Process_745(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_745));
        SorterType_Process_745 * sorter_Process_745 = sorter_Process_745_ptr.get();
        ULONG sorter_Process_745_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_745, BinaryOutputPolicy<typename SorterType_Process_745::Schema>, BinaryOutputStream, false> OutputerType1_SV373_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV373_Extract> outputer_SV373_Extract_out0_ptr(new OutputerType1_SV373_Extract(sorter_Process_745, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV373_Extract_out0));
        OutputerType1_SV373_Extract * outputer_SV373_Extract_out0 = outputer_SV373_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV373_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_745::Schema row;
            outputer_SV373_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV373_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV373_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV373_Extract
#pragma region SV374_Extract
#if defined(COMPILE_SV374_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_747>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV374_Extract_GetSStream_746;
    SStreamV3ExtractorType_SV374_Extract_GetSStream_746 * CreateExtractor_SV374_Extract_GetSStream_746(unique_ptr<SStreamV3ExtractorType_SV374_Extract_GetSStream_746> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV374_Extract_GetSStream_746(746, "", true/*100*/, UID_GetSStream_746));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV374_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV374_Extract_GetSStream_746> extractor_0_ptr;
        SStreamV3ExtractorType_SV374_Extract_GetSStream_746 * extractor_0 = CreateExtractor_SV374_Extract_GetSStream_746(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_747;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_747> sorter_Process_747_ptr (new SorterType_Process_747(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_747));
        SorterType_Process_747 * sorter_Process_747 = sorter_Process_747_ptr.get();
        ULONG sorter_Process_747_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_747, BinaryOutputPolicy<typename SorterType_Process_747::Schema>, BinaryOutputStream, false> OutputerType1_SV374_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV374_Extract> outputer_SV374_Extract_out0_ptr(new OutputerType1_SV374_Extract(sorter_Process_747, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV374_Extract_out0));
        OutputerType1_SV374_Extract * outputer_SV374_Extract_out0 = outputer_SV374_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV374_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_747::Schema row;
            outputer_SV374_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV374_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV374_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV374_Extract
#pragma region SV375_Extract
#if defined(COMPILE_SV375_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_749>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV375_Extract_GetSStream_748;
    SStreamV3ExtractorType_SV375_Extract_GetSStream_748 * CreateExtractor_SV375_Extract_GetSStream_748(unique_ptr<SStreamV3ExtractorType_SV375_Extract_GetSStream_748> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV375_Extract_GetSStream_748(748, "", true/*100*/, UID_GetSStream_748));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV375_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV375_Extract_GetSStream_748> extractor_0_ptr;
        SStreamV3ExtractorType_SV375_Extract_GetSStream_748 * extractor_0 = CreateExtractor_SV375_Extract_GetSStream_748(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_749;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_749> sorter_Process_749_ptr (new SorterType_Process_749(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_749));
        SorterType_Process_749 * sorter_Process_749 = sorter_Process_749_ptr.get();
        ULONG sorter_Process_749_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_749, BinaryOutputPolicy<typename SorterType_Process_749::Schema>, BinaryOutputStream, false> OutputerType1_SV375_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV375_Extract> outputer_SV375_Extract_out0_ptr(new OutputerType1_SV375_Extract(sorter_Process_749, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV375_Extract_out0));
        OutputerType1_SV375_Extract * outputer_SV375_Extract_out0 = outputer_SV375_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV375_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_749::Schema row;
            outputer_SV375_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV375_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV375_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV375_Extract
#pragma region SV376_Extract
#if defined(COMPILE_SV376_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_751>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV376_Extract_GetSStream_750;
    SStreamV3ExtractorType_SV376_Extract_GetSStream_750 * CreateExtractor_SV376_Extract_GetSStream_750(unique_ptr<SStreamV3ExtractorType_SV376_Extract_GetSStream_750> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV376_Extract_GetSStream_750(750, "", true/*100*/, UID_GetSStream_750));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV376_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV376_Extract_GetSStream_750> extractor_0_ptr;
        SStreamV3ExtractorType_SV376_Extract_GetSStream_750 * extractor_0 = CreateExtractor_SV376_Extract_GetSStream_750(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_751;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_751> sorter_Process_751_ptr (new SorterType_Process_751(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_751));
        SorterType_Process_751 * sorter_Process_751 = sorter_Process_751_ptr.get();
        ULONG sorter_Process_751_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_751, BinaryOutputPolicy<typename SorterType_Process_751::Schema>, BinaryOutputStream, false> OutputerType1_SV376_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV376_Extract> outputer_SV376_Extract_out0_ptr(new OutputerType1_SV376_Extract(sorter_Process_751, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV376_Extract_out0));
        OutputerType1_SV376_Extract * outputer_SV376_Extract_out0 = outputer_SV376_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV376_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_751::Schema row;
            outputer_SV376_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV376_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV376_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV376_Extract
#pragma region SV377_Extract
#if defined(COMPILE_SV377_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_753>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV377_Extract_GetSStream_752;
    SStreamV3ExtractorType_SV377_Extract_GetSStream_752 * CreateExtractor_SV377_Extract_GetSStream_752(unique_ptr<SStreamV3ExtractorType_SV377_Extract_GetSStream_752> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV377_Extract_GetSStream_752(752, "", true/*100*/, UID_GetSStream_752));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV377_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV377_Extract_GetSStream_752> extractor_0_ptr;
        SStreamV3ExtractorType_SV377_Extract_GetSStream_752 * extractor_0 = CreateExtractor_SV377_Extract_GetSStream_752(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_753;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_753> sorter_Process_753_ptr (new SorterType_Process_753(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_753));
        SorterType_Process_753 * sorter_Process_753 = sorter_Process_753_ptr.get();
        ULONG sorter_Process_753_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_753, BinaryOutputPolicy<typename SorterType_Process_753::Schema>, BinaryOutputStream, false> OutputerType1_SV377_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV377_Extract> outputer_SV377_Extract_out0_ptr(new OutputerType1_SV377_Extract(sorter_Process_753, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV377_Extract_out0));
        OutputerType1_SV377_Extract * outputer_SV377_Extract_out0 = outputer_SV377_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV377_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_753::Schema row;
            outputer_SV377_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV377_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV377_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV377_Extract
#pragma region SV378_Extract
#if defined(COMPILE_SV378_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_755>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV378_Extract_GetSStream_754;
    SStreamV3ExtractorType_SV378_Extract_GetSStream_754 * CreateExtractor_SV378_Extract_GetSStream_754(unique_ptr<SStreamV3ExtractorType_SV378_Extract_GetSStream_754> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV378_Extract_GetSStream_754(754, "", true/*100*/, UID_GetSStream_754));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV378_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV378_Extract_GetSStream_754> extractor_0_ptr;
        SStreamV3ExtractorType_SV378_Extract_GetSStream_754 * extractor_0 = CreateExtractor_SV378_Extract_GetSStream_754(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_755;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_755> sorter_Process_755_ptr (new SorterType_Process_755(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_755));
        SorterType_Process_755 * sorter_Process_755 = sorter_Process_755_ptr.get();
        ULONG sorter_Process_755_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_755, BinaryOutputPolicy<typename SorterType_Process_755::Schema>, BinaryOutputStream, false> OutputerType1_SV378_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV378_Extract> outputer_SV378_Extract_out0_ptr(new OutputerType1_SV378_Extract(sorter_Process_755, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV378_Extract_out0));
        OutputerType1_SV378_Extract * outputer_SV378_Extract_out0 = outputer_SV378_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV378_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_755::Schema row;
            outputer_SV378_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV378_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV378_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV378_Extract
#pragma region SV379_Extract
#if defined(COMPILE_SV379_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_757>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV379_Extract_GetSStream_756;
    SStreamV3ExtractorType_SV379_Extract_GetSStream_756 * CreateExtractor_SV379_Extract_GetSStream_756(unique_ptr<SStreamV3ExtractorType_SV379_Extract_GetSStream_756> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV379_Extract_GetSStream_756(756, "", true/*100*/, UID_GetSStream_756));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV379_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV379_Extract_GetSStream_756> extractor_0_ptr;
        SStreamV3ExtractorType_SV379_Extract_GetSStream_756 * extractor_0 = CreateExtractor_SV379_Extract_GetSStream_756(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_757;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_757> sorter_Process_757_ptr (new SorterType_Process_757(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_757));
        SorterType_Process_757 * sorter_Process_757 = sorter_Process_757_ptr.get();
        ULONG sorter_Process_757_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_757, BinaryOutputPolicy<typename SorterType_Process_757::Schema>, BinaryOutputStream, false> OutputerType1_SV379_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV379_Extract> outputer_SV379_Extract_out0_ptr(new OutputerType1_SV379_Extract(sorter_Process_757, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV379_Extract_out0));
        OutputerType1_SV379_Extract * outputer_SV379_Extract_out0 = outputer_SV379_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV379_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_757::Schema row;
            outputer_SV379_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV379_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV379_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV379_Extract
#pragma region SV380_Extract
#if defined(COMPILE_SV380_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_759>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV380_Extract_GetSStream_758;
    SStreamV3ExtractorType_SV380_Extract_GetSStream_758 * CreateExtractor_SV380_Extract_GetSStream_758(unique_ptr<SStreamV3ExtractorType_SV380_Extract_GetSStream_758> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV380_Extract_GetSStream_758(758, "", true/*100*/, UID_GetSStream_758));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV380_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV380_Extract_GetSStream_758> extractor_0_ptr;
        SStreamV3ExtractorType_SV380_Extract_GetSStream_758 * extractor_0 = CreateExtractor_SV380_Extract_GetSStream_758(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_759;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_759> sorter_Process_759_ptr (new SorterType_Process_759(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_759));
        SorterType_Process_759 * sorter_Process_759 = sorter_Process_759_ptr.get();
        ULONG sorter_Process_759_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_759, BinaryOutputPolicy<typename SorterType_Process_759::Schema>, BinaryOutputStream, false> OutputerType1_SV380_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV380_Extract> outputer_SV380_Extract_out0_ptr(new OutputerType1_SV380_Extract(sorter_Process_759, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV380_Extract_out0));
        OutputerType1_SV380_Extract * outputer_SV380_Extract_out0 = outputer_SV380_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV380_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_759::Schema row;
            outputer_SV380_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV380_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV380_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV380_Extract
#pragma region SV381_Extract
#if defined(COMPILE_SV381_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_761>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV381_Extract_GetSStream_760;
    SStreamV3ExtractorType_SV381_Extract_GetSStream_760 * CreateExtractor_SV381_Extract_GetSStream_760(unique_ptr<SStreamV3ExtractorType_SV381_Extract_GetSStream_760> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV381_Extract_GetSStream_760(760, "", true/*100*/, UID_GetSStream_760));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV381_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV381_Extract_GetSStream_760> extractor_0_ptr;
        SStreamV3ExtractorType_SV381_Extract_GetSStream_760 * extractor_0 = CreateExtractor_SV381_Extract_GetSStream_760(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_761;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_761> sorter_Process_761_ptr (new SorterType_Process_761(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_761));
        SorterType_Process_761 * sorter_Process_761 = sorter_Process_761_ptr.get();
        ULONG sorter_Process_761_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_761, BinaryOutputPolicy<typename SorterType_Process_761::Schema>, BinaryOutputStream, false> OutputerType1_SV381_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV381_Extract> outputer_SV381_Extract_out0_ptr(new OutputerType1_SV381_Extract(sorter_Process_761, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV381_Extract_out0));
        OutputerType1_SV381_Extract * outputer_SV381_Extract_out0 = outputer_SV381_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV381_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_761::Schema row;
            outputer_SV381_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV381_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV381_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV381_Extract
#pragma region SV382_Extract
#if defined(COMPILE_SV382_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_763>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV382_Extract_GetSStream_762;
    SStreamV3ExtractorType_SV382_Extract_GetSStream_762 * CreateExtractor_SV382_Extract_GetSStream_762(unique_ptr<SStreamV3ExtractorType_SV382_Extract_GetSStream_762> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV382_Extract_GetSStream_762(762, "", true/*100*/, UID_GetSStream_762));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV382_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV382_Extract_GetSStream_762> extractor_0_ptr;
        SStreamV3ExtractorType_SV382_Extract_GetSStream_762 * extractor_0 = CreateExtractor_SV382_Extract_GetSStream_762(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_763;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_763> sorter_Process_763_ptr (new SorterType_Process_763(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_763));
        SorterType_Process_763 * sorter_Process_763 = sorter_Process_763_ptr.get();
        ULONG sorter_Process_763_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_763, BinaryOutputPolicy<typename SorterType_Process_763::Schema>, BinaryOutputStream, false> OutputerType1_SV382_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV382_Extract> outputer_SV382_Extract_out0_ptr(new OutputerType1_SV382_Extract(sorter_Process_763, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV382_Extract_out0));
        OutputerType1_SV382_Extract * outputer_SV382_Extract_out0 = outputer_SV382_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV382_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_763::Schema row;
            outputer_SV382_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV382_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV382_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV382_Extract
#pragma region SV383_Extract
#if defined(COMPILE_SV383_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_765>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV383_Extract_GetSStream_764;
    SStreamV3ExtractorType_SV383_Extract_GetSStream_764 * CreateExtractor_SV383_Extract_GetSStream_764(unique_ptr<SStreamV3ExtractorType_SV383_Extract_GetSStream_764> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV383_Extract_GetSStream_764(764, "", true/*100*/, UID_GetSStream_764));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV383_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV383_Extract_GetSStream_764> extractor_0_ptr;
        SStreamV3ExtractorType_SV383_Extract_GetSStream_764 * extractor_0 = CreateExtractor_SV383_Extract_GetSStream_764(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_765;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_765> sorter_Process_765_ptr (new SorterType_Process_765(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_765));
        SorterType_Process_765 * sorter_Process_765 = sorter_Process_765_ptr.get();
        ULONG sorter_Process_765_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_765, BinaryOutputPolicy<typename SorterType_Process_765::Schema>, BinaryOutputStream, false> OutputerType1_SV383_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV383_Extract> outputer_SV383_Extract_out0_ptr(new OutputerType1_SV383_Extract(sorter_Process_765, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV383_Extract_out0));
        OutputerType1_SV383_Extract * outputer_SV383_Extract_out0 = outputer_SV383_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV383_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_765::Schema row;
            outputer_SV383_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV383_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV383_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV383_Extract
#pragma region SV384_Extract
#if defined(COMPILE_SV384_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_767>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_0_Data0, SStreamV3ExtractPolicy<GetSStream_0_Data0,UID_GetSStream_0>, UID_GetSStream_0, NullSchema, false> SStreamV3ExtractorType_SV384_Extract_GetSStream_766;
    SStreamV3ExtractorType_SV384_Extract_GetSStream_766 * CreateExtractor_SV384_Extract_GetSStream_766(unique_ptr<SStreamV3ExtractorType_SV384_Extract_GetSStream_766> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV384_Extract_GetSStream_766(766, "", true/*100*/, UID_GetSStream_766));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV384_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV384_Extract_GetSStream_766> extractor_0_ptr;
        SStreamV3ExtractorType_SV384_Extract_GetSStream_766 * extractor_0 = CreateExtractor_SV384_Extract_GetSStream_766(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_extractor_0_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(extractor_0)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_extractor_0 = delegate_extractor_0_ptr.get();
        ULONG delegate_extractor_0_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_767;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_767> sorter_Process_767_ptr (new SorterType_Process_767(delegate_extractor_0, &MKQSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_1>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_1>(), false, UID_Process_767));
        SorterType_Process_767 * sorter_Process_767 = sorter_Process_767_ptr.get();
        ULONG sorter_Process_767_count = 1;
        // Define outputer type
        typedef Outputer<SorterType_Process_767, BinaryOutputPolicy<typename SorterType_Process_767::Schema>, BinaryOutputStream, false> OutputerType1_SV384_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV384_Extract> outputer_SV384_Extract_out0_ptr(new OutputerType1_SV384_Extract(sorter_Process_767, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV384_Extract_out0));
        OutputerType1_SV384_Extract * outputer_SV384_Extract_out0 = outputer_SV384_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV384_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            SorterType_Process_767::Schema row;
            outputer_SV384_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV384_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV384_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV384_Extract
#pragma region SV385_Extract
#if defined(COMPILE_SV385_EXTRACT) || defined(COMPILE_ALL_VERTICES)
#if defined(COMPILE_NATIVE)
    template<> 
    class SStreamV3ExtractPolicy<GetSStream_769_Data0, UID_GetSStream_769, NullSchema>
    {
    public:
        typedef NullSchema CorrelatedParameters;
        typedef bool (*PredFn)(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, CorrelatedParameters* params);

    public:
        typedef PartitionSchema_GetSStream_0 PartitionSchema;

        static const PartitioningType m_partitioning = RandomPartition;
        static const bool m_residualFilterForKeyRange = false;
        static const bool m_residualFilterForRefinedHash = false;
        static const int m_numberOfPartitionAfterRefinedHash = 0;
        static const bool m_keyRangeSeek = false;
        static const bool m_truncatedRangeKey = false;
        static const bool m_generateMetadata = false;
        static const UINT m_numOfBuffers = 4;

        static BYTE* DataColumnSizes()
        {
            static BYTE sizes[] = 
                {
                0,
                0,
                0,
                8,
                0,
                0,
                0,
                4,
                8,
                4,
                4,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                1,
                8,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                8,
                8,
                8,
                0,
                1,
                4,
                0,
                0,
                8,
                0,
                1,
                0,
                0,
                0,
                4,
                4,
                0,
                1,
                0,
                0,
                0,
                0,
                8,
                8,
                0,
                8,
                0,
                0,
                0,
                0,
                8,
                };

            return sizes;
        }
        static const UINT m_dataColumnSizesCnt = 65;

        static BYTE* IndexColumnSizes()
        {
            static BYTE sizes[] = 
                {
                // Low key
                // Hi Key
                8, // BlockOffset
                8, // BlockLength
                4, // RowCount
                };

            return sizes;
        }
        static const UINT m_indexColumnSizesCnt = 2 * 0 + 3;

        static UINT* SortKeys() { return nullptr; }
        static const UINT m_sortKeysCnt = 0;

        static const bool m_descending = false;


        static bool Deserialize(SSLibV3::ColumnIterator* iters, GetSStream_769_Data0 & row, IncrementalAllocator* alloc)
        {
                if (iters[2].IsNull())
                {
                    row.m_DeploymentName.SetNull();
                    iters[2].IncrementNull();
                }
                else
                {
                    row.m_DeploymentName.CopyFromNotNull((FString::PointerType)iters[2].DataRaw(), (int)iters[2].Length(), alloc);
                    iters[2].IncrementVariable();
                }
            return true;
        }

        static void SkipRow(SSLibV3::ColumnIterator* iters)
        {
                if (iters[2].IsNull())
                {
                    iters[2].IncrementNull();
                }
                else
                {
                    iters[2].IncrementVariable();
                }
        }
        static PredFn* PredicatesLow() { return nullptr; }
        static PredFn* PredicatesHi() { return nullptr; }
        static const UINT m_predicateCnt = 0;
        static bool LowIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineSeek(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool LowExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiIncludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        static bool HiExcludedPredicateRefineResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, PartitionSchema& row)
        {
            return true;
        }

        // PredicateRefinedHashResidual
        static bool PredicateRefinedHashResidual(SSLibV3::ColumnIterator* iters, IncrementalAllocator* alloc, int partitionIndex, int numberOfPartitions)
        {
            return true;
        }
    };

#endif // defined(COMPILE_NATIVE)

    template<> 
    class KeyComparePolicy<GetSStream_769_Data0,UID_Process_772>
    {
    public:
        struct KeyStruct
        {
            FString m_DeploymentName;

            KeyStruct(GetSStream_769_Data0 & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const GetSStream_769_Data0 & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<GetSStream_769_Data0&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<KeyStruct&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct() :
                m_DeploymentName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_769_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_DeploymentName, key.m_DeploymentName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_769_Data0 * n1, GetSStream_769_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_DeploymentName, (*n2).m_DeploymentName)) != 0)
                return r;
            return r;
        }

    };

#if defined(COMPILE_NATIVE)
    template<> 
    class AggregationPolicy<typename GetSStream_769_Data0, typename GetSStream_769_Data0, UID_Process_772> 
    {
    public:
        
        AggregationPolicy()
            :
            m_DeploymentName_DeploymentName_FIRST("FIRST_DeploymentName_DeploymentName")
        {
        }
        
        // begin key range (copy grouping key to output)
        void BeginKey(KeyComparePolicy<GetSStream_769_Data0,UID_Process_772>::KeyType * input, GetSStream_769_Data0 * output)
        {
            (*output).m_DeploymentName = (*input).m_DeploymentName;
        }

        // process input row, called for each row in key range
        void AddRow(GetSStream_769_Data0 * input)
        {
            m_DeploymentName_DeploymentName_FIRST.Add((*input).m_DeploymentName);
        }

        // write aggregated data, called after key is completely scanned
        void Aggregate(GetSStream_769_Data0 * output)
        {
            m_DeploymentName_DeploymentName_FIRST.Aggregate(&(*output).m_DeploymentName);
        }

        // write aggregated data
        void GetValue(GetSStream_769_Data0 * output)
        {
            m_DeploymentName_DeploymentName_FIRST.GetValue(&(*output).m_DeploymentName);
        }

        // reset for new key
        void Reset()
        {
            m_DeploymentName_DeploymentName_FIRST.Reset();
        }

        // store statistics
        void WriteRuntimeStats(TreeNode & root)
        {
            m_DeploymentName_DeploymentName_FIRST.WriteRuntimeStats(root);
        }

    private:
        Aggregate_FIRST<FString> m_DeploymentName_DeploymentName_FIRST;
    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class KeyComparePolicy<GetSStream_769_Data0,UID_Process_771>
    {
    public:
        struct KeyStruct
        {
            FString m_DeploymentName;

            KeyStruct(GetSStream_769_Data0 & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const GetSStream_769_Data0 & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<GetSStream_769_Data0&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<KeyStruct&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct() :
                m_DeploymentName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_769_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_DeploymentName, key.m_DeploymentName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_769_Data0 * n1, GetSStream_769_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_DeploymentName, (*n2).m_DeploymentName)) != 0)
                return r;
            return r;
        }

        // Key function for MKQsort algorithm
        static __int64 Key(GetSStream_769_Data0 * p, int depth)
        {
            if (depth < 1 && (*p).m_DeploymentName.IsNull())
            {
                // Special case for "null" string
                return (__int64)(256);
            }
            else if (depth == (int) (*p).m_DeploymentName.size())
            {
                // Special case for end-of-string (field separator)
                return (__int64)(-1);
            }
            else if (depth < (int) (*p).m_DeploymentName.size())
            {
                // For string convert to unsigned char first. Otherwise, unicode will have negative value which will have different order than binary comparison.
                return (__int64)((unsigned char)((*p).m_DeploymentName.buffer()[depth]));
            }

            depth -= (int) ((*p).m_DeploymentName.size() + 1);


            return 0;
        }

        // End of Key function for MKQSort algorithm
        static bool EofKey(GetSStream_769_Data0 * p, int depth)
        {
            depth -= (int) ((*p).m_DeploymentName.size() + 1);
            if (depth < 0)
                return false;
            return true;
        }
    };

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_769_Data0, typename GetSStream_769_Data0, UID_Process_770>
    {
    public:

        static bool FilterTransformRow(GetSStream_769_Data0 & input, GetSStream_769_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_NATIVE)

    template<>
    class HashAggregationPolicy<GetSStream_769_Data0, GetSStream_769_Data0, UID_Process_770>
    {
    public:
        struct Hash
        {
            const INT64 m_seed;

            Hash() : m_seed((INT64)0)
            {
            }

            Hash(INT64 seed) : m_seed(seed)
            {
            }

            INT64 operator () (const GetSStream_769_Data0& schema) const
            {
                INT64 result = m_seed;
                result = CRC32Hash(result, schema.m_DeploymentName);
                return result;
            }
        };
        struct EqualTo
        {
            bool operator () (const GetSStream_769_Data0& left, const GetSStream_769_Data0& right) const
            {
                if (!ScopeTypeCompare_EqualEqual(left.m_DeploymentName, right.m_DeploymentName)) return false;
                return true;
            }
        };
 
    public:
        typedef GetSStream_769_Data0           KeySchema;
        typedef PartitionSchema_GetSStream_0         StateSchema;

    public:
        static const SIZE_T m_memoryQuota = (SIZE_T)2 * 1024 * 1024 * 1024; //2GB
        // 1) a fairly large initial size is used to avoid bucket vector reallocation
        //    which is a considerable performance hit;
        // 2) table size must be a power of two;
        // 3) sizeof(Hashtable::Bucket) is 32 bytes, so the total memory used for the bucket vector is 128MB.
        static const SIZE_T   m_initialSize = (SIZE_T)4194304;
        typedef DefaultSTLIncrementalAllocator Allocator;
        static const SIZE_T m_containerAllocTax = 0;

    public:
        // Shallow copy input schema fields to key schema
        static void GetKey(const GetSStream_769_Data0 & row, KeySchema & key)
        {
           key.m_DeploymentName = row.m_DeploymentName;
        }

        // Init state schema fields with default aggregate states, shallow copy
        static void GetDefaultState(const GetSStream_769_Data0 & row, StateSchema & defaultState)
        {
        }

        // Shallow copy key and aggregated states to the output
        static void GetOutput(const KeySchema & key, const StateSchema & state, GetSStream_769_Data0 & row)
        {
            row.m_DeploymentName = key.m_DeploymentName;
        }

        // Aggregate state fileds with state fields
        template <typename Hashtable>
        static typename Hashtable::EResult InsertOrUpdateState(const KeySchema & key, const StateSchema & defaultState, const GetSStream_769_Data0 & row, Hashtable & hashtable)
        {
            StateSchema * foundState = nullptr;
            typename Hashtable::EResult res = hashtable.TryUpdateOrInsertShallow(key, defaultState, foundState);

            SCOPE_ASSERT(res == Hashtable::OK_INSERT || res == Hashtable::READY_FOR_UPDATE || res == Hashtable::FAILED_OUT_OF_MEMORY);

            if (res == Hashtable::READY_FOR_UPDATE)
            {

                return Hashtable::OK_UPDATE;
            }
            else return res;
        }
    };
#endif // defined(COMPILE_NATIVE)



#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_769_Data0, typename GetSStream_769_Data0, UID_Process_771>
    {
    public:

        static bool FilterTransformRow(GetSStream_769_Data0 & input, GetSStream_769_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_769_Data0, typename GetSStream_769_Data0, UID_Process_772>
    {
    public:

        static bool FilterTransformRow(GetSStream_769_Data0 & input, GetSStream_769_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    typedef SStreamExtractor<GetSStream_769_Data0, SStreamV3ExtractPolicy<GetSStream_769_Data0,UID_GetSStream_769>, UID_GetSStream_769, NullSchema, false> SStreamV3ExtractorType_SV385_Extract_GetSStream_769;
    SStreamV3ExtractorType_SV385_Extract_GetSStream_769 * CreateExtractor_SV385_Extract_GetSStream_769(unique_ptr<SStreamV3ExtractorType_SV385_Extract_GetSStream_769> * extractor_ptr)
    {
        extractor_ptr->reset(new SStreamV3ExtractorType_SV385_Extract_GetSStream_769(769, "", true/*100*/, UID_GetSStream_769));
        return extractor_ptr->get();
    }
#endif // defined(COMPILE_NATIVE)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV385_Extract_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        unique_ptr<SStreamV3ExtractorType_SV385_Extract_GetSStream_769> extractor_0_ptr;
        SStreamV3ExtractorType_SV385_Extract_GetSStream_769 * extractor_0 = CreateExtractor_SV385_Extract_GetSStream_769(&extractor_0_ptr);
        ULONG extractor_0_count = 1;

        // Define hash aggregator type
        typedef LocalHashAggregator<SStreamV3ExtractorType_SV385_Extract_GetSStream_769, GetSStream_769_Data0, UID_Process_770> LocalHashAggregatorType_Process_770;
        // Construct operator and initialize it.
        unique_ptr<LocalHashAggregatorType_Process_770> localHashAggregator_Process_770_ptr (new LocalHashAggregatorType_Process_770(extractor_0, UID_Process_770));
        LocalHashAggregatorType_Process_770 * localHashAggregator_Process_770 = localHashAggregator_Process_770_ptr.get();
        ULONG localHashAggregator_Process_770_count = 1;
        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_769_Data0>> delegate_localHashAggregator_Process_770_ptr (new OperatorDelegate<GetSStream_769_Data0>(OperatorDelegate<GetSStream_769_Data0>::FromOperator(localHashAggregator_Process_770)));
        OperatorDelegate<GetSStream_769_Data0> * delegate_localHashAggregator_Process_770 = delegate_localHashAggregator_Process_770_ptr.get();
        ULONG delegate_localHashAggregator_Process_770_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_769_Data0> SorterType_Process_771;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_771> sorter_Process_771_ptr (new SorterType_Process_771(delegate_localHashAggregator_Process_770, &MKQSort<GetSStream_769_Data0>::Sort<KeyComparePolicy<GetSStream_769_Data0, UID_Process_771>, (sizeof(GetSStream_769_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_769_Data0>::CreateDelegate<UID_Process_771>(), false, UID_Process_771));
        SorterType_Process_771 * sorter_Process_771 = sorter_Process_771_ptr.get();
        ULONG sorter_Process_771_count = 1;
        // Define stream aggregator type
        typedef StreamAggregator<SorterType_Process_771, GetSStream_769_Data0, UID_Process_772> StreamAggregatorType_Process_772;
        // Construct operator and initialize it.
        unique_ptr<StreamAggregatorType_Process_772> streamAggregator_Process_772_ptr (new StreamAggregatorType_Process_772(sorter_Process_771, false, UID_Process_772));
        StreamAggregatorType_Process_772 * streamAggregator_Process_772 = streamAggregator_Process_772_ptr.get();
        ULONG streamAggregator_Process_772_count = 1;
        // Define outputer type
        typedef Outputer<StreamAggregatorType_Process_772, BinaryOutputPolicy<typename StreamAggregatorType_Process_772::Schema>, BinaryOutputStream, false> OutputerType1_SV385_Extract;
        // Construct operator and initialize it
        unique_ptr<OutputerType1_SV385_Extract> outputer_SV385_Extract_out0_ptr(new OutputerType1_SV385_Extract(streamAggregator_Process_772, outputFileNames[0], x_outputBufSize, x_outputBufCnt, UID_SV385_Extract_out0));
        OutputerType1_SV385_Extract * outputer_SV385_Extract_out0 = outputer_SV385_Extract_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV385_Extract_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            StreamAggregatorType_Process_772::Schema row;
            outputer_SV385_Extract_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV385_Extract_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV385_Extract_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV385_Extract
#pragma region SV386_Combine
#if defined(COMPILE_SV386_COMBINE) || defined(COMPILE_ALL_VERTICES)

    template<> 
    class KeyComparePolicy<GetSStream_0_Data0,UID_Process_776>
    {
    public:
        struct KeyStruct
        {
            ScopeDateTime m_PreciseTimeStamp;
            ScopeDateTime m_StartTime;
            ScopeDateTime m_EndTime;
            FString m_LogicalContainerId;
            FString m_RoleInstanceName;
            FString m_TenantName;
            FString m_RoleInstanceId;
            FString m_TenantId;
            FString m_NodeId;
            FString m_ContainerId;
            FString m_DataCenter;
            FString m_Cluster;
            FString m_RoleType;
            FString m_TransitionSignature;
            FString m_CADCategory;
            FString m_RCAEngineCategory;
            FString m_RCALevel1;
            FString m_RCALevel2;
            double m_Duration;
            FString m_RCA;
            FString m_EventList;

            KeyStruct(GetSStream_0_Data0 & c) :
                m_PreciseTimeStamp(c.m_PreciseTimeStamp),
                m_StartTime(c.m_StartTime),
                m_EndTime(c.m_EndTime),
                m_LogicalContainerId(c.m_LogicalContainerId),
                m_RoleInstanceName(c.m_RoleInstanceName),
                m_TenantName(c.m_TenantName),
                m_RoleInstanceId(c.m_RoleInstanceId),
                m_TenantId(c.m_TenantId),
                m_NodeId(c.m_NodeId),
                m_ContainerId(c.m_ContainerId),
                m_DataCenter(c.m_DataCenter),
                m_Cluster(c.m_Cluster),
                m_RoleType(c.m_RoleType),
                m_TransitionSignature(c.m_TransitionSignature),
                m_CADCategory(c.m_CADCategory),
                m_RCAEngineCategory(c.m_RCAEngineCategory),
                m_RCALevel1(c.m_RCALevel1),
                m_RCALevel2(c.m_RCALevel2),
                m_Duration(c.m_Duration),
                m_RCA(c.m_RCA),
                m_EventList(c.m_EventList)
            {
            }

            KeyStruct(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
                m_PreciseTimeStamp(const_cast<GetSStream_0_Data0&>(c).m_PreciseTimeStamp),
                m_StartTime(const_cast<GetSStream_0_Data0&>(c).m_StartTime),
                m_EndTime(const_cast<GetSStream_0_Data0&>(c).m_EndTime),
                m_LogicalContainerId(const_cast<GetSStream_0_Data0&>(c).m_LogicalContainerId, alloc),
                m_RoleInstanceName(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceName, alloc),
                m_TenantName(const_cast<GetSStream_0_Data0&>(c).m_TenantName, alloc),
                m_RoleInstanceId(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceId, alloc),
                m_TenantId(const_cast<GetSStream_0_Data0&>(c).m_TenantId, alloc),
                m_NodeId(const_cast<GetSStream_0_Data0&>(c).m_NodeId, alloc),
                m_ContainerId(const_cast<GetSStream_0_Data0&>(c).m_ContainerId, alloc),
                m_DataCenter(const_cast<GetSStream_0_Data0&>(c).m_DataCenter, alloc),
                m_Cluster(const_cast<GetSStream_0_Data0&>(c).m_Cluster, alloc),
                m_RoleType(const_cast<GetSStream_0_Data0&>(c).m_RoleType, alloc),
                m_TransitionSignature(const_cast<GetSStream_0_Data0&>(c).m_TransitionSignature, alloc),
                m_CADCategory(const_cast<GetSStream_0_Data0&>(c).m_CADCategory, alloc),
                m_RCAEngineCategory(const_cast<GetSStream_0_Data0&>(c).m_RCAEngineCategory, alloc),
                m_RCALevel1(const_cast<GetSStream_0_Data0&>(c).m_RCALevel1, alloc),
                m_RCALevel2(const_cast<GetSStream_0_Data0&>(c).m_RCALevel2, alloc),
                m_Duration(const_cast<GetSStream_0_Data0&>(c).m_Duration),
                m_RCA(const_cast<GetSStream_0_Data0&>(c).m_RCA, alloc),
                m_EventList(const_cast<GetSStream_0_Data0&>(c).m_EventList, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_PreciseTimeStamp(c.m_PreciseTimeStamp),
                m_StartTime(c.m_StartTime),
                m_EndTime(c.m_EndTime),
                m_LogicalContainerId(c.m_LogicalContainerId),
                m_RoleInstanceName(c.m_RoleInstanceName),
                m_TenantName(c.m_TenantName),
                m_RoleInstanceId(c.m_RoleInstanceId),
                m_TenantId(c.m_TenantId),
                m_NodeId(c.m_NodeId),
                m_ContainerId(c.m_ContainerId),
                m_DataCenter(c.m_DataCenter),
                m_Cluster(c.m_Cluster),
                m_RoleType(c.m_RoleType),
                m_TransitionSignature(c.m_TransitionSignature),
                m_CADCategory(c.m_CADCategory),
                m_RCAEngineCategory(c.m_RCAEngineCategory),
                m_RCALevel1(c.m_RCALevel1),
                m_RCALevel2(c.m_RCALevel2),
                m_Duration(c.m_Duration),
                m_RCA(c.m_RCA),
                m_EventList(c.m_EventList)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_PreciseTimeStamp(const_cast<KeyStruct&>(c).m_PreciseTimeStamp),
                m_StartTime(const_cast<KeyStruct&>(c).m_StartTime),
                m_EndTime(const_cast<KeyStruct&>(c).m_EndTime),
                m_LogicalContainerId(const_cast<KeyStruct&>(c).m_LogicalContainerId, alloc),
                m_RoleInstanceName(const_cast<KeyStruct&>(c).m_RoleInstanceName, alloc),
                m_TenantName(const_cast<KeyStruct&>(c).m_TenantName, alloc),
                m_RoleInstanceId(const_cast<KeyStruct&>(c).m_RoleInstanceId, alloc),
                m_TenantId(const_cast<KeyStruct&>(c).m_TenantId, alloc),
                m_NodeId(const_cast<KeyStruct&>(c).m_NodeId, alloc),
                m_ContainerId(const_cast<KeyStruct&>(c).m_ContainerId, alloc),
                m_DataCenter(const_cast<KeyStruct&>(c).m_DataCenter, alloc),
                m_Cluster(const_cast<KeyStruct&>(c).m_Cluster, alloc),
                m_RoleType(const_cast<KeyStruct&>(c).m_RoleType, alloc),
                m_TransitionSignature(const_cast<KeyStruct&>(c).m_TransitionSignature, alloc),
                m_CADCategory(const_cast<KeyStruct&>(c).m_CADCategory, alloc),
                m_RCAEngineCategory(const_cast<KeyStruct&>(c).m_RCAEngineCategory, alloc),
                m_RCALevel1(const_cast<KeyStruct&>(c).m_RCALevel1, alloc),
                m_RCALevel2(const_cast<KeyStruct&>(c).m_RCALevel2, alloc),
                m_Duration(const_cast<KeyStruct&>(c).m_Duration),
                m_RCA(const_cast<KeyStruct&>(c).m_RCA, alloc),
                m_EventList(const_cast<KeyStruct&>(c).m_EventList, alloc)
            {
            }

            KeyStruct() :
                m_PreciseTimeStamp(),
                m_StartTime(),
                m_EndTime(),
                m_LogicalContainerId(),
                m_RoleInstanceName(),
                m_TenantName(),
                m_RoleInstanceId(),
                m_TenantId(),
                m_NodeId(),
                m_ContainerId(),
                m_DataCenter(),
                m_Cluster(),
                m_RoleType(),
                m_TransitionSignature(),
                m_CADCategory(),
                m_RCAEngineCategory(),
                m_RCALevel1(),
                m_RCALevel2(),
                m_Duration(0.0),
                m_RCA(),
                m_EventList()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tPreciseTimeStamp:\t" << row.m_PreciseTimeStamp << endl;
                os << "\tStartTime:\t" << row.m_StartTime << endl;
                os << "\tEndTime:\t" << row.m_EndTime << endl;
                os << "\tLogicalContainerId:\t" << row.m_LogicalContainerId << endl;
                os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
                os << "\tTenantName:\t" << row.m_TenantName << endl;
                os << "\tRoleInstanceId:\t" << row.m_RoleInstanceId << endl;
                os << "\tTenantId:\t" << row.m_TenantId << endl;
                os << "\tNodeId:\t" << row.m_NodeId << endl;
                os << "\tContainerId:\t" << row.m_ContainerId << endl;
                os << "\tDataCenter:\t" << row.m_DataCenter << endl;
                os << "\tCluster:\t" << row.m_Cluster << endl;
                os << "\tRoleType:\t" << row.m_RoleType << endl;
                os << "\tTransitionSignature:\t" << row.m_TransitionSignature << endl;
                os << "\tCADCategory:\t" << row.m_CADCategory << endl;
                os << "\tRCAEngineCategory:\t" << row.m_RCAEngineCategory << endl;
                os << "\tRCALevel1:\t" << row.m_RCALevel1 << endl;
                os << "\tRCALevel2:\t" << row.m_RCALevel2 << endl;
                os << "\tDuration:\t" << row.m_Duration << endl;
                os << "\tRCA:\t" << row.m_RCA << endl;
                os << "\tEventList:\t" << row.m_EventList << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_0_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_PreciseTimeStamp, key.m_PreciseTimeStamp)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_StartTime, key.m_StartTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_EndTime, key.m_EndTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_LogicalContainerId, key.m_LogicalContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceName, key.m_RoleInstanceName)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TenantName, key.m_TenantName)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceId, key.m_RoleInstanceId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TenantId, key.m_TenantId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_NodeId, key.m_NodeId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_ContainerId, key.m_ContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_DataCenter, key.m_DataCenter)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_Cluster, key.m_Cluster)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleType, key.m_RoleType)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TransitionSignature, key.m_TransitionSignature)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_CADCategory, key.m_CADCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCAEngineCategory, key.m_RCAEngineCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCALevel1, key.m_RCALevel1)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCALevel2, key.m_RCALevel2)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_Duration, key.m_Duration)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCA, key.m_RCA)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_EventList, key.m_EventList)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_0_Data0 * n1, GetSStream_0_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_PreciseTimeStamp, (*n2).m_PreciseTimeStamp)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_StartTime, (*n2).m_StartTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_EndTime, (*n2).m_EndTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_LogicalContainerId, (*n2).m_LogicalContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_RoleInstanceName)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TenantName, (*n2).m_TenantName)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceId, (*n2).m_RoleInstanceId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TenantId, (*n2).m_TenantId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_NodeId, (*n2).m_NodeId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_ContainerId, (*n2).m_ContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_DataCenter, (*n2).m_DataCenter)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_Cluster, (*n2).m_Cluster)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleType, (*n2).m_RoleType)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TransitionSignature, (*n2).m_TransitionSignature)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_CADCategory, (*n2).m_CADCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCAEngineCategory, (*n2).m_RCAEngineCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCALevel1, (*n2).m_RCALevel1)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCALevel2, (*n2).m_RCALevel2)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_Duration, (*n2).m_Duration)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCA, (*n2).m_RCA)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_EventList, (*n2).m_EventList)) != 0)
                return r;
            return r;
        }

    };

#if defined(COMPILE_NATIVE)
    template<> 
    class AggregationPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_776> 
    {
    public:
        
        AggregationPolicy()
            :
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST("FIRST_PreciseTimeStamp_PreciseTimeStamp"),
            m_StartTime_StartTime_FIRST("FIRST_StartTime_StartTime"),
            m_EndTime_EndTime_FIRST("FIRST_EndTime_EndTime"),
            m_LogicalContainerId_LogicalContainerId_FIRST("FIRST_LogicalContainerId_LogicalContainerId"),
            m_RoleInstanceName_RoleInstanceName_FIRST("FIRST_RoleInstanceName_RoleInstanceName"),
            m_TenantName_TenantName_FIRST("FIRST_TenantName_TenantName"),
            m_RoleInstanceId_RoleInstanceId_FIRST("FIRST_RoleInstanceId_RoleInstanceId"),
            m_TenantId_TenantId_FIRST("FIRST_TenantId_TenantId"),
            m_NodeId_NodeId_FIRST("FIRST_NodeId_NodeId"),
            m_ContainerId_ContainerId_FIRST("FIRST_ContainerId_ContainerId"),
            m_DataCenter_DataCenter_FIRST("FIRST_DataCenter_DataCenter"),
            m_Cluster_Cluster_FIRST("FIRST_Cluster_Cluster"),
            m_RoleType_RoleType_FIRST("FIRST_RoleType_RoleType"),
            m_TransitionSignature_TransitionSignature_FIRST("FIRST_TransitionSignature_TransitionSignature"),
            m_CADCategory_CADCategory_FIRST("FIRST_CADCategory_CADCategory"),
            m_RCAEngineCategory_RCAEngineCategory_FIRST("FIRST_RCAEngineCategory_RCAEngineCategory"),
            m_RCALevel1_RCALevel1_FIRST("FIRST_RCALevel1_RCALevel1"),
            m_RCALevel2_RCALevel2_FIRST("FIRST_RCALevel2_RCALevel2"),
            m_Duration_Duration_FIRST("FIRST_Duration_Duration"),
            m_RCA_RCA_FIRST("FIRST_RCA_RCA"),
            m_EventList_EventList_FIRST("FIRST_EventList_EventList")
        {
        }
        
        // begin key range (copy grouping key to output)
        void BeginKey(KeyComparePolicy<GetSStream_0_Data0,UID_Process_776>::KeyType * input, GetSStream_0_Data0 * output)
        {
            (*output).m_PreciseTimeStamp = (*input).m_PreciseTimeStamp;
            (*output).m_StartTime = (*input).m_StartTime;
            (*output).m_EndTime = (*input).m_EndTime;
            (*output).m_LogicalContainerId = (*input).m_LogicalContainerId;
            (*output).m_RoleInstanceName = (*input).m_RoleInstanceName;
            (*output).m_TenantName = (*input).m_TenantName;
            (*output).m_RoleInstanceId = (*input).m_RoleInstanceId;
            (*output).m_TenantId = (*input).m_TenantId;
            (*output).m_NodeId = (*input).m_NodeId;
            (*output).m_ContainerId = (*input).m_ContainerId;
            (*output).m_DataCenter = (*input).m_DataCenter;
            (*output).m_Cluster = (*input).m_Cluster;
            (*output).m_RoleType = (*input).m_RoleType;
            (*output).m_TransitionSignature = (*input).m_TransitionSignature;
            (*output).m_CADCategory = (*input).m_CADCategory;
            (*output).m_RCAEngineCategory = (*input).m_RCAEngineCategory;
            (*output).m_RCALevel1 = (*input).m_RCALevel1;
            (*output).m_RCALevel2 = (*input).m_RCALevel2;
            (*output).m_Duration = (*input).m_Duration;
            (*output).m_RCA = (*input).m_RCA;
            (*output).m_EventList = (*input).m_EventList;
        }

        // process input row, called for each row in key range
        void AddRow(GetSStream_0_Data0 * input)
        {
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST.Add((*input).m_PreciseTimeStamp);
            m_StartTime_StartTime_FIRST.Add((*input).m_StartTime);
            m_EndTime_EndTime_FIRST.Add((*input).m_EndTime);
            m_LogicalContainerId_LogicalContainerId_FIRST.Add((*input).m_LogicalContainerId);
            m_RoleInstanceName_RoleInstanceName_FIRST.Add((*input).m_RoleInstanceName);
            m_TenantName_TenantName_FIRST.Add((*input).m_TenantName);
            m_RoleInstanceId_RoleInstanceId_FIRST.Add((*input).m_RoleInstanceId);
            m_TenantId_TenantId_FIRST.Add((*input).m_TenantId);
            m_NodeId_NodeId_FIRST.Add((*input).m_NodeId);
            m_ContainerId_ContainerId_FIRST.Add((*input).m_ContainerId);
            m_DataCenter_DataCenter_FIRST.Add((*input).m_DataCenter);
            m_Cluster_Cluster_FIRST.Add((*input).m_Cluster);
            m_RoleType_RoleType_FIRST.Add((*input).m_RoleType);
            m_TransitionSignature_TransitionSignature_FIRST.Add((*input).m_TransitionSignature);
            m_CADCategory_CADCategory_FIRST.Add((*input).m_CADCategory);
            m_RCAEngineCategory_RCAEngineCategory_FIRST.Add((*input).m_RCAEngineCategory);
            m_RCALevel1_RCALevel1_FIRST.Add((*input).m_RCALevel1);
            m_RCALevel2_RCALevel2_FIRST.Add((*input).m_RCALevel2);
            m_Duration_Duration_FIRST.Add((*input).m_Duration);
            m_RCA_RCA_FIRST.Add((*input).m_RCA);
            m_EventList_EventList_FIRST.Add((*input).m_EventList);
        }

        // write aggregated data, called after key is completely scanned
        void Aggregate(GetSStream_0_Data0 * output)
        {
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST.Aggregate(&(*output).m_PreciseTimeStamp);
            m_StartTime_StartTime_FIRST.Aggregate(&(*output).m_StartTime);
            m_EndTime_EndTime_FIRST.Aggregate(&(*output).m_EndTime);
            m_LogicalContainerId_LogicalContainerId_FIRST.Aggregate(&(*output).m_LogicalContainerId);
            m_RoleInstanceName_RoleInstanceName_FIRST.Aggregate(&(*output).m_RoleInstanceName);
            m_TenantName_TenantName_FIRST.Aggregate(&(*output).m_TenantName);
            m_RoleInstanceId_RoleInstanceId_FIRST.Aggregate(&(*output).m_RoleInstanceId);
            m_TenantId_TenantId_FIRST.Aggregate(&(*output).m_TenantId);
            m_NodeId_NodeId_FIRST.Aggregate(&(*output).m_NodeId);
            m_ContainerId_ContainerId_FIRST.Aggregate(&(*output).m_ContainerId);
            m_DataCenter_DataCenter_FIRST.Aggregate(&(*output).m_DataCenter);
            m_Cluster_Cluster_FIRST.Aggregate(&(*output).m_Cluster);
            m_RoleType_RoleType_FIRST.Aggregate(&(*output).m_RoleType);
            m_TransitionSignature_TransitionSignature_FIRST.Aggregate(&(*output).m_TransitionSignature);
            m_CADCategory_CADCategory_FIRST.Aggregate(&(*output).m_CADCategory);
            m_RCAEngineCategory_RCAEngineCategory_FIRST.Aggregate(&(*output).m_RCAEngineCategory);
            m_RCALevel1_RCALevel1_FIRST.Aggregate(&(*output).m_RCALevel1);
            m_RCALevel2_RCALevel2_FIRST.Aggregate(&(*output).m_RCALevel2);
            m_Duration_Duration_FIRST.Aggregate(&(*output).m_Duration);
            m_RCA_RCA_FIRST.Aggregate(&(*output).m_RCA);
            m_EventList_EventList_FIRST.Aggregate(&(*output).m_EventList);
        }

        // write aggregated data
        void GetValue(GetSStream_0_Data0 * output)
        {
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST.GetValue(&(*output).m_PreciseTimeStamp);
            m_StartTime_StartTime_FIRST.GetValue(&(*output).m_StartTime);
            m_EndTime_EndTime_FIRST.GetValue(&(*output).m_EndTime);
            m_LogicalContainerId_LogicalContainerId_FIRST.GetValue(&(*output).m_LogicalContainerId);
            m_RoleInstanceName_RoleInstanceName_FIRST.GetValue(&(*output).m_RoleInstanceName);
            m_TenantName_TenantName_FIRST.GetValue(&(*output).m_TenantName);
            m_RoleInstanceId_RoleInstanceId_FIRST.GetValue(&(*output).m_RoleInstanceId);
            m_TenantId_TenantId_FIRST.GetValue(&(*output).m_TenantId);
            m_NodeId_NodeId_FIRST.GetValue(&(*output).m_NodeId);
            m_ContainerId_ContainerId_FIRST.GetValue(&(*output).m_ContainerId);
            m_DataCenter_DataCenter_FIRST.GetValue(&(*output).m_DataCenter);
            m_Cluster_Cluster_FIRST.GetValue(&(*output).m_Cluster);
            m_RoleType_RoleType_FIRST.GetValue(&(*output).m_RoleType);
            m_TransitionSignature_TransitionSignature_FIRST.GetValue(&(*output).m_TransitionSignature);
            m_CADCategory_CADCategory_FIRST.GetValue(&(*output).m_CADCategory);
            m_RCAEngineCategory_RCAEngineCategory_FIRST.GetValue(&(*output).m_RCAEngineCategory);
            m_RCALevel1_RCALevel1_FIRST.GetValue(&(*output).m_RCALevel1);
            m_RCALevel2_RCALevel2_FIRST.GetValue(&(*output).m_RCALevel2);
            m_Duration_Duration_FIRST.GetValue(&(*output).m_Duration);
            m_RCA_RCA_FIRST.GetValue(&(*output).m_RCA);
            m_EventList_EventList_FIRST.GetValue(&(*output).m_EventList);
        }

        // reset for new key
        void Reset()
        {
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST.Reset();
            m_StartTime_StartTime_FIRST.Reset();
            m_EndTime_EndTime_FIRST.Reset();
            m_LogicalContainerId_LogicalContainerId_FIRST.Reset();
            m_RoleInstanceName_RoleInstanceName_FIRST.Reset();
            m_TenantName_TenantName_FIRST.Reset();
            m_RoleInstanceId_RoleInstanceId_FIRST.Reset();
            m_TenantId_TenantId_FIRST.Reset();
            m_NodeId_NodeId_FIRST.Reset();
            m_ContainerId_ContainerId_FIRST.Reset();
            m_DataCenter_DataCenter_FIRST.Reset();
            m_Cluster_Cluster_FIRST.Reset();
            m_RoleType_RoleType_FIRST.Reset();
            m_TransitionSignature_TransitionSignature_FIRST.Reset();
            m_CADCategory_CADCategory_FIRST.Reset();
            m_RCAEngineCategory_RCAEngineCategory_FIRST.Reset();
            m_RCALevel1_RCALevel1_FIRST.Reset();
            m_RCALevel2_RCALevel2_FIRST.Reset();
            m_Duration_Duration_FIRST.Reset();
            m_RCA_RCA_FIRST.Reset();
            m_EventList_EventList_FIRST.Reset();
        }

        // store statistics
        void WriteRuntimeStats(TreeNode & root)
        {
            m_PreciseTimeStamp_PreciseTimeStamp_FIRST.WriteRuntimeStats(root);
            m_StartTime_StartTime_FIRST.WriteRuntimeStats(root);
            m_EndTime_EndTime_FIRST.WriteRuntimeStats(root);
            m_LogicalContainerId_LogicalContainerId_FIRST.WriteRuntimeStats(root);
            m_RoleInstanceName_RoleInstanceName_FIRST.WriteRuntimeStats(root);
            m_TenantName_TenantName_FIRST.WriteRuntimeStats(root);
            m_RoleInstanceId_RoleInstanceId_FIRST.WriteRuntimeStats(root);
            m_TenantId_TenantId_FIRST.WriteRuntimeStats(root);
            m_NodeId_NodeId_FIRST.WriteRuntimeStats(root);
            m_ContainerId_ContainerId_FIRST.WriteRuntimeStats(root);
            m_DataCenter_DataCenter_FIRST.WriteRuntimeStats(root);
            m_Cluster_Cluster_FIRST.WriteRuntimeStats(root);
            m_RoleType_RoleType_FIRST.WriteRuntimeStats(root);
            m_TransitionSignature_TransitionSignature_FIRST.WriteRuntimeStats(root);
            m_CADCategory_CADCategory_FIRST.WriteRuntimeStats(root);
            m_RCAEngineCategory_RCAEngineCategory_FIRST.WriteRuntimeStats(root);
            m_RCALevel1_RCALevel1_FIRST.WriteRuntimeStats(root);
            m_RCALevel2_RCALevel2_FIRST.WriteRuntimeStats(root);
            m_Duration_Duration_FIRST.WriteRuntimeStats(root);
            m_RCA_RCA_FIRST.WriteRuntimeStats(root);
            m_EventList_EventList_FIRST.WriteRuntimeStats(root);
        }

    private:
        Aggregate_FIRST<ScopeDateTime> m_PreciseTimeStamp_PreciseTimeStamp_FIRST;
        Aggregate_FIRST<ScopeDateTime> m_StartTime_StartTime_FIRST;
        Aggregate_FIRST<ScopeDateTime> m_EndTime_EndTime_FIRST;
        Aggregate_FIRST<FString> m_LogicalContainerId_LogicalContainerId_FIRST;
        Aggregate_FIRST<FString> m_RoleInstanceName_RoleInstanceName_FIRST;
        Aggregate_FIRST<FString> m_TenantName_TenantName_FIRST;
        Aggregate_FIRST<FString> m_RoleInstanceId_RoleInstanceId_FIRST;
        Aggregate_FIRST<FString> m_TenantId_TenantId_FIRST;
        Aggregate_FIRST<FString> m_NodeId_NodeId_FIRST;
        Aggregate_FIRST<FString> m_ContainerId_ContainerId_FIRST;
        Aggregate_FIRST<FString> m_DataCenter_DataCenter_FIRST;
        Aggregate_FIRST<FString> m_Cluster_Cluster_FIRST;
        Aggregate_FIRST<FString> m_RoleType_RoleType_FIRST;
        Aggregate_FIRST<FString> m_TransitionSignature_TransitionSignature_FIRST;
        Aggregate_FIRST<FString> m_CADCategory_CADCategory_FIRST;
        Aggregate_FIRST<FString> m_RCAEngineCategory_RCAEngineCategory_FIRST;
        Aggregate_FIRST<FString> m_RCALevel1_RCALevel1_FIRST;
        Aggregate_FIRST<FString> m_RCALevel2_RCALevel2_FIRST;
        Aggregate_FIRST<double> m_Duration_Duration_FIRST;
        Aggregate_FIRST<FString> m_RCA_RCA_FIRST;
        Aggregate_FIRST<FString> m_EventList_EventList_FIRST;
    };
#endif // defined(COMPILE_NATIVE)

    template<> 
    class KeyComparePolicy<GetSStream_0_Data0,UID_Process_775>
    {
    public:
        struct KeyStruct
        {
            ScopeDateTime m_PreciseTimeStamp;
            ScopeDateTime m_StartTime;
            ScopeDateTime m_EndTime;
            FString m_LogicalContainerId;
            FString m_RoleInstanceName;
            FString m_TenantName;
            FString m_RoleInstanceId;
            FString m_TenantId;
            FString m_NodeId;
            FString m_ContainerId;
            FString m_DataCenter;
            FString m_Cluster;
            FString m_RoleType;
            FString m_TransitionSignature;
            FString m_CADCategory;
            FString m_RCAEngineCategory;
            FString m_RCALevel1;
            FString m_RCALevel2;
            double m_Duration;
            FString m_RCA;
            FString m_EventList;

            KeyStruct(GetSStream_0_Data0 & c) :
                m_PreciseTimeStamp(c.m_PreciseTimeStamp),
                m_StartTime(c.m_StartTime),
                m_EndTime(c.m_EndTime),
                m_LogicalContainerId(c.m_LogicalContainerId),
                m_RoleInstanceName(c.m_RoleInstanceName),
                m_TenantName(c.m_TenantName),
                m_RoleInstanceId(c.m_RoleInstanceId),
                m_TenantId(c.m_TenantId),
                m_NodeId(c.m_NodeId),
                m_ContainerId(c.m_ContainerId),
                m_DataCenter(c.m_DataCenter),
                m_Cluster(c.m_Cluster),
                m_RoleType(c.m_RoleType),
                m_TransitionSignature(c.m_TransitionSignature),
                m_CADCategory(c.m_CADCategory),
                m_RCAEngineCategory(c.m_RCAEngineCategory),
                m_RCALevel1(c.m_RCALevel1),
                m_RCALevel2(c.m_RCALevel2),
                m_Duration(c.m_Duration),
                m_RCA(c.m_RCA),
                m_EventList(c.m_EventList)
            {
            }

            KeyStruct(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
                m_PreciseTimeStamp(const_cast<GetSStream_0_Data0&>(c).m_PreciseTimeStamp),
                m_StartTime(const_cast<GetSStream_0_Data0&>(c).m_StartTime),
                m_EndTime(const_cast<GetSStream_0_Data0&>(c).m_EndTime),
                m_LogicalContainerId(const_cast<GetSStream_0_Data0&>(c).m_LogicalContainerId, alloc),
                m_RoleInstanceName(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceName, alloc),
                m_TenantName(const_cast<GetSStream_0_Data0&>(c).m_TenantName, alloc),
                m_RoleInstanceId(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceId, alloc),
                m_TenantId(const_cast<GetSStream_0_Data0&>(c).m_TenantId, alloc),
                m_NodeId(const_cast<GetSStream_0_Data0&>(c).m_NodeId, alloc),
                m_ContainerId(const_cast<GetSStream_0_Data0&>(c).m_ContainerId, alloc),
                m_DataCenter(const_cast<GetSStream_0_Data0&>(c).m_DataCenter, alloc),
                m_Cluster(const_cast<GetSStream_0_Data0&>(c).m_Cluster, alloc),
                m_RoleType(const_cast<GetSStream_0_Data0&>(c).m_RoleType, alloc),
                m_TransitionSignature(const_cast<GetSStream_0_Data0&>(c).m_TransitionSignature, alloc),
                m_CADCategory(const_cast<GetSStream_0_Data0&>(c).m_CADCategory, alloc),
                m_RCAEngineCategory(const_cast<GetSStream_0_Data0&>(c).m_RCAEngineCategory, alloc),
                m_RCALevel1(const_cast<GetSStream_0_Data0&>(c).m_RCALevel1, alloc),
                m_RCALevel2(const_cast<GetSStream_0_Data0&>(c).m_RCALevel2, alloc),
                m_Duration(const_cast<GetSStream_0_Data0&>(c).m_Duration),
                m_RCA(const_cast<GetSStream_0_Data0&>(c).m_RCA, alloc),
                m_EventList(const_cast<GetSStream_0_Data0&>(c).m_EventList, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_PreciseTimeStamp(c.m_PreciseTimeStamp),
                m_StartTime(c.m_StartTime),
                m_EndTime(c.m_EndTime),
                m_LogicalContainerId(c.m_LogicalContainerId),
                m_RoleInstanceName(c.m_RoleInstanceName),
                m_TenantName(c.m_TenantName),
                m_RoleInstanceId(c.m_RoleInstanceId),
                m_TenantId(c.m_TenantId),
                m_NodeId(c.m_NodeId),
                m_ContainerId(c.m_ContainerId),
                m_DataCenter(c.m_DataCenter),
                m_Cluster(c.m_Cluster),
                m_RoleType(c.m_RoleType),
                m_TransitionSignature(c.m_TransitionSignature),
                m_CADCategory(c.m_CADCategory),
                m_RCAEngineCategory(c.m_RCAEngineCategory),
                m_RCALevel1(c.m_RCALevel1),
                m_RCALevel2(c.m_RCALevel2),
                m_Duration(c.m_Duration),
                m_RCA(c.m_RCA),
                m_EventList(c.m_EventList)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_PreciseTimeStamp(const_cast<KeyStruct&>(c).m_PreciseTimeStamp),
                m_StartTime(const_cast<KeyStruct&>(c).m_StartTime),
                m_EndTime(const_cast<KeyStruct&>(c).m_EndTime),
                m_LogicalContainerId(const_cast<KeyStruct&>(c).m_LogicalContainerId, alloc),
                m_RoleInstanceName(const_cast<KeyStruct&>(c).m_RoleInstanceName, alloc),
                m_TenantName(const_cast<KeyStruct&>(c).m_TenantName, alloc),
                m_RoleInstanceId(const_cast<KeyStruct&>(c).m_RoleInstanceId, alloc),
                m_TenantId(const_cast<KeyStruct&>(c).m_TenantId, alloc),
                m_NodeId(const_cast<KeyStruct&>(c).m_NodeId, alloc),
                m_ContainerId(const_cast<KeyStruct&>(c).m_ContainerId, alloc),
                m_DataCenter(const_cast<KeyStruct&>(c).m_DataCenter, alloc),
                m_Cluster(const_cast<KeyStruct&>(c).m_Cluster, alloc),
                m_RoleType(const_cast<KeyStruct&>(c).m_RoleType, alloc),
                m_TransitionSignature(const_cast<KeyStruct&>(c).m_TransitionSignature, alloc),
                m_CADCategory(const_cast<KeyStruct&>(c).m_CADCategory, alloc),
                m_RCAEngineCategory(const_cast<KeyStruct&>(c).m_RCAEngineCategory, alloc),
                m_RCALevel1(const_cast<KeyStruct&>(c).m_RCALevel1, alloc),
                m_RCALevel2(const_cast<KeyStruct&>(c).m_RCALevel2, alloc),
                m_Duration(const_cast<KeyStruct&>(c).m_Duration),
                m_RCA(const_cast<KeyStruct&>(c).m_RCA, alloc),
                m_EventList(const_cast<KeyStruct&>(c).m_EventList, alloc)
            {
            }

            KeyStruct() :
                m_PreciseTimeStamp(),
                m_StartTime(),
                m_EndTime(),
                m_LogicalContainerId(),
                m_RoleInstanceName(),
                m_TenantName(),
                m_RoleInstanceId(),
                m_TenantId(),
                m_NodeId(),
                m_ContainerId(),
                m_DataCenter(),
                m_Cluster(),
                m_RoleType(),
                m_TransitionSignature(),
                m_CADCategory(),
                m_RCAEngineCategory(),
                m_RCALevel1(),
                m_RCALevel2(),
                m_Duration(0.0),
                m_RCA(),
                m_EventList()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tPreciseTimeStamp:\t" << row.m_PreciseTimeStamp << endl;
                os << "\tStartTime:\t" << row.m_StartTime << endl;
                os << "\tEndTime:\t" << row.m_EndTime << endl;
                os << "\tLogicalContainerId:\t" << row.m_LogicalContainerId << endl;
                os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
                os << "\tTenantName:\t" << row.m_TenantName << endl;
                os << "\tRoleInstanceId:\t" << row.m_RoleInstanceId << endl;
                os << "\tTenantId:\t" << row.m_TenantId << endl;
                os << "\tNodeId:\t" << row.m_NodeId << endl;
                os << "\tContainerId:\t" << row.m_ContainerId << endl;
                os << "\tDataCenter:\t" << row.m_DataCenter << endl;
                os << "\tCluster:\t" << row.m_Cluster << endl;
                os << "\tRoleType:\t" << row.m_RoleType << endl;
                os << "\tTransitionSignature:\t" << row.m_TransitionSignature << endl;
                os << "\tCADCategory:\t" << row.m_CADCategory << endl;
                os << "\tRCAEngineCategory:\t" << row.m_RCAEngineCategory << endl;
                os << "\tRCALevel1:\t" << row.m_RCALevel1 << endl;
                os << "\tRCALevel2:\t" << row.m_RCALevel2 << endl;
                os << "\tDuration:\t" << row.m_Duration << endl;
                os << "\tRCA:\t" << row.m_RCA << endl;
                os << "\tEventList:\t" << row.m_EventList << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_0_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_PreciseTimeStamp, key.m_PreciseTimeStamp)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_StartTime, key.m_StartTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_EndTime, key.m_EndTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_LogicalContainerId, key.m_LogicalContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceName, key.m_RoleInstanceName)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TenantName, key.m_TenantName)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceId, key.m_RoleInstanceId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TenantId, key.m_TenantId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_NodeId, key.m_NodeId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_ContainerId, key.m_ContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_DataCenter, key.m_DataCenter)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_Cluster, key.m_Cluster)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RoleType, key.m_RoleType)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_TransitionSignature, key.m_TransitionSignature)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_CADCategory, key.m_CADCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCAEngineCategory, key.m_RCAEngineCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCALevel1, key.m_RCALevel1)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCALevel2, key.m_RCALevel2)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_Duration, key.m_Duration)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_RCA, key.m_RCA)) != 0)
                return r;
            if ((r = ScopeTypeCompare(row.m_EventList, key.m_EventList)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_0_Data0 * n1, GetSStream_0_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_PreciseTimeStamp, (*n2).m_PreciseTimeStamp)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_StartTime, (*n2).m_StartTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_EndTime, (*n2).m_EndTime)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_LogicalContainerId, (*n2).m_LogicalContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_RoleInstanceName)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TenantName, (*n2).m_TenantName)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceId, (*n2).m_RoleInstanceId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TenantId, (*n2).m_TenantId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_NodeId, (*n2).m_NodeId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_ContainerId, (*n2).m_ContainerId)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_DataCenter, (*n2).m_DataCenter)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_Cluster, (*n2).m_Cluster)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RoleType, (*n2).m_RoleType)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_TransitionSignature, (*n2).m_TransitionSignature)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_CADCategory, (*n2).m_CADCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCAEngineCategory, (*n2).m_RCAEngineCategory)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCALevel1, (*n2).m_RCALevel1)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCALevel2, (*n2).m_RCALevel2)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_Duration, (*n2).m_Duration)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_RCA, (*n2).m_RCA)) != 0)
                return r;
            if ((r = ScopeTypeCompare((*n1).m_EventList, (*n2).m_EventList)) != 0)
                return r;
            return r;
        }

        // Key function for MKQsort algorithm
        static __int64 Key(GetSStream_0_Data0 * p, int depth)
        {

            return 0;
        }

        // End of Key function for MKQSort algorithm
        static bool EofKey(GetSStream_0_Data0 * p, int depth)
        {
            return true;
        }
    };


    template<> 
    class KeyComparePolicy<GetSStream_0_Data0,UID_Aggregate_768>
    {
    public:
        struct KeyStruct
        {
            FString m_RoleInstanceName;

            KeyStruct(GetSStream_0_Data0 & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<KeyStruct&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct() :
                m_RoleInstanceName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_0_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceName, key.m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_0_Data0 * n1, GetSStream_0_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

    };


    template<> 
    class KeyComparePolicy<GetSStream_0_Data0,UID_Join_773_0>
    {
    public:
        struct KeyStruct
        {
            FString m_RoleInstanceName;

            KeyStruct(GetSStream_0_Data0 & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const GetSStream_0_Data0 & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<GetSStream_0_Data0&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_RoleInstanceName(c.m_RoleInstanceName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_RoleInstanceName(const_cast<KeyStruct&>(c).m_RoleInstanceName, alloc)
            {
            }

            KeyStruct() :
                m_RoleInstanceName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tRoleInstanceName:\t" << row.m_RoleInstanceName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_0_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_RoleInstanceName, key.m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_0_Data0 * n1, GetSStream_0_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_RoleInstanceName)) != 0)
                return r;
            return r;
        }

    };


    template<> 
    class KeyComparePolicy<GetSStream_769_Data0,UID_Join_773_1>
    {
    public:
        struct KeyStruct
        {
            FString m_DeploymentName;

            KeyStruct(GetSStream_769_Data0 & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const GetSStream_769_Data0 & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<GetSStream_769_Data0&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct(KeyStruct & c) :
                m_DeploymentName(c.m_DeploymentName)
            {
            }

            KeyStruct(const KeyStruct & c, IncrementalAllocator * alloc) :
                m_DeploymentName(const_cast<KeyStruct&>(c).m_DeploymentName, alloc)
            {
            }

            KeyStruct() :
                m_DeploymentName()
            {
            }
#if defined(SCOPE_DEBUG)
            friend ostream & operator<<(ostream & os, KeyStruct & row)
            {
                os << "\tDeploymentName:\t" << row.m_DeploymentName << endl;
              return os;
            }
#endif // defined(SCOPE_DEBUG)
        };

        typedef KeyStruct KeyType;

        static int Compare(GetSStream_769_Data0 & row, KeyType & key)
        {
            int r = 0;
            if ((r = ScopeTypeCompare(row.m_DeploymentName, key.m_DeploymentName)) != 0)
                return r;
            return r;
        }

        static int Compare(GetSStream_769_Data0 * n1, GetSStream_769_Data0 * n2)
        {
            int r = 0;
            if ((r = ScopeTypeCompare((*n1).m_DeploymentName, (*n2).m_DeploymentName)) != 0)
                return r;
            return r;
        }

    };

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#if defined(COMPILE_NATIVE)
    template<> 
    class CombinerPolicy<UID_Join_773> 
    {
    public:
        typedef KeyComparePolicy<GetSStream_0_Data0,UID_Join_773_0> LeftKeyPolicy;
        typedef KeyComparePolicy<GetSStream_769_Data0,UID_Join_773_1> RightKeyPolicy;

        // compare key from left and right schema object
        static int Compare(const GetSStream_0_Data0 * left, const GetSStream_769_Data0 * right)
        {
            int r = 0;
            GetSStream_0_Data0 * n1 = const_cast<GetSStream_0_Data0 *>(left);
            GetSStream_769_Data0 * n2 = const_cast<GetSStream_769_Data0 *>(right);

            if ((r = ScopeTypeCompare((*n1).m_RoleInstanceName, (*n2).m_DeploymentName)) != 0)
                return r;
            
            // Everything matches
            return 0;
        }

        static void CopyRow(GetSStream_0_Data0 * left, GetSStream_769_Data0 * right, GetSStream_0_Data0 * out)
        {
                (*out).m_PreciseTimeStamp = (*left).m_PreciseTimeStamp;
                (*out).m_StartTime = (*left).m_StartTime;
                (*out).m_EndTime = (*left).m_EndTime;
                (*out).m_LogicalContainerId = (*left).m_LogicalContainerId;
                (*out).m_RoleInstanceName = (*left).m_RoleInstanceName;
                (*out).m_TenantName = (*left).m_TenantName;
                (*out).m_RoleInstanceId = (*left).m_RoleInstanceId;
                (*out).m_TenantId = (*left).m_TenantId;
                (*out).m_NodeId = (*left).m_NodeId;
                (*out).m_ContainerId = (*left).m_ContainerId;
                (*out).m_DataCenter = (*left).m_DataCenter;
                (*out).m_Cluster = (*left).m_Cluster;
                (*out).m_RoleType = (*left).m_RoleType;
                (*out).m_TransitionSignature = (*left).m_TransitionSignature;
                (*out).m_CADCategory = (*left).m_CADCategory;
                (*out).m_RCAEngineCategory = (*left).m_RCAEngineCategory;
                (*out).m_RCALevel1 = (*left).m_RCALevel1;
                (*out).m_RCALevel2 = (*left).m_RCALevel2;
                (*out).m_Duration = (*left).m_Duration;
                (*out).m_RCA = (*left).m_RCA;
                (*out).m_EventList = (*left).m_EventList;
        }

        static void CopyLeftRow(GetSStream_0_Data0 * left, GetSStream_0_Data0 * out)
        {
            (*out).m_PreciseTimeStamp = (*left).m_PreciseTimeStamp;
            (*out).m_StartTime = (*left).m_StartTime;
            (*out).m_EndTime = (*left).m_EndTime;
            (*out).m_LogicalContainerId = (*left).m_LogicalContainerId;
            (*out).m_RoleInstanceName = (*left).m_RoleInstanceName;
            (*out).m_TenantName = (*left).m_TenantName;
            (*out).m_RoleInstanceId = (*left).m_RoleInstanceId;
            (*out).m_TenantId = (*left).m_TenantId;
            (*out).m_NodeId = (*left).m_NodeId;
            (*out).m_ContainerId = (*left).m_ContainerId;
            (*out).m_DataCenter = (*left).m_DataCenter;
            (*out).m_Cluster = (*left).m_Cluster;
            (*out).m_RoleType = (*left).m_RoleType;
            (*out).m_TransitionSignature = (*left).m_TransitionSignature;
            (*out).m_CADCategory = (*left).m_CADCategory;
            (*out).m_RCAEngineCategory = (*left).m_RCAEngineCategory;
            (*out).m_RCALevel1 = (*left).m_RCALevel1;
            (*out).m_RCALevel2 = (*left).m_RCALevel2;
            (*out).m_Duration = (*left).m_Duration;
            (*out).m_RCA = (*left).m_RCA;
            (*out).m_EventList = (*left).m_EventList;
        }

        static void NullifyRightSide(GetSStream_0_Data0 * out)
        {
        }

        static void CopyRightRow(GetSStream_769_Data0 * right, GetSStream_0_Data0 * out)
        {
        }

        static void NullifyLeftSide(GetSStream_0_Data0 * out)
        {
            (*out).m_LogicalContainerId.SetNull();
            (*out).m_RoleInstanceName.SetNull();
            (*out).m_TenantName.SetNull();
            (*out).m_RoleInstanceId.SetNull();
            (*out).m_TenantId.SetNull();
            (*out).m_NodeId.SetNull();
            (*out).m_ContainerId.SetNull();
            (*out).m_DataCenter.SetNull();
            (*out).m_Cluster.SetNull();
            (*out).m_RoleType.SetNull();
            (*out).m_TransitionSignature.SetNull();
            (*out).m_CADCategory.SetNull();
            (*out).m_RCAEngineCategory.SetNull();
            (*out).m_RCALevel1.SetNull();
            (*out).m_RCALevel2.SetNull();
            (*out).m_RCA.SetNull();
            (*out).m_EventList.SetNull();
        }
    };
#endif // defined(COMPILE_NATIVE)



    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_774>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_NATIVE)

    template<>
    class HashAggregationPolicy<GetSStream_0_Data0, GetSStream_0_Data0, UID_Process_774>
    {
    public:
        struct Hash
        {
            const INT64 m_seed;

            Hash() : m_seed((INT64)0)
            {
            }

            Hash(INT64 seed) : m_seed(seed)
            {
            }

            INT64 operator () (const GetSStream_0_Data0& schema) const
            {
                INT64 result = m_seed;
                result = CRC32Hash(result, schema.m_PreciseTimeStamp);
                result = CRC32Hash(result, schema.m_StartTime);
                result = CRC32Hash(result, schema.m_EndTime);
                result = CRC32Hash(result, schema.m_LogicalContainerId);
                result = CRC32Hash(result, schema.m_RoleInstanceName);
                result = CRC32Hash(result, schema.m_TenantName);
                result = CRC32Hash(result, schema.m_RoleInstanceId);
                result = CRC32Hash(result, schema.m_TenantId);
                result = CRC32Hash(result, schema.m_NodeId);
                result = CRC32Hash(result, schema.m_ContainerId);
                result = CRC32Hash(result, schema.m_DataCenter);
                result = CRC32Hash(result, schema.m_Cluster);
                result = CRC32Hash(result, schema.m_RoleType);
                result = CRC32Hash(result, schema.m_TransitionSignature);
                result = CRC32Hash(result, schema.m_CADCategory);
                result = CRC32Hash(result, schema.m_RCAEngineCategory);
                result = CRC32Hash(result, schema.m_RCALevel1);
                result = CRC32Hash(result, schema.m_RCALevel2);
                result = CRC32Hash(result, schema.m_Duration);
                result = CRC32Hash(result, schema.m_RCA);
                result = CRC32Hash(result, schema.m_EventList);
                return result;
            }
        };
        struct EqualTo
        {
            bool operator () (const GetSStream_0_Data0& left, const GetSStream_0_Data0& right) const
            {
                if (!ScopeTypeCompare_EqualEqual(left.m_PreciseTimeStamp, right.m_PreciseTimeStamp)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_StartTime, right.m_StartTime)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_EndTime, right.m_EndTime)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_LogicalContainerId, right.m_LogicalContainerId)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RoleInstanceName, right.m_RoleInstanceName)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_TenantName, right.m_TenantName)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RoleInstanceId, right.m_RoleInstanceId)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_TenantId, right.m_TenantId)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_NodeId, right.m_NodeId)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_ContainerId, right.m_ContainerId)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_DataCenter, right.m_DataCenter)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_Cluster, right.m_Cluster)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RoleType, right.m_RoleType)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_TransitionSignature, right.m_TransitionSignature)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_CADCategory, right.m_CADCategory)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RCAEngineCategory, right.m_RCAEngineCategory)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RCALevel1, right.m_RCALevel1)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RCALevel2, right.m_RCALevel2)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_Duration, right.m_Duration)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_RCA, right.m_RCA)) return false;
                if (!ScopeTypeCompare_EqualEqual(left.m_EventList, right.m_EventList)) return false;
                return true;
            }
        };
 
    public:
        typedef GetSStream_0_Data0           KeySchema;
        typedef PartitionSchema_GetSStream_0         StateSchema;

    public:
        static const SIZE_T m_memoryQuota = (SIZE_T)2 * 1024 * 1024 * 1024; //2GB
        // 1) a fairly large initial size is used to avoid bucket vector reallocation
        //    which is a considerable performance hit;
        // 2) table size must be a power of two;
        // 3) sizeof(Hashtable::Bucket) is 32 bytes, so the total memory used for the bucket vector is 128MB.
        static const SIZE_T   m_initialSize = (SIZE_T)4194304;
        typedef DefaultSTLIncrementalAllocator Allocator;
        static const SIZE_T m_containerAllocTax = 0;

    public:
        // Shallow copy input schema fields to key schema
        static void GetKey(const GetSStream_0_Data0 & row, KeySchema & key)
        {
           key.m_PreciseTimeStamp = row.m_PreciseTimeStamp;
           key.m_StartTime = row.m_StartTime;
           key.m_EndTime = row.m_EndTime;
           key.m_LogicalContainerId = row.m_LogicalContainerId;
           key.m_RoleInstanceName = row.m_RoleInstanceName;
           key.m_TenantName = row.m_TenantName;
           key.m_RoleInstanceId = row.m_RoleInstanceId;
           key.m_TenantId = row.m_TenantId;
           key.m_NodeId = row.m_NodeId;
           key.m_ContainerId = row.m_ContainerId;
           key.m_DataCenter = row.m_DataCenter;
           key.m_Cluster = row.m_Cluster;
           key.m_RoleType = row.m_RoleType;
           key.m_TransitionSignature = row.m_TransitionSignature;
           key.m_CADCategory = row.m_CADCategory;
           key.m_RCAEngineCategory = row.m_RCAEngineCategory;
           key.m_RCALevel1 = row.m_RCALevel1;
           key.m_RCALevel2 = row.m_RCALevel2;
           key.m_Duration = row.m_Duration;
           key.m_RCA = row.m_RCA;
           key.m_EventList = row.m_EventList;
        }

        // Init state schema fields with default aggregate states, shallow copy
        static void GetDefaultState(const GetSStream_0_Data0 & row, StateSchema & defaultState)
        {
        }

        // Shallow copy key and aggregated states to the output
        static void GetOutput(const KeySchema & key, const StateSchema & state, GetSStream_0_Data0 & row)
        {
            row.m_PreciseTimeStamp = key.m_PreciseTimeStamp;
            row.m_StartTime = key.m_StartTime;
            row.m_EndTime = key.m_EndTime;
            row.m_LogicalContainerId = key.m_LogicalContainerId;
            row.m_RoleInstanceName = key.m_RoleInstanceName;
            row.m_TenantName = key.m_TenantName;
            row.m_RoleInstanceId = key.m_RoleInstanceId;
            row.m_TenantId = key.m_TenantId;
            row.m_NodeId = key.m_NodeId;
            row.m_ContainerId = key.m_ContainerId;
            row.m_DataCenter = key.m_DataCenter;
            row.m_Cluster = key.m_Cluster;
            row.m_RoleType = key.m_RoleType;
            row.m_TransitionSignature = key.m_TransitionSignature;
            row.m_CADCategory = key.m_CADCategory;
            row.m_RCAEngineCategory = key.m_RCAEngineCategory;
            row.m_RCALevel1 = key.m_RCALevel1;
            row.m_RCALevel2 = key.m_RCALevel2;
            row.m_Duration = key.m_Duration;
            row.m_RCA = key.m_RCA;
            row.m_EventList = key.m_EventList;
        }

        // Aggregate state fileds with state fields
        template <typename Hashtable>
        static typename Hashtable::EResult InsertOrUpdateState(const KeySchema & key, const StateSchema & defaultState, const GetSStream_0_Data0 & row, Hashtable & hashtable)
        {
            StateSchema * foundState = nullptr;
            typename Hashtable::EResult res = hashtable.TryUpdateOrInsertShallow(key, defaultState, foundState);

            SCOPE_ASSERT(res == Hashtable::OK_INSERT || res == Hashtable::READY_FOR_UPDATE || res == Hashtable::FAILED_OUT_OF_MEMORY);

            if (res == Hashtable::READY_FOR_UPDATE)
            {

                return Hashtable::OK_UPDATE;
            }
            else return res;
        }
    };
#endif // defined(COMPILE_NATIVE)



#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_775>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class RowTransformPolicy<typename GetSStream_0_Data0, typename GetSStream_0_Data0, UID_Process_776>
    {
    public:

        static bool FilterTransformRow(GetSStream_0_Data0 & input, GetSStream_0_Data0 & output, IncrementalAllocator * alloc)
        {
        }


        static void InitializeStatics()
        {
        }
    };

    

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)
    template<> 
    class TextOutputPolicy<GetSStream_0_Data0, UID_SV386_Combine_out0>
    {
    public:

        static void Serialize(TextOutputStream<TextOutputStreamTraitsConst<'\t', 1, false, true, false, false, false, Default>> * output, GetSStream_0_Data0 & row)
        {
            output->Write(row.m_PreciseTimeStamp);
            output->WriteDelimiter();
            output->Write(row.m_StartTime);
            output->WriteDelimiter();
            output->Write(row.m_EndTime);
            output->WriteDelimiter();
            if (!row.m_LogicalContainerId.IsNull())
            {
                output->Write(row.m_LogicalContainerId);
            }
            output->WriteDelimiter();
            if (!row.m_RoleInstanceName.IsNull())
            {
                output->Write(row.m_RoleInstanceName);
            }
            output->WriteDelimiter();
            if (!row.m_TenantName.IsNull())
            {
                output->Write(row.m_TenantName);
            }
            output->WriteDelimiter();
            if (!row.m_RoleInstanceId.IsNull())
            {
                output->Write(row.m_RoleInstanceId);
            }
            output->WriteDelimiter();
            if (!row.m_TenantId.IsNull())
            {
                output->Write(row.m_TenantId);
            }
            output->WriteDelimiter();
            if (!row.m_NodeId.IsNull())
            {
                output->Write(row.m_NodeId);
            }
            output->WriteDelimiter();
            if (!row.m_ContainerId.IsNull())
            {
                output->Write(row.m_ContainerId);
            }
            output->WriteDelimiter();
            if (!row.m_DataCenter.IsNull())
            {
                output->Write(row.m_DataCenter);
            }
            output->WriteDelimiter();
            if (!row.m_Cluster.IsNull())
            {
                output->Write(row.m_Cluster);
            }
            output->WriteDelimiter();
            if (!row.m_RoleType.IsNull())
            {
                output->Write(row.m_RoleType);
            }
            output->WriteDelimiter();
            if (!row.m_TransitionSignature.IsNull())
            {
                output->Write(row.m_TransitionSignature);
            }
            output->WriteDelimiter();
            if (!row.m_CADCategory.IsNull())
            {
                output->Write(row.m_CADCategory);
            }
            output->WriteDelimiter();
            if (!row.m_RCAEngineCategory.IsNull())
            {
                output->Write(row.m_RCAEngineCategory);
            }
            output->WriteDelimiter();
            if (!row.m_RCALevel1.IsNull())
            {
                output->Write(row.m_RCALevel1);
            }
            output->WriteDelimiter();
            if (!row.m_RCALevel2.IsNull())
            {
                output->Write(row.m_RCALevel2);
            }
            output->WriteDelimiter();
            output->Write(row.m_Duration);
            output->WriteDelimiter();
            if (!row.m_RCA.IsNull())
            {
                output->Write(row.m_RCA);
            }
            output->WriteDelimiter();
            if (!row.m_EventList.IsNull())
            {
                output->Write(row.m_EventList);
            }
            output->WriteNewLine();
        }
    };

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)


#if defined(COMPILE_NATIVE)
namespace ScopeGeneratedClasses
{    
    extern "C" __declspec(dllexport) void __stdcall SV386_Combine_execute(std::string * argv, int argc, InputFileInfo* inputs, int inputCnt, std::string * outputFileNames, int outputCnt, VertexExecutionInfo * vertexExecutionInfo)
    {
        Configuration::Create(ET_Cosmos);

        SIZE_T x_inputBufSize, x_outputBufSize, x_inputVirtualMemoryLimit;
        int    x_inputBufCnt, x_outputBufCnt;
        
        MemoryManager::CalculateIOBufferSize(inputCnt, outputCnt, MemoryManager::x_vertexMemoryLimit, MemoryManager::x_vertexReserveMemory, x_inputBufSize, x_inputBufCnt, x_outputBufSize, x_outputBufCnt, x_inputVirtualMemoryLimit);

        const bool IsNativeOnlyVertex = true;
        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType1_SV386_Combine;
        unique_ptr<ExtractorType1_SV386_Combine> extractor_0_ptr(new ExtractorType1_SV386_Combine(inputs[0], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV1_Extract_out0));
        ExtractorType1_SV386_Combine * extractor_0 = extractor_0_ptr.get();
        ULONG extractor_0_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType2_SV386_Combine;
        unique_ptr<ExtractorType2_SV386_Combine> extractor_1_ptr(new ExtractorType2_SV386_Combine(inputs[1], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV2_Extract_out0));
        ExtractorType2_SV386_Combine * extractor_1 = extractor_1_ptr.get();
        ULONG extractor_1_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType3_SV386_Combine;
        unique_ptr<ExtractorType3_SV386_Combine> extractor_2_ptr(new ExtractorType3_SV386_Combine(inputs[2], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV3_Extract_out0));
        ExtractorType3_SV386_Combine * extractor_2 = extractor_2_ptr.get();
        ULONG extractor_2_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType4_SV386_Combine;
        unique_ptr<ExtractorType4_SV386_Combine> extractor_3_ptr(new ExtractorType4_SV386_Combine(inputs[3], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV4_Extract_out0));
        ExtractorType4_SV386_Combine * extractor_3 = extractor_3_ptr.get();
        ULONG extractor_3_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType5_SV386_Combine;
        unique_ptr<ExtractorType5_SV386_Combine> extractor_4_ptr(new ExtractorType5_SV386_Combine(inputs[4], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV5_Extract_out0));
        ExtractorType5_SV386_Combine * extractor_4 = extractor_4_ptr.get();
        ULONG extractor_4_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType6_SV386_Combine;
        unique_ptr<ExtractorType6_SV386_Combine> extractor_5_ptr(new ExtractorType6_SV386_Combine(inputs[5], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV6_Extract_out0));
        ExtractorType6_SV386_Combine * extractor_5 = extractor_5_ptr.get();
        ULONG extractor_5_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType7_SV386_Combine;
        unique_ptr<ExtractorType7_SV386_Combine> extractor_6_ptr(new ExtractorType7_SV386_Combine(inputs[6], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV7_Extract_out0));
        ExtractorType7_SV386_Combine * extractor_6 = extractor_6_ptr.get();
        ULONG extractor_6_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType8_SV386_Combine;
        unique_ptr<ExtractorType8_SV386_Combine> extractor_7_ptr(new ExtractorType8_SV386_Combine(inputs[7], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV8_Extract_out0));
        ExtractorType8_SV386_Combine * extractor_7 = extractor_7_ptr.get();
        ULONG extractor_7_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType9_SV386_Combine;
        unique_ptr<ExtractorType9_SV386_Combine> extractor_8_ptr(new ExtractorType9_SV386_Combine(inputs[8], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV9_Extract_out0));
        ExtractorType9_SV386_Combine * extractor_8 = extractor_8_ptr.get();
        ULONG extractor_8_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType10_SV386_Combine;
        unique_ptr<ExtractorType10_SV386_Combine> extractor_9_ptr(new ExtractorType10_SV386_Combine(inputs[9], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV10_Extract_out0));
        ExtractorType10_SV386_Combine * extractor_9 = extractor_9_ptr.get();
        ULONG extractor_9_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType11_SV386_Combine;
        unique_ptr<ExtractorType11_SV386_Combine> extractor_10_ptr(new ExtractorType11_SV386_Combine(inputs[10], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV11_Extract_out0));
        ExtractorType11_SV386_Combine * extractor_10 = extractor_10_ptr.get();
        ULONG extractor_10_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType12_SV386_Combine;
        unique_ptr<ExtractorType12_SV386_Combine> extractor_11_ptr(new ExtractorType12_SV386_Combine(inputs[11], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV12_Extract_out0));
        ExtractorType12_SV386_Combine * extractor_11 = extractor_11_ptr.get();
        ULONG extractor_11_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType13_SV386_Combine;
        unique_ptr<ExtractorType13_SV386_Combine> extractor_12_ptr(new ExtractorType13_SV386_Combine(inputs[12], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV13_Extract_out0));
        ExtractorType13_SV386_Combine * extractor_12 = extractor_12_ptr.get();
        ULONG extractor_12_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType14_SV386_Combine;
        unique_ptr<ExtractorType14_SV386_Combine> extractor_13_ptr(new ExtractorType14_SV386_Combine(inputs[13], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV14_Extract_out0));
        ExtractorType14_SV386_Combine * extractor_13 = extractor_13_ptr.get();
        ULONG extractor_13_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType15_SV386_Combine;
        unique_ptr<ExtractorType15_SV386_Combine> extractor_14_ptr(new ExtractorType15_SV386_Combine(inputs[14], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV15_Extract_out0));
        ExtractorType15_SV386_Combine * extractor_14 = extractor_14_ptr.get();
        ULONG extractor_14_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType16_SV386_Combine;
        unique_ptr<ExtractorType16_SV386_Combine> extractor_15_ptr(new ExtractorType16_SV386_Combine(inputs[15], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV16_Extract_out0));
        ExtractorType16_SV386_Combine * extractor_15 = extractor_15_ptr.get();
        ULONG extractor_15_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType17_SV386_Combine;
        unique_ptr<ExtractorType17_SV386_Combine> extractor_16_ptr(new ExtractorType17_SV386_Combine(inputs[16], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV17_Extract_out0));
        ExtractorType17_SV386_Combine * extractor_16 = extractor_16_ptr.get();
        ULONG extractor_16_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType18_SV386_Combine;
        unique_ptr<ExtractorType18_SV386_Combine> extractor_17_ptr(new ExtractorType18_SV386_Combine(inputs[17], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV18_Extract_out0));
        ExtractorType18_SV386_Combine * extractor_17 = extractor_17_ptr.get();
        ULONG extractor_17_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType19_SV386_Combine;
        unique_ptr<ExtractorType19_SV386_Combine> extractor_18_ptr(new ExtractorType19_SV386_Combine(inputs[18], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV19_Extract_out0));
        ExtractorType19_SV386_Combine * extractor_18 = extractor_18_ptr.get();
        ULONG extractor_18_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType20_SV386_Combine;
        unique_ptr<ExtractorType20_SV386_Combine> extractor_19_ptr(new ExtractorType20_SV386_Combine(inputs[19], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV20_Extract_out0));
        ExtractorType20_SV386_Combine * extractor_19 = extractor_19_ptr.get();
        ULONG extractor_19_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType21_SV386_Combine;
        unique_ptr<ExtractorType21_SV386_Combine> extractor_20_ptr(new ExtractorType21_SV386_Combine(inputs[20], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV21_Extract_out0));
        ExtractorType21_SV386_Combine * extractor_20 = extractor_20_ptr.get();
        ULONG extractor_20_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType22_SV386_Combine;
        unique_ptr<ExtractorType22_SV386_Combine> extractor_21_ptr(new ExtractorType22_SV386_Combine(inputs[21], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV22_Extract_out0));
        ExtractorType22_SV386_Combine * extractor_21 = extractor_21_ptr.get();
        ULONG extractor_21_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType23_SV386_Combine;
        unique_ptr<ExtractorType23_SV386_Combine> extractor_22_ptr(new ExtractorType23_SV386_Combine(inputs[22], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV23_Extract_out0));
        ExtractorType23_SV386_Combine * extractor_22 = extractor_22_ptr.get();
        ULONG extractor_22_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType24_SV386_Combine;
        unique_ptr<ExtractorType24_SV386_Combine> extractor_23_ptr(new ExtractorType24_SV386_Combine(inputs[23], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV24_Extract_out0));
        ExtractorType24_SV386_Combine * extractor_23 = extractor_23_ptr.get();
        ULONG extractor_23_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType25_SV386_Combine;
        unique_ptr<ExtractorType25_SV386_Combine> extractor_24_ptr(new ExtractorType25_SV386_Combine(inputs[24], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV25_Extract_out0));
        ExtractorType25_SV386_Combine * extractor_24 = extractor_24_ptr.get();
        ULONG extractor_24_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType26_SV386_Combine;
        unique_ptr<ExtractorType26_SV386_Combine> extractor_25_ptr(new ExtractorType26_SV386_Combine(inputs[25], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV26_Extract_out0));
        ExtractorType26_SV386_Combine * extractor_25 = extractor_25_ptr.get();
        ULONG extractor_25_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType27_SV386_Combine;
        unique_ptr<ExtractorType27_SV386_Combine> extractor_26_ptr(new ExtractorType27_SV386_Combine(inputs[26], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV27_Extract_out0));
        ExtractorType27_SV386_Combine * extractor_26 = extractor_26_ptr.get();
        ULONG extractor_26_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType28_SV386_Combine;
        unique_ptr<ExtractorType28_SV386_Combine> extractor_27_ptr(new ExtractorType28_SV386_Combine(inputs[27], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV28_Extract_out0));
        ExtractorType28_SV386_Combine * extractor_27 = extractor_27_ptr.get();
        ULONG extractor_27_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType29_SV386_Combine;
        unique_ptr<ExtractorType29_SV386_Combine> extractor_28_ptr(new ExtractorType29_SV386_Combine(inputs[28], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV29_Extract_out0));
        ExtractorType29_SV386_Combine * extractor_28 = extractor_28_ptr.get();
        ULONG extractor_28_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType30_SV386_Combine;
        unique_ptr<ExtractorType30_SV386_Combine> extractor_29_ptr(new ExtractorType30_SV386_Combine(inputs[29], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV30_Extract_out0));
        ExtractorType30_SV386_Combine * extractor_29 = extractor_29_ptr.get();
        ULONG extractor_29_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType31_SV386_Combine;
        unique_ptr<ExtractorType31_SV386_Combine> extractor_30_ptr(new ExtractorType31_SV386_Combine(inputs[30], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV31_Extract_out0));
        ExtractorType31_SV386_Combine * extractor_30 = extractor_30_ptr.get();
        ULONG extractor_30_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType32_SV386_Combine;
        unique_ptr<ExtractorType32_SV386_Combine> extractor_31_ptr(new ExtractorType32_SV386_Combine(inputs[31], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV32_Extract_out0));
        ExtractorType32_SV386_Combine * extractor_31 = extractor_31_ptr.get();
        ULONG extractor_31_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType33_SV386_Combine;
        unique_ptr<ExtractorType33_SV386_Combine> extractor_32_ptr(new ExtractorType33_SV386_Combine(inputs[32], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV33_Extract_out0));
        ExtractorType33_SV386_Combine * extractor_32 = extractor_32_ptr.get();
        ULONG extractor_32_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType34_SV386_Combine;
        unique_ptr<ExtractorType34_SV386_Combine> extractor_33_ptr(new ExtractorType34_SV386_Combine(inputs[33], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV34_Extract_out0));
        ExtractorType34_SV386_Combine * extractor_33 = extractor_33_ptr.get();
        ULONG extractor_33_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType35_SV386_Combine;
        unique_ptr<ExtractorType35_SV386_Combine> extractor_34_ptr(new ExtractorType35_SV386_Combine(inputs[34], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV35_Extract_out0));
        ExtractorType35_SV386_Combine * extractor_34 = extractor_34_ptr.get();
        ULONG extractor_34_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType36_SV386_Combine;
        unique_ptr<ExtractorType36_SV386_Combine> extractor_35_ptr(new ExtractorType36_SV386_Combine(inputs[35], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV36_Extract_out0));
        ExtractorType36_SV386_Combine * extractor_35 = extractor_35_ptr.get();
        ULONG extractor_35_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType37_SV386_Combine;
        unique_ptr<ExtractorType37_SV386_Combine> extractor_36_ptr(new ExtractorType37_SV386_Combine(inputs[36], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV37_Extract_out0));
        ExtractorType37_SV386_Combine * extractor_36 = extractor_36_ptr.get();
        ULONG extractor_36_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType38_SV386_Combine;
        unique_ptr<ExtractorType38_SV386_Combine> extractor_37_ptr(new ExtractorType38_SV386_Combine(inputs[37], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV38_Extract_out0));
        ExtractorType38_SV386_Combine * extractor_37 = extractor_37_ptr.get();
        ULONG extractor_37_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType39_SV386_Combine;
        unique_ptr<ExtractorType39_SV386_Combine> extractor_38_ptr(new ExtractorType39_SV386_Combine(inputs[38], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV39_Extract_out0));
        ExtractorType39_SV386_Combine * extractor_38 = extractor_38_ptr.get();
        ULONG extractor_38_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType40_SV386_Combine;
        unique_ptr<ExtractorType40_SV386_Combine> extractor_39_ptr(new ExtractorType40_SV386_Combine(inputs[39], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV40_Extract_out0));
        ExtractorType40_SV386_Combine * extractor_39 = extractor_39_ptr.get();
        ULONG extractor_39_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType41_SV386_Combine;
        unique_ptr<ExtractorType41_SV386_Combine> extractor_40_ptr(new ExtractorType41_SV386_Combine(inputs[40], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV41_Extract_out0));
        ExtractorType41_SV386_Combine * extractor_40 = extractor_40_ptr.get();
        ULONG extractor_40_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType42_SV386_Combine;
        unique_ptr<ExtractorType42_SV386_Combine> extractor_41_ptr(new ExtractorType42_SV386_Combine(inputs[41], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV42_Extract_out0));
        ExtractorType42_SV386_Combine * extractor_41 = extractor_41_ptr.get();
        ULONG extractor_41_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType43_SV386_Combine;
        unique_ptr<ExtractorType43_SV386_Combine> extractor_42_ptr(new ExtractorType43_SV386_Combine(inputs[42], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV43_Extract_out0));
        ExtractorType43_SV386_Combine * extractor_42 = extractor_42_ptr.get();
        ULONG extractor_42_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType44_SV386_Combine;
        unique_ptr<ExtractorType44_SV386_Combine> extractor_43_ptr(new ExtractorType44_SV386_Combine(inputs[43], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV44_Extract_out0));
        ExtractorType44_SV386_Combine * extractor_43 = extractor_43_ptr.get();
        ULONG extractor_43_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType45_SV386_Combine;
        unique_ptr<ExtractorType45_SV386_Combine> extractor_44_ptr(new ExtractorType45_SV386_Combine(inputs[44], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV45_Extract_out0));
        ExtractorType45_SV386_Combine * extractor_44 = extractor_44_ptr.get();
        ULONG extractor_44_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType46_SV386_Combine;
        unique_ptr<ExtractorType46_SV386_Combine> extractor_45_ptr(new ExtractorType46_SV386_Combine(inputs[45], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV46_Extract_out0));
        ExtractorType46_SV386_Combine * extractor_45 = extractor_45_ptr.get();
        ULONG extractor_45_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType47_SV386_Combine;
        unique_ptr<ExtractorType47_SV386_Combine> extractor_46_ptr(new ExtractorType47_SV386_Combine(inputs[46], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV47_Extract_out0));
        ExtractorType47_SV386_Combine * extractor_46 = extractor_46_ptr.get();
        ULONG extractor_46_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType48_SV386_Combine;
        unique_ptr<ExtractorType48_SV386_Combine> extractor_47_ptr(new ExtractorType48_SV386_Combine(inputs[47], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV48_Extract_out0));
        ExtractorType48_SV386_Combine * extractor_47 = extractor_47_ptr.get();
        ULONG extractor_47_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType49_SV386_Combine;
        unique_ptr<ExtractorType49_SV386_Combine> extractor_48_ptr(new ExtractorType49_SV386_Combine(inputs[48], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV49_Extract_out0));
        ExtractorType49_SV386_Combine * extractor_48 = extractor_48_ptr.get();
        ULONG extractor_48_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType50_SV386_Combine;
        unique_ptr<ExtractorType50_SV386_Combine> extractor_49_ptr(new ExtractorType50_SV386_Combine(inputs[49], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV50_Extract_out0));
        ExtractorType50_SV386_Combine * extractor_49 = extractor_49_ptr.get();
        ULONG extractor_49_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType51_SV386_Combine;
        unique_ptr<ExtractorType51_SV386_Combine> extractor_50_ptr(new ExtractorType51_SV386_Combine(inputs[50], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV51_Extract_out0));
        ExtractorType51_SV386_Combine * extractor_50 = extractor_50_ptr.get();
        ULONG extractor_50_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType52_SV386_Combine;
        unique_ptr<ExtractorType52_SV386_Combine> extractor_51_ptr(new ExtractorType52_SV386_Combine(inputs[51], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV52_Extract_out0));
        ExtractorType52_SV386_Combine * extractor_51 = extractor_51_ptr.get();
        ULONG extractor_51_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType53_SV386_Combine;
        unique_ptr<ExtractorType53_SV386_Combine> extractor_52_ptr(new ExtractorType53_SV386_Combine(inputs[52], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV53_Extract_out0));
        ExtractorType53_SV386_Combine * extractor_52 = extractor_52_ptr.get();
        ULONG extractor_52_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType54_SV386_Combine;
        unique_ptr<ExtractorType54_SV386_Combine> extractor_53_ptr(new ExtractorType54_SV386_Combine(inputs[53], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV54_Extract_out0));
        ExtractorType54_SV386_Combine * extractor_53 = extractor_53_ptr.get();
        ULONG extractor_53_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType55_SV386_Combine;
        unique_ptr<ExtractorType55_SV386_Combine> extractor_54_ptr(new ExtractorType55_SV386_Combine(inputs[54], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV55_Extract_out0));
        ExtractorType55_SV386_Combine * extractor_54 = extractor_54_ptr.get();
        ULONG extractor_54_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType56_SV386_Combine;
        unique_ptr<ExtractorType56_SV386_Combine> extractor_55_ptr(new ExtractorType56_SV386_Combine(inputs[55], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV56_Extract_out0));
        ExtractorType56_SV386_Combine * extractor_55 = extractor_55_ptr.get();
        ULONG extractor_55_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType57_SV386_Combine;
        unique_ptr<ExtractorType57_SV386_Combine> extractor_56_ptr(new ExtractorType57_SV386_Combine(inputs[56], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV57_Extract_out0));
        ExtractorType57_SV386_Combine * extractor_56 = extractor_56_ptr.get();
        ULONG extractor_56_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType58_SV386_Combine;
        unique_ptr<ExtractorType58_SV386_Combine> extractor_57_ptr(new ExtractorType58_SV386_Combine(inputs[57], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV58_Extract_out0));
        ExtractorType58_SV386_Combine * extractor_57 = extractor_57_ptr.get();
        ULONG extractor_57_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType59_SV386_Combine;
        unique_ptr<ExtractorType59_SV386_Combine> extractor_58_ptr(new ExtractorType59_SV386_Combine(inputs[58], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV59_Extract_out0));
        ExtractorType59_SV386_Combine * extractor_58 = extractor_58_ptr.get();
        ULONG extractor_58_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType60_SV386_Combine;
        unique_ptr<ExtractorType60_SV386_Combine> extractor_59_ptr(new ExtractorType60_SV386_Combine(inputs[59], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV60_Extract_out0));
        ExtractorType60_SV386_Combine * extractor_59 = extractor_59_ptr.get();
        ULONG extractor_59_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType61_SV386_Combine;
        unique_ptr<ExtractorType61_SV386_Combine> extractor_60_ptr(new ExtractorType61_SV386_Combine(inputs[60], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV61_Extract_out0));
        ExtractorType61_SV386_Combine * extractor_60 = extractor_60_ptr.get();
        ULONG extractor_60_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType62_SV386_Combine;
        unique_ptr<ExtractorType62_SV386_Combine> extractor_61_ptr(new ExtractorType62_SV386_Combine(inputs[61], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV62_Extract_out0));
        ExtractorType62_SV386_Combine * extractor_61 = extractor_61_ptr.get();
        ULONG extractor_61_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType63_SV386_Combine;
        unique_ptr<ExtractorType63_SV386_Combine> extractor_62_ptr(new ExtractorType63_SV386_Combine(inputs[62], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV63_Extract_out0));
        ExtractorType63_SV386_Combine * extractor_62 = extractor_62_ptr.get();
        ULONG extractor_62_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType64_SV386_Combine;
        unique_ptr<ExtractorType64_SV386_Combine> extractor_63_ptr(new ExtractorType64_SV386_Combine(inputs[63], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV64_Extract_out0));
        ExtractorType64_SV386_Combine * extractor_63 = extractor_63_ptr.get();
        ULONG extractor_63_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType65_SV386_Combine;
        unique_ptr<ExtractorType65_SV386_Combine> extractor_64_ptr(new ExtractorType65_SV386_Combine(inputs[64], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV65_Extract_out0));
        ExtractorType65_SV386_Combine * extractor_64 = extractor_64_ptr.get();
        ULONG extractor_64_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType66_SV386_Combine;
        unique_ptr<ExtractorType66_SV386_Combine> extractor_65_ptr(new ExtractorType66_SV386_Combine(inputs[65], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV66_Extract_out0));
        ExtractorType66_SV386_Combine * extractor_65 = extractor_65_ptr.get();
        ULONG extractor_65_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType67_SV386_Combine;
        unique_ptr<ExtractorType67_SV386_Combine> extractor_66_ptr(new ExtractorType67_SV386_Combine(inputs[66], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV67_Extract_out0));
        ExtractorType67_SV386_Combine * extractor_66 = extractor_66_ptr.get();
        ULONG extractor_66_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType68_SV386_Combine;
        unique_ptr<ExtractorType68_SV386_Combine> extractor_67_ptr(new ExtractorType68_SV386_Combine(inputs[67], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV68_Extract_out0));
        ExtractorType68_SV386_Combine * extractor_67 = extractor_67_ptr.get();
        ULONG extractor_67_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType69_SV386_Combine;
        unique_ptr<ExtractorType69_SV386_Combine> extractor_68_ptr(new ExtractorType69_SV386_Combine(inputs[68], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV69_Extract_out0));
        ExtractorType69_SV386_Combine * extractor_68 = extractor_68_ptr.get();
        ULONG extractor_68_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType70_SV386_Combine;
        unique_ptr<ExtractorType70_SV386_Combine> extractor_69_ptr(new ExtractorType70_SV386_Combine(inputs[69], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV70_Extract_out0));
        ExtractorType70_SV386_Combine * extractor_69 = extractor_69_ptr.get();
        ULONG extractor_69_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType71_SV386_Combine;
        unique_ptr<ExtractorType71_SV386_Combine> extractor_70_ptr(new ExtractorType71_SV386_Combine(inputs[70], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV71_Extract_out0));
        ExtractorType71_SV386_Combine * extractor_70 = extractor_70_ptr.get();
        ULONG extractor_70_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType72_SV386_Combine;
        unique_ptr<ExtractorType72_SV386_Combine> extractor_71_ptr(new ExtractorType72_SV386_Combine(inputs[71], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV72_Extract_out0));
        ExtractorType72_SV386_Combine * extractor_71 = extractor_71_ptr.get();
        ULONG extractor_71_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType73_SV386_Combine;
        unique_ptr<ExtractorType73_SV386_Combine> extractor_72_ptr(new ExtractorType73_SV386_Combine(inputs[72], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV73_Extract_out0));
        ExtractorType73_SV386_Combine * extractor_72 = extractor_72_ptr.get();
        ULONG extractor_72_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType74_SV386_Combine;
        unique_ptr<ExtractorType74_SV386_Combine> extractor_73_ptr(new ExtractorType74_SV386_Combine(inputs[73], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV74_Extract_out0));
        ExtractorType74_SV386_Combine * extractor_73 = extractor_73_ptr.get();
        ULONG extractor_73_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType75_SV386_Combine;
        unique_ptr<ExtractorType75_SV386_Combine> extractor_74_ptr(new ExtractorType75_SV386_Combine(inputs[74], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV75_Extract_out0));
        ExtractorType75_SV386_Combine * extractor_74 = extractor_74_ptr.get();
        ULONG extractor_74_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType76_SV386_Combine;
        unique_ptr<ExtractorType76_SV386_Combine> extractor_75_ptr(new ExtractorType76_SV386_Combine(inputs[75], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV76_Extract_out0));
        ExtractorType76_SV386_Combine * extractor_75 = extractor_75_ptr.get();
        ULONG extractor_75_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType77_SV386_Combine;
        unique_ptr<ExtractorType77_SV386_Combine> extractor_76_ptr(new ExtractorType77_SV386_Combine(inputs[76], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV77_Extract_out0));
        ExtractorType77_SV386_Combine * extractor_76 = extractor_76_ptr.get();
        ULONG extractor_76_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType78_SV386_Combine;
        unique_ptr<ExtractorType78_SV386_Combine> extractor_77_ptr(new ExtractorType78_SV386_Combine(inputs[77], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV78_Extract_out0));
        ExtractorType78_SV386_Combine * extractor_77 = extractor_77_ptr.get();
        ULONG extractor_77_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType79_SV386_Combine;
        unique_ptr<ExtractorType79_SV386_Combine> extractor_78_ptr(new ExtractorType79_SV386_Combine(inputs[78], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV79_Extract_out0));
        ExtractorType79_SV386_Combine * extractor_78 = extractor_78_ptr.get();
        ULONG extractor_78_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType80_SV386_Combine;
        unique_ptr<ExtractorType80_SV386_Combine> extractor_79_ptr(new ExtractorType80_SV386_Combine(inputs[79], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV80_Extract_out0));
        ExtractorType80_SV386_Combine * extractor_79 = extractor_79_ptr.get();
        ULONG extractor_79_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType81_SV386_Combine;
        unique_ptr<ExtractorType81_SV386_Combine> extractor_80_ptr(new ExtractorType81_SV386_Combine(inputs[80], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV81_Extract_out0));
        ExtractorType81_SV386_Combine * extractor_80 = extractor_80_ptr.get();
        ULONG extractor_80_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType82_SV386_Combine;
        unique_ptr<ExtractorType82_SV386_Combine> extractor_81_ptr(new ExtractorType82_SV386_Combine(inputs[81], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV82_Extract_out0));
        ExtractorType82_SV386_Combine * extractor_81 = extractor_81_ptr.get();
        ULONG extractor_81_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType83_SV386_Combine;
        unique_ptr<ExtractorType83_SV386_Combine> extractor_82_ptr(new ExtractorType83_SV386_Combine(inputs[82], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV83_Extract_out0));
        ExtractorType83_SV386_Combine * extractor_82 = extractor_82_ptr.get();
        ULONG extractor_82_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType84_SV386_Combine;
        unique_ptr<ExtractorType84_SV386_Combine> extractor_83_ptr(new ExtractorType84_SV386_Combine(inputs[83], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV84_Extract_out0));
        ExtractorType84_SV386_Combine * extractor_83 = extractor_83_ptr.get();
        ULONG extractor_83_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType85_SV386_Combine;
        unique_ptr<ExtractorType85_SV386_Combine> extractor_84_ptr(new ExtractorType85_SV386_Combine(inputs[84], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV85_Extract_out0));
        ExtractorType85_SV386_Combine * extractor_84 = extractor_84_ptr.get();
        ULONG extractor_84_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType86_SV386_Combine;
        unique_ptr<ExtractorType86_SV386_Combine> extractor_85_ptr(new ExtractorType86_SV386_Combine(inputs[85], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV86_Extract_out0));
        ExtractorType86_SV386_Combine * extractor_85 = extractor_85_ptr.get();
        ULONG extractor_85_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType87_SV386_Combine;
        unique_ptr<ExtractorType87_SV386_Combine> extractor_86_ptr(new ExtractorType87_SV386_Combine(inputs[86], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV87_Extract_out0));
        ExtractorType87_SV386_Combine * extractor_86 = extractor_86_ptr.get();
        ULONG extractor_86_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType88_SV386_Combine;
        unique_ptr<ExtractorType88_SV386_Combine> extractor_87_ptr(new ExtractorType88_SV386_Combine(inputs[87], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV88_Extract_out0));
        ExtractorType88_SV386_Combine * extractor_87 = extractor_87_ptr.get();
        ULONG extractor_87_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType89_SV386_Combine;
        unique_ptr<ExtractorType89_SV386_Combine> extractor_88_ptr(new ExtractorType89_SV386_Combine(inputs[88], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV89_Extract_out0));
        ExtractorType89_SV386_Combine * extractor_88 = extractor_88_ptr.get();
        ULONG extractor_88_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType90_SV386_Combine;
        unique_ptr<ExtractorType90_SV386_Combine> extractor_89_ptr(new ExtractorType90_SV386_Combine(inputs[89], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV90_Extract_out0));
        ExtractorType90_SV386_Combine * extractor_89 = extractor_89_ptr.get();
        ULONG extractor_89_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType91_SV386_Combine;
        unique_ptr<ExtractorType91_SV386_Combine> extractor_90_ptr(new ExtractorType91_SV386_Combine(inputs[90], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV91_Extract_out0));
        ExtractorType91_SV386_Combine * extractor_90 = extractor_90_ptr.get();
        ULONG extractor_90_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType92_SV386_Combine;
        unique_ptr<ExtractorType92_SV386_Combine> extractor_91_ptr(new ExtractorType92_SV386_Combine(inputs[91], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV92_Extract_out0));
        ExtractorType92_SV386_Combine * extractor_91 = extractor_91_ptr.get();
        ULONG extractor_91_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType93_SV386_Combine;
        unique_ptr<ExtractorType93_SV386_Combine> extractor_92_ptr(new ExtractorType93_SV386_Combine(inputs[92], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV93_Extract_out0));
        ExtractorType93_SV386_Combine * extractor_92 = extractor_92_ptr.get();
        ULONG extractor_92_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType94_SV386_Combine;
        unique_ptr<ExtractorType94_SV386_Combine> extractor_93_ptr(new ExtractorType94_SV386_Combine(inputs[93], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV94_Extract_out0));
        ExtractorType94_SV386_Combine * extractor_93 = extractor_93_ptr.get();
        ULONG extractor_93_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType95_SV386_Combine;
        unique_ptr<ExtractorType95_SV386_Combine> extractor_94_ptr(new ExtractorType95_SV386_Combine(inputs[94], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV95_Extract_out0));
        ExtractorType95_SV386_Combine * extractor_94 = extractor_94_ptr.get();
        ULONG extractor_94_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType96_SV386_Combine;
        unique_ptr<ExtractorType96_SV386_Combine> extractor_95_ptr(new ExtractorType96_SV386_Combine(inputs[95], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV96_Extract_out0));
        ExtractorType96_SV386_Combine * extractor_95 = extractor_95_ptr.get();
        ULONG extractor_95_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType97_SV386_Combine;
        unique_ptr<ExtractorType97_SV386_Combine> extractor_96_ptr(new ExtractorType97_SV386_Combine(inputs[96], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV97_Extract_out0));
        ExtractorType97_SV386_Combine * extractor_96 = extractor_96_ptr.get();
        ULONG extractor_96_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType98_SV386_Combine;
        unique_ptr<ExtractorType98_SV386_Combine> extractor_97_ptr(new ExtractorType98_SV386_Combine(inputs[97], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV98_Extract_out0));
        ExtractorType98_SV386_Combine * extractor_97 = extractor_97_ptr.get();
        ULONG extractor_97_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType99_SV386_Combine;
        unique_ptr<ExtractorType99_SV386_Combine> extractor_98_ptr(new ExtractorType99_SV386_Combine(inputs[98], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV99_Extract_out0));
        ExtractorType99_SV386_Combine * extractor_98 = extractor_98_ptr.get();
        ULONG extractor_98_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType100_SV386_Combine;
        unique_ptr<ExtractorType100_SV386_Combine> extractor_99_ptr(new ExtractorType100_SV386_Combine(inputs[99], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV100_Extract_out0));
        ExtractorType100_SV386_Combine * extractor_99 = extractor_99_ptr.get();
        ULONG extractor_99_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType101_SV386_Combine;
        unique_ptr<ExtractorType101_SV386_Combine> extractor_100_ptr(new ExtractorType101_SV386_Combine(inputs[100], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV101_Extract_out0));
        ExtractorType101_SV386_Combine * extractor_100 = extractor_100_ptr.get();
        ULONG extractor_100_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType102_SV386_Combine;
        unique_ptr<ExtractorType102_SV386_Combine> extractor_101_ptr(new ExtractorType102_SV386_Combine(inputs[101], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV102_Extract_out0));
        ExtractorType102_SV386_Combine * extractor_101 = extractor_101_ptr.get();
        ULONG extractor_101_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType103_SV386_Combine;
        unique_ptr<ExtractorType103_SV386_Combine> extractor_102_ptr(new ExtractorType103_SV386_Combine(inputs[102], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV103_Extract_out0));
        ExtractorType103_SV386_Combine * extractor_102 = extractor_102_ptr.get();
        ULONG extractor_102_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType104_SV386_Combine;
        unique_ptr<ExtractorType104_SV386_Combine> extractor_103_ptr(new ExtractorType104_SV386_Combine(inputs[103], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV104_Extract_out0));
        ExtractorType104_SV386_Combine * extractor_103 = extractor_103_ptr.get();
        ULONG extractor_103_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType105_SV386_Combine;
        unique_ptr<ExtractorType105_SV386_Combine> extractor_104_ptr(new ExtractorType105_SV386_Combine(inputs[104], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV105_Extract_out0));
        ExtractorType105_SV386_Combine * extractor_104 = extractor_104_ptr.get();
        ULONG extractor_104_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType106_SV386_Combine;
        unique_ptr<ExtractorType106_SV386_Combine> extractor_105_ptr(new ExtractorType106_SV386_Combine(inputs[105], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV106_Extract_out0));
        ExtractorType106_SV386_Combine * extractor_105 = extractor_105_ptr.get();
        ULONG extractor_105_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType107_SV386_Combine;
        unique_ptr<ExtractorType107_SV386_Combine> extractor_106_ptr(new ExtractorType107_SV386_Combine(inputs[106], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV107_Extract_out0));
        ExtractorType107_SV386_Combine * extractor_106 = extractor_106_ptr.get();
        ULONG extractor_106_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType108_SV386_Combine;
        unique_ptr<ExtractorType108_SV386_Combine> extractor_107_ptr(new ExtractorType108_SV386_Combine(inputs[107], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV108_Extract_out0));
        ExtractorType108_SV386_Combine * extractor_107 = extractor_107_ptr.get();
        ULONG extractor_107_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType109_SV386_Combine;
        unique_ptr<ExtractorType109_SV386_Combine> extractor_108_ptr(new ExtractorType109_SV386_Combine(inputs[108], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV109_Extract_out0));
        ExtractorType109_SV386_Combine * extractor_108 = extractor_108_ptr.get();
        ULONG extractor_108_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType110_SV386_Combine;
        unique_ptr<ExtractorType110_SV386_Combine> extractor_109_ptr(new ExtractorType110_SV386_Combine(inputs[109], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV110_Extract_out0));
        ExtractorType110_SV386_Combine * extractor_109 = extractor_109_ptr.get();
        ULONG extractor_109_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType111_SV386_Combine;
        unique_ptr<ExtractorType111_SV386_Combine> extractor_110_ptr(new ExtractorType111_SV386_Combine(inputs[110], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV111_Extract_out0));
        ExtractorType111_SV386_Combine * extractor_110 = extractor_110_ptr.get();
        ULONG extractor_110_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType112_SV386_Combine;
        unique_ptr<ExtractorType112_SV386_Combine> extractor_111_ptr(new ExtractorType112_SV386_Combine(inputs[111], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV112_Extract_out0));
        ExtractorType112_SV386_Combine * extractor_111 = extractor_111_ptr.get();
        ULONG extractor_111_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType113_SV386_Combine;
        unique_ptr<ExtractorType113_SV386_Combine> extractor_112_ptr(new ExtractorType113_SV386_Combine(inputs[112], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV113_Extract_out0));
        ExtractorType113_SV386_Combine * extractor_112 = extractor_112_ptr.get();
        ULONG extractor_112_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType114_SV386_Combine;
        unique_ptr<ExtractorType114_SV386_Combine> extractor_113_ptr(new ExtractorType114_SV386_Combine(inputs[113], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV114_Extract_out0));
        ExtractorType114_SV386_Combine * extractor_113 = extractor_113_ptr.get();
        ULONG extractor_113_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType115_SV386_Combine;
        unique_ptr<ExtractorType115_SV386_Combine> extractor_114_ptr(new ExtractorType115_SV386_Combine(inputs[114], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV115_Extract_out0));
        ExtractorType115_SV386_Combine * extractor_114 = extractor_114_ptr.get();
        ULONG extractor_114_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType116_SV386_Combine;
        unique_ptr<ExtractorType116_SV386_Combine> extractor_115_ptr(new ExtractorType116_SV386_Combine(inputs[115], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV116_Extract_out0));
        ExtractorType116_SV386_Combine * extractor_115 = extractor_115_ptr.get();
        ULONG extractor_115_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType117_SV386_Combine;
        unique_ptr<ExtractorType117_SV386_Combine> extractor_116_ptr(new ExtractorType117_SV386_Combine(inputs[116], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV117_Extract_out0));
        ExtractorType117_SV386_Combine * extractor_116 = extractor_116_ptr.get();
        ULONG extractor_116_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType118_SV386_Combine;
        unique_ptr<ExtractorType118_SV386_Combine> extractor_117_ptr(new ExtractorType118_SV386_Combine(inputs[117], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV118_Extract_out0));
        ExtractorType118_SV386_Combine * extractor_117 = extractor_117_ptr.get();
        ULONG extractor_117_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType119_SV386_Combine;
        unique_ptr<ExtractorType119_SV386_Combine> extractor_118_ptr(new ExtractorType119_SV386_Combine(inputs[118], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV119_Extract_out0));
        ExtractorType119_SV386_Combine * extractor_118 = extractor_118_ptr.get();
        ULONG extractor_118_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType120_SV386_Combine;
        unique_ptr<ExtractorType120_SV386_Combine> extractor_119_ptr(new ExtractorType120_SV386_Combine(inputs[119], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV120_Extract_out0));
        ExtractorType120_SV386_Combine * extractor_119 = extractor_119_ptr.get();
        ULONG extractor_119_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType121_SV386_Combine;
        unique_ptr<ExtractorType121_SV386_Combine> extractor_120_ptr(new ExtractorType121_SV386_Combine(inputs[120], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV121_Extract_out0));
        ExtractorType121_SV386_Combine * extractor_120 = extractor_120_ptr.get();
        ULONG extractor_120_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType122_SV386_Combine;
        unique_ptr<ExtractorType122_SV386_Combine> extractor_121_ptr(new ExtractorType122_SV386_Combine(inputs[121], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV122_Extract_out0));
        ExtractorType122_SV386_Combine * extractor_121 = extractor_121_ptr.get();
        ULONG extractor_121_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType123_SV386_Combine;
        unique_ptr<ExtractorType123_SV386_Combine> extractor_122_ptr(new ExtractorType123_SV386_Combine(inputs[122], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV123_Extract_out0));
        ExtractorType123_SV386_Combine * extractor_122 = extractor_122_ptr.get();
        ULONG extractor_122_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType124_SV386_Combine;
        unique_ptr<ExtractorType124_SV386_Combine> extractor_123_ptr(new ExtractorType124_SV386_Combine(inputs[123], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV124_Extract_out0));
        ExtractorType124_SV386_Combine * extractor_123 = extractor_123_ptr.get();
        ULONG extractor_123_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType125_SV386_Combine;
        unique_ptr<ExtractorType125_SV386_Combine> extractor_124_ptr(new ExtractorType125_SV386_Combine(inputs[124], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV125_Extract_out0));
        ExtractorType125_SV386_Combine * extractor_124 = extractor_124_ptr.get();
        ULONG extractor_124_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType126_SV386_Combine;
        unique_ptr<ExtractorType126_SV386_Combine> extractor_125_ptr(new ExtractorType126_SV386_Combine(inputs[125], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV126_Extract_out0));
        ExtractorType126_SV386_Combine * extractor_125 = extractor_125_ptr.get();
        ULONG extractor_125_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType127_SV386_Combine;
        unique_ptr<ExtractorType127_SV386_Combine> extractor_126_ptr(new ExtractorType127_SV386_Combine(inputs[126], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV127_Extract_out0));
        ExtractorType127_SV386_Combine * extractor_126 = extractor_126_ptr.get();
        ULONG extractor_126_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType128_SV386_Combine;
        unique_ptr<ExtractorType128_SV386_Combine> extractor_127_ptr(new ExtractorType128_SV386_Combine(inputs[127], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV128_Extract_out0));
        ExtractorType128_SV386_Combine * extractor_127 = extractor_127_ptr.get();
        ULONG extractor_127_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType129_SV386_Combine;
        unique_ptr<ExtractorType129_SV386_Combine> extractor_128_ptr(new ExtractorType129_SV386_Combine(inputs[128], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV129_Extract_out0));
        ExtractorType129_SV386_Combine * extractor_128 = extractor_128_ptr.get();
        ULONG extractor_128_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType130_SV386_Combine;
        unique_ptr<ExtractorType130_SV386_Combine> extractor_129_ptr(new ExtractorType130_SV386_Combine(inputs[129], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV130_Extract_out0));
        ExtractorType130_SV386_Combine * extractor_129 = extractor_129_ptr.get();
        ULONG extractor_129_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType131_SV386_Combine;
        unique_ptr<ExtractorType131_SV386_Combine> extractor_130_ptr(new ExtractorType131_SV386_Combine(inputs[130], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV131_Extract_out0));
        ExtractorType131_SV386_Combine * extractor_130 = extractor_130_ptr.get();
        ULONG extractor_130_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType132_SV386_Combine;
        unique_ptr<ExtractorType132_SV386_Combine> extractor_131_ptr(new ExtractorType132_SV386_Combine(inputs[131], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV132_Extract_out0));
        ExtractorType132_SV386_Combine * extractor_131 = extractor_131_ptr.get();
        ULONG extractor_131_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType133_SV386_Combine;
        unique_ptr<ExtractorType133_SV386_Combine> extractor_132_ptr(new ExtractorType133_SV386_Combine(inputs[132], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV133_Extract_out0));
        ExtractorType133_SV386_Combine * extractor_132 = extractor_132_ptr.get();
        ULONG extractor_132_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType134_SV386_Combine;
        unique_ptr<ExtractorType134_SV386_Combine> extractor_133_ptr(new ExtractorType134_SV386_Combine(inputs[133], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV134_Extract_out0));
        ExtractorType134_SV386_Combine * extractor_133 = extractor_133_ptr.get();
        ULONG extractor_133_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType135_SV386_Combine;
        unique_ptr<ExtractorType135_SV386_Combine> extractor_134_ptr(new ExtractorType135_SV386_Combine(inputs[134], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV135_Extract_out0));
        ExtractorType135_SV386_Combine * extractor_134 = extractor_134_ptr.get();
        ULONG extractor_134_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType136_SV386_Combine;
        unique_ptr<ExtractorType136_SV386_Combine> extractor_135_ptr(new ExtractorType136_SV386_Combine(inputs[135], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV136_Extract_out0));
        ExtractorType136_SV386_Combine * extractor_135 = extractor_135_ptr.get();
        ULONG extractor_135_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType137_SV386_Combine;
        unique_ptr<ExtractorType137_SV386_Combine> extractor_136_ptr(new ExtractorType137_SV386_Combine(inputs[136], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV137_Extract_out0));
        ExtractorType137_SV386_Combine * extractor_136 = extractor_136_ptr.get();
        ULONG extractor_136_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType138_SV386_Combine;
        unique_ptr<ExtractorType138_SV386_Combine> extractor_137_ptr(new ExtractorType138_SV386_Combine(inputs[137], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV138_Extract_out0));
        ExtractorType138_SV386_Combine * extractor_137 = extractor_137_ptr.get();
        ULONG extractor_137_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType139_SV386_Combine;
        unique_ptr<ExtractorType139_SV386_Combine> extractor_138_ptr(new ExtractorType139_SV386_Combine(inputs[138], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV139_Extract_out0));
        ExtractorType139_SV386_Combine * extractor_138 = extractor_138_ptr.get();
        ULONG extractor_138_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType140_SV386_Combine;
        unique_ptr<ExtractorType140_SV386_Combine> extractor_139_ptr(new ExtractorType140_SV386_Combine(inputs[139], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV140_Extract_out0));
        ExtractorType140_SV386_Combine * extractor_139 = extractor_139_ptr.get();
        ULONG extractor_139_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType141_SV386_Combine;
        unique_ptr<ExtractorType141_SV386_Combine> extractor_140_ptr(new ExtractorType141_SV386_Combine(inputs[140], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV141_Extract_out0));
        ExtractorType141_SV386_Combine * extractor_140 = extractor_140_ptr.get();
        ULONG extractor_140_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType142_SV386_Combine;
        unique_ptr<ExtractorType142_SV386_Combine> extractor_141_ptr(new ExtractorType142_SV386_Combine(inputs[141], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV142_Extract_out0));
        ExtractorType142_SV386_Combine * extractor_141 = extractor_141_ptr.get();
        ULONG extractor_141_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType143_SV386_Combine;
        unique_ptr<ExtractorType143_SV386_Combine> extractor_142_ptr(new ExtractorType143_SV386_Combine(inputs[142], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV143_Extract_out0));
        ExtractorType143_SV386_Combine * extractor_142 = extractor_142_ptr.get();
        ULONG extractor_142_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType144_SV386_Combine;
        unique_ptr<ExtractorType144_SV386_Combine> extractor_143_ptr(new ExtractorType144_SV386_Combine(inputs[143], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV144_Extract_out0));
        ExtractorType144_SV386_Combine * extractor_143 = extractor_143_ptr.get();
        ULONG extractor_143_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType145_SV386_Combine;
        unique_ptr<ExtractorType145_SV386_Combine> extractor_144_ptr(new ExtractorType145_SV386_Combine(inputs[144], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV145_Extract_out0));
        ExtractorType145_SV386_Combine * extractor_144 = extractor_144_ptr.get();
        ULONG extractor_144_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType146_SV386_Combine;
        unique_ptr<ExtractorType146_SV386_Combine> extractor_145_ptr(new ExtractorType146_SV386_Combine(inputs[145], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV146_Extract_out0));
        ExtractorType146_SV386_Combine * extractor_145 = extractor_145_ptr.get();
        ULONG extractor_145_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType147_SV386_Combine;
        unique_ptr<ExtractorType147_SV386_Combine> extractor_146_ptr(new ExtractorType147_SV386_Combine(inputs[146], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV147_Extract_out0));
        ExtractorType147_SV386_Combine * extractor_146 = extractor_146_ptr.get();
        ULONG extractor_146_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType148_SV386_Combine;
        unique_ptr<ExtractorType148_SV386_Combine> extractor_147_ptr(new ExtractorType148_SV386_Combine(inputs[147], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV148_Extract_out0));
        ExtractorType148_SV386_Combine * extractor_147 = extractor_147_ptr.get();
        ULONG extractor_147_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType149_SV386_Combine;
        unique_ptr<ExtractorType149_SV386_Combine> extractor_148_ptr(new ExtractorType149_SV386_Combine(inputs[148], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV149_Extract_out0));
        ExtractorType149_SV386_Combine * extractor_148 = extractor_148_ptr.get();
        ULONG extractor_148_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType150_SV386_Combine;
        unique_ptr<ExtractorType150_SV386_Combine> extractor_149_ptr(new ExtractorType150_SV386_Combine(inputs[149], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV150_Extract_out0));
        ExtractorType150_SV386_Combine * extractor_149 = extractor_149_ptr.get();
        ULONG extractor_149_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType151_SV386_Combine;
        unique_ptr<ExtractorType151_SV386_Combine> extractor_150_ptr(new ExtractorType151_SV386_Combine(inputs[150], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV151_Extract_out0));
        ExtractorType151_SV386_Combine * extractor_150 = extractor_150_ptr.get();
        ULONG extractor_150_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType152_SV386_Combine;
        unique_ptr<ExtractorType152_SV386_Combine> extractor_151_ptr(new ExtractorType152_SV386_Combine(inputs[151], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV152_Extract_out0));
        ExtractorType152_SV386_Combine * extractor_151 = extractor_151_ptr.get();
        ULONG extractor_151_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType153_SV386_Combine;
        unique_ptr<ExtractorType153_SV386_Combine> extractor_152_ptr(new ExtractorType153_SV386_Combine(inputs[152], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV153_Extract_out0));
        ExtractorType153_SV386_Combine * extractor_152 = extractor_152_ptr.get();
        ULONG extractor_152_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType154_SV386_Combine;
        unique_ptr<ExtractorType154_SV386_Combine> extractor_153_ptr(new ExtractorType154_SV386_Combine(inputs[153], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV154_Extract_out0));
        ExtractorType154_SV386_Combine * extractor_153 = extractor_153_ptr.get();
        ULONG extractor_153_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType155_SV386_Combine;
        unique_ptr<ExtractorType155_SV386_Combine> extractor_154_ptr(new ExtractorType155_SV386_Combine(inputs[154], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV155_Extract_out0));
        ExtractorType155_SV386_Combine * extractor_154 = extractor_154_ptr.get();
        ULONG extractor_154_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType156_SV386_Combine;
        unique_ptr<ExtractorType156_SV386_Combine> extractor_155_ptr(new ExtractorType156_SV386_Combine(inputs[155], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV156_Extract_out0));
        ExtractorType156_SV386_Combine * extractor_155 = extractor_155_ptr.get();
        ULONG extractor_155_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType157_SV386_Combine;
        unique_ptr<ExtractorType157_SV386_Combine> extractor_156_ptr(new ExtractorType157_SV386_Combine(inputs[156], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV157_Extract_out0));
        ExtractorType157_SV386_Combine * extractor_156 = extractor_156_ptr.get();
        ULONG extractor_156_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType158_SV386_Combine;
        unique_ptr<ExtractorType158_SV386_Combine> extractor_157_ptr(new ExtractorType158_SV386_Combine(inputs[157], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV158_Extract_out0));
        ExtractorType158_SV386_Combine * extractor_157 = extractor_157_ptr.get();
        ULONG extractor_157_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType159_SV386_Combine;
        unique_ptr<ExtractorType159_SV386_Combine> extractor_158_ptr(new ExtractorType159_SV386_Combine(inputs[158], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV159_Extract_out0));
        ExtractorType159_SV386_Combine * extractor_158 = extractor_158_ptr.get();
        ULONG extractor_158_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType160_SV386_Combine;
        unique_ptr<ExtractorType160_SV386_Combine> extractor_159_ptr(new ExtractorType160_SV386_Combine(inputs[159], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV160_Extract_out0));
        ExtractorType160_SV386_Combine * extractor_159 = extractor_159_ptr.get();
        ULONG extractor_159_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType161_SV386_Combine;
        unique_ptr<ExtractorType161_SV386_Combine> extractor_160_ptr(new ExtractorType161_SV386_Combine(inputs[160], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV161_Extract_out0));
        ExtractorType161_SV386_Combine * extractor_160 = extractor_160_ptr.get();
        ULONG extractor_160_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType162_SV386_Combine;
        unique_ptr<ExtractorType162_SV386_Combine> extractor_161_ptr(new ExtractorType162_SV386_Combine(inputs[161], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV162_Extract_out0));
        ExtractorType162_SV386_Combine * extractor_161 = extractor_161_ptr.get();
        ULONG extractor_161_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType163_SV386_Combine;
        unique_ptr<ExtractorType163_SV386_Combine> extractor_162_ptr(new ExtractorType163_SV386_Combine(inputs[162], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV163_Extract_out0));
        ExtractorType163_SV386_Combine * extractor_162 = extractor_162_ptr.get();
        ULONG extractor_162_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType164_SV386_Combine;
        unique_ptr<ExtractorType164_SV386_Combine> extractor_163_ptr(new ExtractorType164_SV386_Combine(inputs[163], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV164_Extract_out0));
        ExtractorType164_SV386_Combine * extractor_163 = extractor_163_ptr.get();
        ULONG extractor_163_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType165_SV386_Combine;
        unique_ptr<ExtractorType165_SV386_Combine> extractor_164_ptr(new ExtractorType165_SV386_Combine(inputs[164], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV165_Extract_out0));
        ExtractorType165_SV386_Combine * extractor_164 = extractor_164_ptr.get();
        ULONG extractor_164_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType166_SV386_Combine;
        unique_ptr<ExtractorType166_SV386_Combine> extractor_165_ptr(new ExtractorType166_SV386_Combine(inputs[165], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV166_Extract_out0));
        ExtractorType166_SV386_Combine * extractor_165 = extractor_165_ptr.get();
        ULONG extractor_165_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType167_SV386_Combine;
        unique_ptr<ExtractorType167_SV386_Combine> extractor_166_ptr(new ExtractorType167_SV386_Combine(inputs[166], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV167_Extract_out0));
        ExtractorType167_SV386_Combine * extractor_166 = extractor_166_ptr.get();
        ULONG extractor_166_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType168_SV386_Combine;
        unique_ptr<ExtractorType168_SV386_Combine> extractor_167_ptr(new ExtractorType168_SV386_Combine(inputs[167], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV168_Extract_out0));
        ExtractorType168_SV386_Combine * extractor_167 = extractor_167_ptr.get();
        ULONG extractor_167_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType169_SV386_Combine;
        unique_ptr<ExtractorType169_SV386_Combine> extractor_168_ptr(new ExtractorType169_SV386_Combine(inputs[168], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV169_Extract_out0));
        ExtractorType169_SV386_Combine * extractor_168 = extractor_168_ptr.get();
        ULONG extractor_168_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType170_SV386_Combine;
        unique_ptr<ExtractorType170_SV386_Combine> extractor_169_ptr(new ExtractorType170_SV386_Combine(inputs[169], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV170_Extract_out0));
        ExtractorType170_SV386_Combine * extractor_169 = extractor_169_ptr.get();
        ULONG extractor_169_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType171_SV386_Combine;
        unique_ptr<ExtractorType171_SV386_Combine> extractor_170_ptr(new ExtractorType171_SV386_Combine(inputs[170], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV171_Extract_out0));
        ExtractorType171_SV386_Combine * extractor_170 = extractor_170_ptr.get();
        ULONG extractor_170_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType172_SV386_Combine;
        unique_ptr<ExtractorType172_SV386_Combine> extractor_171_ptr(new ExtractorType172_SV386_Combine(inputs[171], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV172_Extract_out0));
        ExtractorType172_SV386_Combine * extractor_171 = extractor_171_ptr.get();
        ULONG extractor_171_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType173_SV386_Combine;
        unique_ptr<ExtractorType173_SV386_Combine> extractor_172_ptr(new ExtractorType173_SV386_Combine(inputs[172], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV173_Extract_out0));
        ExtractorType173_SV386_Combine * extractor_172 = extractor_172_ptr.get();
        ULONG extractor_172_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType174_SV386_Combine;
        unique_ptr<ExtractorType174_SV386_Combine> extractor_173_ptr(new ExtractorType174_SV386_Combine(inputs[173], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV174_Extract_out0));
        ExtractorType174_SV386_Combine * extractor_173 = extractor_173_ptr.get();
        ULONG extractor_173_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType175_SV386_Combine;
        unique_ptr<ExtractorType175_SV386_Combine> extractor_174_ptr(new ExtractorType175_SV386_Combine(inputs[174], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV175_Extract_out0));
        ExtractorType175_SV386_Combine * extractor_174 = extractor_174_ptr.get();
        ULONG extractor_174_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType176_SV386_Combine;
        unique_ptr<ExtractorType176_SV386_Combine> extractor_175_ptr(new ExtractorType176_SV386_Combine(inputs[175], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV176_Extract_out0));
        ExtractorType176_SV386_Combine * extractor_175 = extractor_175_ptr.get();
        ULONG extractor_175_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType177_SV386_Combine;
        unique_ptr<ExtractorType177_SV386_Combine> extractor_176_ptr(new ExtractorType177_SV386_Combine(inputs[176], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV177_Extract_out0));
        ExtractorType177_SV386_Combine * extractor_176 = extractor_176_ptr.get();
        ULONG extractor_176_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType178_SV386_Combine;
        unique_ptr<ExtractorType178_SV386_Combine> extractor_177_ptr(new ExtractorType178_SV386_Combine(inputs[177], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV178_Extract_out0));
        ExtractorType178_SV386_Combine * extractor_177 = extractor_177_ptr.get();
        ULONG extractor_177_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType179_SV386_Combine;
        unique_ptr<ExtractorType179_SV386_Combine> extractor_178_ptr(new ExtractorType179_SV386_Combine(inputs[178], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV179_Extract_out0));
        ExtractorType179_SV386_Combine * extractor_178 = extractor_178_ptr.get();
        ULONG extractor_178_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType180_SV386_Combine;
        unique_ptr<ExtractorType180_SV386_Combine> extractor_179_ptr(new ExtractorType180_SV386_Combine(inputs[179], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV180_Extract_out0));
        ExtractorType180_SV386_Combine * extractor_179 = extractor_179_ptr.get();
        ULONG extractor_179_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType181_SV386_Combine;
        unique_ptr<ExtractorType181_SV386_Combine> extractor_180_ptr(new ExtractorType181_SV386_Combine(inputs[180], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV181_Extract_out0));
        ExtractorType181_SV386_Combine * extractor_180 = extractor_180_ptr.get();
        ULONG extractor_180_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType182_SV386_Combine;
        unique_ptr<ExtractorType182_SV386_Combine> extractor_181_ptr(new ExtractorType182_SV386_Combine(inputs[181], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV182_Extract_out0));
        ExtractorType182_SV386_Combine * extractor_181 = extractor_181_ptr.get();
        ULONG extractor_181_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType183_SV386_Combine;
        unique_ptr<ExtractorType183_SV386_Combine> extractor_182_ptr(new ExtractorType183_SV386_Combine(inputs[182], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV183_Extract_out0));
        ExtractorType183_SV386_Combine * extractor_182 = extractor_182_ptr.get();
        ULONG extractor_182_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType184_SV386_Combine;
        unique_ptr<ExtractorType184_SV386_Combine> extractor_183_ptr(new ExtractorType184_SV386_Combine(inputs[183], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV184_Extract_out0));
        ExtractorType184_SV386_Combine * extractor_183 = extractor_183_ptr.get();
        ULONG extractor_183_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType185_SV386_Combine;
        unique_ptr<ExtractorType185_SV386_Combine> extractor_184_ptr(new ExtractorType185_SV386_Combine(inputs[184], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV185_Extract_out0));
        ExtractorType185_SV386_Combine * extractor_184 = extractor_184_ptr.get();
        ULONG extractor_184_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType186_SV386_Combine;
        unique_ptr<ExtractorType186_SV386_Combine> extractor_185_ptr(new ExtractorType186_SV386_Combine(inputs[185], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV186_Extract_out0));
        ExtractorType186_SV386_Combine * extractor_185 = extractor_185_ptr.get();
        ULONG extractor_185_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType187_SV386_Combine;
        unique_ptr<ExtractorType187_SV386_Combine> extractor_186_ptr(new ExtractorType187_SV386_Combine(inputs[186], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV187_Extract_out0));
        ExtractorType187_SV386_Combine * extractor_186 = extractor_186_ptr.get();
        ULONG extractor_186_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType188_SV386_Combine;
        unique_ptr<ExtractorType188_SV386_Combine> extractor_187_ptr(new ExtractorType188_SV386_Combine(inputs[187], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV188_Extract_out0));
        ExtractorType188_SV386_Combine * extractor_187 = extractor_187_ptr.get();
        ULONG extractor_187_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType189_SV386_Combine;
        unique_ptr<ExtractorType189_SV386_Combine> extractor_188_ptr(new ExtractorType189_SV386_Combine(inputs[188], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV189_Extract_out0));
        ExtractorType189_SV386_Combine * extractor_188 = extractor_188_ptr.get();
        ULONG extractor_188_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType190_SV386_Combine;
        unique_ptr<ExtractorType190_SV386_Combine> extractor_189_ptr(new ExtractorType190_SV386_Combine(inputs[189], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV190_Extract_out0));
        ExtractorType190_SV386_Combine * extractor_189 = extractor_189_ptr.get();
        ULONG extractor_189_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType191_SV386_Combine;
        unique_ptr<ExtractorType191_SV386_Combine> extractor_190_ptr(new ExtractorType191_SV386_Combine(inputs[190], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV191_Extract_out0));
        ExtractorType191_SV386_Combine * extractor_190 = extractor_190_ptr.get();
        ULONG extractor_190_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType192_SV386_Combine;
        unique_ptr<ExtractorType192_SV386_Combine> extractor_191_ptr(new ExtractorType192_SV386_Combine(inputs[191], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV192_Extract_out0));
        ExtractorType192_SV386_Combine * extractor_191 = extractor_191_ptr.get();
        ULONG extractor_191_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType193_SV386_Combine;
        unique_ptr<ExtractorType193_SV386_Combine> extractor_192_ptr(new ExtractorType193_SV386_Combine(inputs[192], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV193_Extract_out0));
        ExtractorType193_SV386_Combine * extractor_192 = extractor_192_ptr.get();
        ULONG extractor_192_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType194_SV386_Combine;
        unique_ptr<ExtractorType194_SV386_Combine> extractor_193_ptr(new ExtractorType194_SV386_Combine(inputs[193], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV194_Extract_out0));
        ExtractorType194_SV386_Combine * extractor_193 = extractor_193_ptr.get();
        ULONG extractor_193_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType195_SV386_Combine;
        unique_ptr<ExtractorType195_SV386_Combine> extractor_194_ptr(new ExtractorType195_SV386_Combine(inputs[194], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV195_Extract_out0));
        ExtractorType195_SV386_Combine * extractor_194 = extractor_194_ptr.get();
        ULONG extractor_194_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType196_SV386_Combine;
        unique_ptr<ExtractorType196_SV386_Combine> extractor_195_ptr(new ExtractorType196_SV386_Combine(inputs[195], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV196_Extract_out0));
        ExtractorType196_SV386_Combine * extractor_195 = extractor_195_ptr.get();
        ULONG extractor_195_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType197_SV386_Combine;
        unique_ptr<ExtractorType197_SV386_Combine> extractor_196_ptr(new ExtractorType197_SV386_Combine(inputs[196], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV197_Extract_out0));
        ExtractorType197_SV386_Combine * extractor_196 = extractor_196_ptr.get();
        ULONG extractor_196_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType198_SV386_Combine;
        unique_ptr<ExtractorType198_SV386_Combine> extractor_197_ptr(new ExtractorType198_SV386_Combine(inputs[197], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV198_Extract_out0));
        ExtractorType198_SV386_Combine * extractor_197 = extractor_197_ptr.get();
        ULONG extractor_197_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType199_SV386_Combine;
        unique_ptr<ExtractorType199_SV386_Combine> extractor_198_ptr(new ExtractorType199_SV386_Combine(inputs[198], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV199_Extract_out0));
        ExtractorType199_SV386_Combine * extractor_198 = extractor_198_ptr.get();
        ULONG extractor_198_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType200_SV386_Combine;
        unique_ptr<ExtractorType200_SV386_Combine> extractor_199_ptr(new ExtractorType200_SV386_Combine(inputs[199], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV200_Extract_out0));
        ExtractorType200_SV386_Combine * extractor_199 = extractor_199_ptr.get();
        ULONG extractor_199_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType201_SV386_Combine;
        unique_ptr<ExtractorType201_SV386_Combine> extractor_200_ptr(new ExtractorType201_SV386_Combine(inputs[200], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV201_Extract_out0));
        ExtractorType201_SV386_Combine * extractor_200 = extractor_200_ptr.get();
        ULONG extractor_200_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType202_SV386_Combine;
        unique_ptr<ExtractorType202_SV386_Combine> extractor_201_ptr(new ExtractorType202_SV386_Combine(inputs[201], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV202_Extract_out0));
        ExtractorType202_SV386_Combine * extractor_201 = extractor_201_ptr.get();
        ULONG extractor_201_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType203_SV386_Combine;
        unique_ptr<ExtractorType203_SV386_Combine> extractor_202_ptr(new ExtractorType203_SV386_Combine(inputs[202], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV203_Extract_out0));
        ExtractorType203_SV386_Combine * extractor_202 = extractor_202_ptr.get();
        ULONG extractor_202_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType204_SV386_Combine;
        unique_ptr<ExtractorType204_SV386_Combine> extractor_203_ptr(new ExtractorType204_SV386_Combine(inputs[203], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV204_Extract_out0));
        ExtractorType204_SV386_Combine * extractor_203 = extractor_203_ptr.get();
        ULONG extractor_203_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType205_SV386_Combine;
        unique_ptr<ExtractorType205_SV386_Combine> extractor_204_ptr(new ExtractorType205_SV386_Combine(inputs[204], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV205_Extract_out0));
        ExtractorType205_SV386_Combine * extractor_204 = extractor_204_ptr.get();
        ULONG extractor_204_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType206_SV386_Combine;
        unique_ptr<ExtractorType206_SV386_Combine> extractor_205_ptr(new ExtractorType206_SV386_Combine(inputs[205], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV206_Extract_out0));
        ExtractorType206_SV386_Combine * extractor_205 = extractor_205_ptr.get();
        ULONG extractor_205_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType207_SV386_Combine;
        unique_ptr<ExtractorType207_SV386_Combine> extractor_206_ptr(new ExtractorType207_SV386_Combine(inputs[206], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV207_Extract_out0));
        ExtractorType207_SV386_Combine * extractor_206 = extractor_206_ptr.get();
        ULONG extractor_206_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType208_SV386_Combine;
        unique_ptr<ExtractorType208_SV386_Combine> extractor_207_ptr(new ExtractorType208_SV386_Combine(inputs[207], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV208_Extract_out0));
        ExtractorType208_SV386_Combine * extractor_207 = extractor_207_ptr.get();
        ULONG extractor_207_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType209_SV386_Combine;
        unique_ptr<ExtractorType209_SV386_Combine> extractor_208_ptr(new ExtractorType209_SV386_Combine(inputs[208], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV209_Extract_out0));
        ExtractorType209_SV386_Combine * extractor_208 = extractor_208_ptr.get();
        ULONG extractor_208_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType210_SV386_Combine;
        unique_ptr<ExtractorType210_SV386_Combine> extractor_209_ptr(new ExtractorType210_SV386_Combine(inputs[209], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV210_Extract_out0));
        ExtractorType210_SV386_Combine * extractor_209 = extractor_209_ptr.get();
        ULONG extractor_209_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType211_SV386_Combine;
        unique_ptr<ExtractorType211_SV386_Combine> extractor_210_ptr(new ExtractorType211_SV386_Combine(inputs[210], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV211_Extract_out0));
        ExtractorType211_SV386_Combine * extractor_210 = extractor_210_ptr.get();
        ULONG extractor_210_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType212_SV386_Combine;
        unique_ptr<ExtractorType212_SV386_Combine> extractor_211_ptr(new ExtractorType212_SV386_Combine(inputs[211], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV212_Extract_out0));
        ExtractorType212_SV386_Combine * extractor_211 = extractor_211_ptr.get();
        ULONG extractor_211_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType213_SV386_Combine;
        unique_ptr<ExtractorType213_SV386_Combine> extractor_212_ptr(new ExtractorType213_SV386_Combine(inputs[212], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV213_Extract_out0));
        ExtractorType213_SV386_Combine * extractor_212 = extractor_212_ptr.get();
        ULONG extractor_212_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType214_SV386_Combine;
        unique_ptr<ExtractorType214_SV386_Combine> extractor_213_ptr(new ExtractorType214_SV386_Combine(inputs[213], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV214_Extract_out0));
        ExtractorType214_SV386_Combine * extractor_213 = extractor_213_ptr.get();
        ULONG extractor_213_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType215_SV386_Combine;
        unique_ptr<ExtractorType215_SV386_Combine> extractor_214_ptr(new ExtractorType215_SV386_Combine(inputs[214], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV215_Extract_out0));
        ExtractorType215_SV386_Combine * extractor_214 = extractor_214_ptr.get();
        ULONG extractor_214_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType216_SV386_Combine;
        unique_ptr<ExtractorType216_SV386_Combine> extractor_215_ptr(new ExtractorType216_SV386_Combine(inputs[215], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV216_Extract_out0));
        ExtractorType216_SV386_Combine * extractor_215 = extractor_215_ptr.get();
        ULONG extractor_215_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType217_SV386_Combine;
        unique_ptr<ExtractorType217_SV386_Combine> extractor_216_ptr(new ExtractorType217_SV386_Combine(inputs[216], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV217_Extract_out0));
        ExtractorType217_SV386_Combine * extractor_216 = extractor_216_ptr.get();
        ULONG extractor_216_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType218_SV386_Combine;
        unique_ptr<ExtractorType218_SV386_Combine> extractor_217_ptr(new ExtractorType218_SV386_Combine(inputs[217], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV218_Extract_out0));
        ExtractorType218_SV386_Combine * extractor_217 = extractor_217_ptr.get();
        ULONG extractor_217_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType219_SV386_Combine;
        unique_ptr<ExtractorType219_SV386_Combine> extractor_218_ptr(new ExtractorType219_SV386_Combine(inputs[218], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV219_Extract_out0));
        ExtractorType219_SV386_Combine * extractor_218 = extractor_218_ptr.get();
        ULONG extractor_218_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType220_SV386_Combine;
        unique_ptr<ExtractorType220_SV386_Combine> extractor_219_ptr(new ExtractorType220_SV386_Combine(inputs[219], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV220_Extract_out0));
        ExtractorType220_SV386_Combine * extractor_219 = extractor_219_ptr.get();
        ULONG extractor_219_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType221_SV386_Combine;
        unique_ptr<ExtractorType221_SV386_Combine> extractor_220_ptr(new ExtractorType221_SV386_Combine(inputs[220], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV221_Extract_out0));
        ExtractorType221_SV386_Combine * extractor_220 = extractor_220_ptr.get();
        ULONG extractor_220_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType222_SV386_Combine;
        unique_ptr<ExtractorType222_SV386_Combine> extractor_221_ptr(new ExtractorType222_SV386_Combine(inputs[221], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV222_Extract_out0));
        ExtractorType222_SV386_Combine * extractor_221 = extractor_221_ptr.get();
        ULONG extractor_221_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType223_SV386_Combine;
        unique_ptr<ExtractorType223_SV386_Combine> extractor_222_ptr(new ExtractorType223_SV386_Combine(inputs[222], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV223_Extract_out0));
        ExtractorType223_SV386_Combine * extractor_222 = extractor_222_ptr.get();
        ULONG extractor_222_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType224_SV386_Combine;
        unique_ptr<ExtractorType224_SV386_Combine> extractor_223_ptr(new ExtractorType224_SV386_Combine(inputs[223], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV224_Extract_out0));
        ExtractorType224_SV386_Combine * extractor_223 = extractor_223_ptr.get();
        ULONG extractor_223_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType225_SV386_Combine;
        unique_ptr<ExtractorType225_SV386_Combine> extractor_224_ptr(new ExtractorType225_SV386_Combine(inputs[224], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV225_Extract_out0));
        ExtractorType225_SV386_Combine * extractor_224 = extractor_224_ptr.get();
        ULONG extractor_224_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType226_SV386_Combine;
        unique_ptr<ExtractorType226_SV386_Combine> extractor_225_ptr(new ExtractorType226_SV386_Combine(inputs[225], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV226_Extract_out0));
        ExtractorType226_SV386_Combine * extractor_225 = extractor_225_ptr.get();
        ULONG extractor_225_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType227_SV386_Combine;
        unique_ptr<ExtractorType227_SV386_Combine> extractor_226_ptr(new ExtractorType227_SV386_Combine(inputs[226], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV227_Extract_out0));
        ExtractorType227_SV386_Combine * extractor_226 = extractor_226_ptr.get();
        ULONG extractor_226_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType228_SV386_Combine;
        unique_ptr<ExtractorType228_SV386_Combine> extractor_227_ptr(new ExtractorType228_SV386_Combine(inputs[227], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV228_Extract_out0));
        ExtractorType228_SV386_Combine * extractor_227 = extractor_227_ptr.get();
        ULONG extractor_227_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType229_SV386_Combine;
        unique_ptr<ExtractorType229_SV386_Combine> extractor_228_ptr(new ExtractorType229_SV386_Combine(inputs[228], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV229_Extract_out0));
        ExtractorType229_SV386_Combine * extractor_228 = extractor_228_ptr.get();
        ULONG extractor_228_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType230_SV386_Combine;
        unique_ptr<ExtractorType230_SV386_Combine> extractor_229_ptr(new ExtractorType230_SV386_Combine(inputs[229], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV230_Extract_out0));
        ExtractorType230_SV386_Combine * extractor_229 = extractor_229_ptr.get();
        ULONG extractor_229_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType231_SV386_Combine;
        unique_ptr<ExtractorType231_SV386_Combine> extractor_230_ptr(new ExtractorType231_SV386_Combine(inputs[230], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV231_Extract_out0));
        ExtractorType231_SV386_Combine * extractor_230 = extractor_230_ptr.get();
        ULONG extractor_230_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType232_SV386_Combine;
        unique_ptr<ExtractorType232_SV386_Combine> extractor_231_ptr(new ExtractorType232_SV386_Combine(inputs[231], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV232_Extract_out0));
        ExtractorType232_SV386_Combine * extractor_231 = extractor_231_ptr.get();
        ULONG extractor_231_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType233_SV386_Combine;
        unique_ptr<ExtractorType233_SV386_Combine> extractor_232_ptr(new ExtractorType233_SV386_Combine(inputs[232], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV233_Extract_out0));
        ExtractorType233_SV386_Combine * extractor_232 = extractor_232_ptr.get();
        ULONG extractor_232_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType234_SV386_Combine;
        unique_ptr<ExtractorType234_SV386_Combine> extractor_233_ptr(new ExtractorType234_SV386_Combine(inputs[233], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV234_Extract_out0));
        ExtractorType234_SV386_Combine * extractor_233 = extractor_233_ptr.get();
        ULONG extractor_233_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType235_SV386_Combine;
        unique_ptr<ExtractorType235_SV386_Combine> extractor_234_ptr(new ExtractorType235_SV386_Combine(inputs[234], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV235_Extract_out0));
        ExtractorType235_SV386_Combine * extractor_234 = extractor_234_ptr.get();
        ULONG extractor_234_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType236_SV386_Combine;
        unique_ptr<ExtractorType236_SV386_Combine> extractor_235_ptr(new ExtractorType236_SV386_Combine(inputs[235], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV236_Extract_out0));
        ExtractorType236_SV386_Combine * extractor_235 = extractor_235_ptr.get();
        ULONG extractor_235_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType237_SV386_Combine;
        unique_ptr<ExtractorType237_SV386_Combine> extractor_236_ptr(new ExtractorType237_SV386_Combine(inputs[236], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV237_Extract_out0));
        ExtractorType237_SV386_Combine * extractor_236 = extractor_236_ptr.get();
        ULONG extractor_236_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType238_SV386_Combine;
        unique_ptr<ExtractorType238_SV386_Combine> extractor_237_ptr(new ExtractorType238_SV386_Combine(inputs[237], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV238_Extract_out0));
        ExtractorType238_SV386_Combine * extractor_237 = extractor_237_ptr.get();
        ULONG extractor_237_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType239_SV386_Combine;
        unique_ptr<ExtractorType239_SV386_Combine> extractor_238_ptr(new ExtractorType239_SV386_Combine(inputs[238], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV239_Extract_out0));
        ExtractorType239_SV386_Combine * extractor_238 = extractor_238_ptr.get();
        ULONG extractor_238_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType240_SV386_Combine;
        unique_ptr<ExtractorType240_SV386_Combine> extractor_239_ptr(new ExtractorType240_SV386_Combine(inputs[239], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV240_Extract_out0));
        ExtractorType240_SV386_Combine * extractor_239 = extractor_239_ptr.get();
        ULONG extractor_239_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType241_SV386_Combine;
        unique_ptr<ExtractorType241_SV386_Combine> extractor_240_ptr(new ExtractorType241_SV386_Combine(inputs[240], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV241_Extract_out0));
        ExtractorType241_SV386_Combine * extractor_240 = extractor_240_ptr.get();
        ULONG extractor_240_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType242_SV386_Combine;
        unique_ptr<ExtractorType242_SV386_Combine> extractor_241_ptr(new ExtractorType242_SV386_Combine(inputs[241], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV242_Extract_out0));
        ExtractorType242_SV386_Combine * extractor_241 = extractor_241_ptr.get();
        ULONG extractor_241_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType243_SV386_Combine;
        unique_ptr<ExtractorType243_SV386_Combine> extractor_242_ptr(new ExtractorType243_SV386_Combine(inputs[242], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV243_Extract_out0));
        ExtractorType243_SV386_Combine * extractor_242 = extractor_242_ptr.get();
        ULONG extractor_242_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType244_SV386_Combine;
        unique_ptr<ExtractorType244_SV386_Combine> extractor_243_ptr(new ExtractorType244_SV386_Combine(inputs[243], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV244_Extract_out0));
        ExtractorType244_SV386_Combine * extractor_243 = extractor_243_ptr.get();
        ULONG extractor_243_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType245_SV386_Combine;
        unique_ptr<ExtractorType245_SV386_Combine> extractor_244_ptr(new ExtractorType245_SV386_Combine(inputs[244], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV245_Extract_out0));
        ExtractorType245_SV386_Combine * extractor_244 = extractor_244_ptr.get();
        ULONG extractor_244_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType246_SV386_Combine;
        unique_ptr<ExtractorType246_SV386_Combine> extractor_245_ptr(new ExtractorType246_SV386_Combine(inputs[245], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV246_Extract_out0));
        ExtractorType246_SV386_Combine * extractor_245 = extractor_245_ptr.get();
        ULONG extractor_245_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType247_SV386_Combine;
        unique_ptr<ExtractorType247_SV386_Combine> extractor_246_ptr(new ExtractorType247_SV386_Combine(inputs[246], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV247_Extract_out0));
        ExtractorType247_SV386_Combine * extractor_246 = extractor_246_ptr.get();
        ULONG extractor_246_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType248_SV386_Combine;
        unique_ptr<ExtractorType248_SV386_Combine> extractor_247_ptr(new ExtractorType248_SV386_Combine(inputs[247], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV248_Extract_out0));
        ExtractorType248_SV386_Combine * extractor_247 = extractor_247_ptr.get();
        ULONG extractor_247_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType249_SV386_Combine;
        unique_ptr<ExtractorType249_SV386_Combine> extractor_248_ptr(new ExtractorType249_SV386_Combine(inputs[248], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV249_Extract_out0));
        ExtractorType249_SV386_Combine * extractor_248 = extractor_248_ptr.get();
        ULONG extractor_248_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType250_SV386_Combine;
        unique_ptr<ExtractorType250_SV386_Combine> extractor_249_ptr(new ExtractorType250_SV386_Combine(inputs[249], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV250_Extract_out0));
        ExtractorType250_SV386_Combine * extractor_249 = extractor_249_ptr.get();
        ULONG extractor_249_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType251_SV386_Combine;
        unique_ptr<ExtractorType251_SV386_Combine> extractor_250_ptr(new ExtractorType251_SV386_Combine(inputs[250], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV251_Extract_out0));
        ExtractorType251_SV386_Combine * extractor_250 = extractor_250_ptr.get();
        ULONG extractor_250_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType252_SV386_Combine;
        unique_ptr<ExtractorType252_SV386_Combine> extractor_251_ptr(new ExtractorType252_SV386_Combine(inputs[251], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV252_Extract_out0));
        ExtractorType252_SV386_Combine * extractor_251 = extractor_251_ptr.get();
        ULONG extractor_251_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType253_SV386_Combine;
        unique_ptr<ExtractorType253_SV386_Combine> extractor_252_ptr(new ExtractorType253_SV386_Combine(inputs[252], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV253_Extract_out0));
        ExtractorType253_SV386_Combine * extractor_252 = extractor_252_ptr.get();
        ULONG extractor_252_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType254_SV386_Combine;
        unique_ptr<ExtractorType254_SV386_Combine> extractor_253_ptr(new ExtractorType254_SV386_Combine(inputs[253], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV254_Extract_out0));
        ExtractorType254_SV386_Combine * extractor_253 = extractor_253_ptr.get();
        ULONG extractor_253_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType255_SV386_Combine;
        unique_ptr<ExtractorType255_SV386_Combine> extractor_254_ptr(new ExtractorType255_SV386_Combine(inputs[254], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV255_Extract_out0));
        ExtractorType255_SV386_Combine * extractor_254 = extractor_254_ptr.get();
        ULONG extractor_254_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType256_SV386_Combine;
        unique_ptr<ExtractorType256_SV386_Combine> extractor_255_ptr(new ExtractorType256_SV386_Combine(inputs[255], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV256_Extract_out0));
        ExtractorType256_SV386_Combine * extractor_255 = extractor_255_ptr.get();
        ULONG extractor_255_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType257_SV386_Combine;
        unique_ptr<ExtractorType257_SV386_Combine> extractor_256_ptr(new ExtractorType257_SV386_Combine(inputs[256], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV257_Extract_out0));
        ExtractorType257_SV386_Combine * extractor_256 = extractor_256_ptr.get();
        ULONG extractor_256_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType258_SV386_Combine;
        unique_ptr<ExtractorType258_SV386_Combine> extractor_257_ptr(new ExtractorType258_SV386_Combine(inputs[257], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV258_Extract_out0));
        ExtractorType258_SV386_Combine * extractor_257 = extractor_257_ptr.get();
        ULONG extractor_257_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType259_SV386_Combine;
        unique_ptr<ExtractorType259_SV386_Combine> extractor_258_ptr(new ExtractorType259_SV386_Combine(inputs[258], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV259_Extract_out0));
        ExtractorType259_SV386_Combine * extractor_258 = extractor_258_ptr.get();
        ULONG extractor_258_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType260_SV386_Combine;
        unique_ptr<ExtractorType260_SV386_Combine> extractor_259_ptr(new ExtractorType260_SV386_Combine(inputs[259], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV260_Extract_out0));
        ExtractorType260_SV386_Combine * extractor_259 = extractor_259_ptr.get();
        ULONG extractor_259_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType261_SV386_Combine;
        unique_ptr<ExtractorType261_SV386_Combine> extractor_260_ptr(new ExtractorType261_SV386_Combine(inputs[260], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV261_Extract_out0));
        ExtractorType261_SV386_Combine * extractor_260 = extractor_260_ptr.get();
        ULONG extractor_260_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType262_SV386_Combine;
        unique_ptr<ExtractorType262_SV386_Combine> extractor_261_ptr(new ExtractorType262_SV386_Combine(inputs[261], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV262_Extract_out0));
        ExtractorType262_SV386_Combine * extractor_261 = extractor_261_ptr.get();
        ULONG extractor_261_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType263_SV386_Combine;
        unique_ptr<ExtractorType263_SV386_Combine> extractor_262_ptr(new ExtractorType263_SV386_Combine(inputs[262], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV263_Extract_out0));
        ExtractorType263_SV386_Combine * extractor_262 = extractor_262_ptr.get();
        ULONG extractor_262_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType264_SV386_Combine;
        unique_ptr<ExtractorType264_SV386_Combine> extractor_263_ptr(new ExtractorType264_SV386_Combine(inputs[263], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV264_Extract_out0));
        ExtractorType264_SV386_Combine * extractor_263 = extractor_263_ptr.get();
        ULONG extractor_263_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType265_SV386_Combine;
        unique_ptr<ExtractorType265_SV386_Combine> extractor_264_ptr(new ExtractorType265_SV386_Combine(inputs[264], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV265_Extract_out0));
        ExtractorType265_SV386_Combine * extractor_264 = extractor_264_ptr.get();
        ULONG extractor_264_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType266_SV386_Combine;
        unique_ptr<ExtractorType266_SV386_Combine> extractor_265_ptr(new ExtractorType266_SV386_Combine(inputs[265], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV266_Extract_out0));
        ExtractorType266_SV386_Combine * extractor_265 = extractor_265_ptr.get();
        ULONG extractor_265_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType267_SV386_Combine;
        unique_ptr<ExtractorType267_SV386_Combine> extractor_266_ptr(new ExtractorType267_SV386_Combine(inputs[266], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV267_Extract_out0));
        ExtractorType267_SV386_Combine * extractor_266 = extractor_266_ptr.get();
        ULONG extractor_266_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType268_SV386_Combine;
        unique_ptr<ExtractorType268_SV386_Combine> extractor_267_ptr(new ExtractorType268_SV386_Combine(inputs[267], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV268_Extract_out0));
        ExtractorType268_SV386_Combine * extractor_267 = extractor_267_ptr.get();
        ULONG extractor_267_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType269_SV386_Combine;
        unique_ptr<ExtractorType269_SV386_Combine> extractor_268_ptr(new ExtractorType269_SV386_Combine(inputs[268], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV269_Extract_out0));
        ExtractorType269_SV386_Combine * extractor_268 = extractor_268_ptr.get();
        ULONG extractor_268_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType270_SV386_Combine;
        unique_ptr<ExtractorType270_SV386_Combine> extractor_269_ptr(new ExtractorType270_SV386_Combine(inputs[269], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV270_Extract_out0));
        ExtractorType270_SV386_Combine * extractor_269 = extractor_269_ptr.get();
        ULONG extractor_269_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType271_SV386_Combine;
        unique_ptr<ExtractorType271_SV386_Combine> extractor_270_ptr(new ExtractorType271_SV386_Combine(inputs[270], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV271_Extract_out0));
        ExtractorType271_SV386_Combine * extractor_270 = extractor_270_ptr.get();
        ULONG extractor_270_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType272_SV386_Combine;
        unique_ptr<ExtractorType272_SV386_Combine> extractor_271_ptr(new ExtractorType272_SV386_Combine(inputs[271], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV272_Extract_out0));
        ExtractorType272_SV386_Combine * extractor_271 = extractor_271_ptr.get();
        ULONG extractor_271_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType273_SV386_Combine;
        unique_ptr<ExtractorType273_SV386_Combine> extractor_272_ptr(new ExtractorType273_SV386_Combine(inputs[272], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV273_Extract_out0));
        ExtractorType273_SV386_Combine * extractor_272 = extractor_272_ptr.get();
        ULONG extractor_272_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType274_SV386_Combine;
        unique_ptr<ExtractorType274_SV386_Combine> extractor_273_ptr(new ExtractorType274_SV386_Combine(inputs[273], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV274_Extract_out0));
        ExtractorType274_SV386_Combine * extractor_273 = extractor_273_ptr.get();
        ULONG extractor_273_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType275_SV386_Combine;
        unique_ptr<ExtractorType275_SV386_Combine> extractor_274_ptr(new ExtractorType275_SV386_Combine(inputs[274], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV275_Extract_out0));
        ExtractorType275_SV386_Combine * extractor_274 = extractor_274_ptr.get();
        ULONG extractor_274_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType276_SV386_Combine;
        unique_ptr<ExtractorType276_SV386_Combine> extractor_275_ptr(new ExtractorType276_SV386_Combine(inputs[275], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV276_Extract_out0));
        ExtractorType276_SV386_Combine * extractor_275 = extractor_275_ptr.get();
        ULONG extractor_275_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType277_SV386_Combine;
        unique_ptr<ExtractorType277_SV386_Combine> extractor_276_ptr(new ExtractorType277_SV386_Combine(inputs[276], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV277_Extract_out0));
        ExtractorType277_SV386_Combine * extractor_276 = extractor_276_ptr.get();
        ULONG extractor_276_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType278_SV386_Combine;
        unique_ptr<ExtractorType278_SV386_Combine> extractor_277_ptr(new ExtractorType278_SV386_Combine(inputs[277], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV278_Extract_out0));
        ExtractorType278_SV386_Combine * extractor_277 = extractor_277_ptr.get();
        ULONG extractor_277_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType279_SV386_Combine;
        unique_ptr<ExtractorType279_SV386_Combine> extractor_278_ptr(new ExtractorType279_SV386_Combine(inputs[278], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV279_Extract_out0));
        ExtractorType279_SV386_Combine * extractor_278 = extractor_278_ptr.get();
        ULONG extractor_278_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType280_SV386_Combine;
        unique_ptr<ExtractorType280_SV386_Combine> extractor_279_ptr(new ExtractorType280_SV386_Combine(inputs[279], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV280_Extract_out0));
        ExtractorType280_SV386_Combine * extractor_279 = extractor_279_ptr.get();
        ULONG extractor_279_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType281_SV386_Combine;
        unique_ptr<ExtractorType281_SV386_Combine> extractor_280_ptr(new ExtractorType281_SV386_Combine(inputs[280], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV281_Extract_out0));
        ExtractorType281_SV386_Combine * extractor_280 = extractor_280_ptr.get();
        ULONG extractor_280_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType282_SV386_Combine;
        unique_ptr<ExtractorType282_SV386_Combine> extractor_281_ptr(new ExtractorType282_SV386_Combine(inputs[281], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV282_Extract_out0));
        ExtractorType282_SV386_Combine * extractor_281 = extractor_281_ptr.get();
        ULONG extractor_281_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType283_SV386_Combine;
        unique_ptr<ExtractorType283_SV386_Combine> extractor_282_ptr(new ExtractorType283_SV386_Combine(inputs[282], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV283_Extract_out0));
        ExtractorType283_SV386_Combine * extractor_282 = extractor_282_ptr.get();
        ULONG extractor_282_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType284_SV386_Combine;
        unique_ptr<ExtractorType284_SV386_Combine> extractor_283_ptr(new ExtractorType284_SV386_Combine(inputs[283], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV284_Extract_out0));
        ExtractorType284_SV386_Combine * extractor_283 = extractor_283_ptr.get();
        ULONG extractor_283_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType285_SV386_Combine;
        unique_ptr<ExtractorType285_SV386_Combine> extractor_284_ptr(new ExtractorType285_SV386_Combine(inputs[284], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV285_Extract_out0));
        ExtractorType285_SV386_Combine * extractor_284 = extractor_284_ptr.get();
        ULONG extractor_284_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType286_SV386_Combine;
        unique_ptr<ExtractorType286_SV386_Combine> extractor_285_ptr(new ExtractorType286_SV386_Combine(inputs[285], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV286_Extract_out0));
        ExtractorType286_SV386_Combine * extractor_285 = extractor_285_ptr.get();
        ULONG extractor_285_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType287_SV386_Combine;
        unique_ptr<ExtractorType287_SV386_Combine> extractor_286_ptr(new ExtractorType287_SV386_Combine(inputs[286], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV287_Extract_out0));
        ExtractorType287_SV386_Combine * extractor_286 = extractor_286_ptr.get();
        ULONG extractor_286_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType288_SV386_Combine;
        unique_ptr<ExtractorType288_SV386_Combine> extractor_287_ptr(new ExtractorType288_SV386_Combine(inputs[287], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV288_Extract_out0));
        ExtractorType288_SV386_Combine * extractor_287 = extractor_287_ptr.get();
        ULONG extractor_287_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType289_SV386_Combine;
        unique_ptr<ExtractorType289_SV386_Combine> extractor_288_ptr(new ExtractorType289_SV386_Combine(inputs[288], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV289_Extract_out0));
        ExtractorType289_SV386_Combine * extractor_288 = extractor_288_ptr.get();
        ULONG extractor_288_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType290_SV386_Combine;
        unique_ptr<ExtractorType290_SV386_Combine> extractor_289_ptr(new ExtractorType290_SV386_Combine(inputs[289], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV290_Extract_out0));
        ExtractorType290_SV386_Combine * extractor_289 = extractor_289_ptr.get();
        ULONG extractor_289_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType291_SV386_Combine;
        unique_ptr<ExtractorType291_SV386_Combine> extractor_290_ptr(new ExtractorType291_SV386_Combine(inputs[290], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV291_Extract_out0));
        ExtractorType291_SV386_Combine * extractor_290 = extractor_290_ptr.get();
        ULONG extractor_290_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType292_SV386_Combine;
        unique_ptr<ExtractorType292_SV386_Combine> extractor_291_ptr(new ExtractorType292_SV386_Combine(inputs[291], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV292_Extract_out0));
        ExtractorType292_SV386_Combine * extractor_291 = extractor_291_ptr.get();
        ULONG extractor_291_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType293_SV386_Combine;
        unique_ptr<ExtractorType293_SV386_Combine> extractor_292_ptr(new ExtractorType293_SV386_Combine(inputs[292], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV293_Extract_out0));
        ExtractorType293_SV386_Combine * extractor_292 = extractor_292_ptr.get();
        ULONG extractor_292_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType294_SV386_Combine;
        unique_ptr<ExtractorType294_SV386_Combine> extractor_293_ptr(new ExtractorType294_SV386_Combine(inputs[293], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV294_Extract_out0));
        ExtractorType294_SV386_Combine * extractor_293 = extractor_293_ptr.get();
        ULONG extractor_293_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType295_SV386_Combine;
        unique_ptr<ExtractorType295_SV386_Combine> extractor_294_ptr(new ExtractorType295_SV386_Combine(inputs[294], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV295_Extract_out0));
        ExtractorType295_SV386_Combine * extractor_294 = extractor_294_ptr.get();
        ULONG extractor_294_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType296_SV386_Combine;
        unique_ptr<ExtractorType296_SV386_Combine> extractor_295_ptr(new ExtractorType296_SV386_Combine(inputs[295], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV296_Extract_out0));
        ExtractorType296_SV386_Combine * extractor_295 = extractor_295_ptr.get();
        ULONG extractor_295_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType297_SV386_Combine;
        unique_ptr<ExtractorType297_SV386_Combine> extractor_296_ptr(new ExtractorType297_SV386_Combine(inputs[296], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV297_Extract_out0));
        ExtractorType297_SV386_Combine * extractor_296 = extractor_296_ptr.get();
        ULONG extractor_296_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType298_SV386_Combine;
        unique_ptr<ExtractorType298_SV386_Combine> extractor_297_ptr(new ExtractorType298_SV386_Combine(inputs[297], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV298_Extract_out0));
        ExtractorType298_SV386_Combine * extractor_297 = extractor_297_ptr.get();
        ULONG extractor_297_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType299_SV386_Combine;
        unique_ptr<ExtractorType299_SV386_Combine> extractor_298_ptr(new ExtractorType299_SV386_Combine(inputs[298], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV299_Extract_out0));
        ExtractorType299_SV386_Combine * extractor_298 = extractor_298_ptr.get();
        ULONG extractor_298_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType300_SV386_Combine;
        unique_ptr<ExtractorType300_SV386_Combine> extractor_299_ptr(new ExtractorType300_SV386_Combine(inputs[299], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV300_Extract_out0));
        ExtractorType300_SV386_Combine * extractor_299 = extractor_299_ptr.get();
        ULONG extractor_299_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType301_SV386_Combine;
        unique_ptr<ExtractorType301_SV386_Combine> extractor_300_ptr(new ExtractorType301_SV386_Combine(inputs[300], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV301_Extract_out0));
        ExtractorType301_SV386_Combine * extractor_300 = extractor_300_ptr.get();
        ULONG extractor_300_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType302_SV386_Combine;
        unique_ptr<ExtractorType302_SV386_Combine> extractor_301_ptr(new ExtractorType302_SV386_Combine(inputs[301], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV302_Extract_out0));
        ExtractorType302_SV386_Combine * extractor_301 = extractor_301_ptr.get();
        ULONG extractor_301_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType303_SV386_Combine;
        unique_ptr<ExtractorType303_SV386_Combine> extractor_302_ptr(new ExtractorType303_SV386_Combine(inputs[302], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV303_Extract_out0));
        ExtractorType303_SV386_Combine * extractor_302 = extractor_302_ptr.get();
        ULONG extractor_302_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType304_SV386_Combine;
        unique_ptr<ExtractorType304_SV386_Combine> extractor_303_ptr(new ExtractorType304_SV386_Combine(inputs[303], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV304_Extract_out0));
        ExtractorType304_SV386_Combine * extractor_303 = extractor_303_ptr.get();
        ULONG extractor_303_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType305_SV386_Combine;
        unique_ptr<ExtractorType305_SV386_Combine> extractor_304_ptr(new ExtractorType305_SV386_Combine(inputs[304], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV305_Extract_out0));
        ExtractorType305_SV386_Combine * extractor_304 = extractor_304_ptr.get();
        ULONG extractor_304_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType306_SV386_Combine;
        unique_ptr<ExtractorType306_SV386_Combine> extractor_305_ptr(new ExtractorType306_SV386_Combine(inputs[305], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV306_Extract_out0));
        ExtractorType306_SV386_Combine * extractor_305 = extractor_305_ptr.get();
        ULONG extractor_305_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType307_SV386_Combine;
        unique_ptr<ExtractorType307_SV386_Combine> extractor_306_ptr(new ExtractorType307_SV386_Combine(inputs[306], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV307_Extract_out0));
        ExtractorType307_SV386_Combine * extractor_306 = extractor_306_ptr.get();
        ULONG extractor_306_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType308_SV386_Combine;
        unique_ptr<ExtractorType308_SV386_Combine> extractor_307_ptr(new ExtractorType308_SV386_Combine(inputs[307], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV308_Extract_out0));
        ExtractorType308_SV386_Combine * extractor_307 = extractor_307_ptr.get();
        ULONG extractor_307_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType309_SV386_Combine;
        unique_ptr<ExtractorType309_SV386_Combine> extractor_308_ptr(new ExtractorType309_SV386_Combine(inputs[308], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV309_Extract_out0));
        ExtractorType309_SV386_Combine * extractor_308 = extractor_308_ptr.get();
        ULONG extractor_308_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType310_SV386_Combine;
        unique_ptr<ExtractorType310_SV386_Combine> extractor_309_ptr(new ExtractorType310_SV386_Combine(inputs[309], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV310_Extract_out0));
        ExtractorType310_SV386_Combine * extractor_309 = extractor_309_ptr.get();
        ULONG extractor_309_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType311_SV386_Combine;
        unique_ptr<ExtractorType311_SV386_Combine> extractor_310_ptr(new ExtractorType311_SV386_Combine(inputs[310], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV311_Extract_out0));
        ExtractorType311_SV386_Combine * extractor_310 = extractor_310_ptr.get();
        ULONG extractor_310_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType312_SV386_Combine;
        unique_ptr<ExtractorType312_SV386_Combine> extractor_311_ptr(new ExtractorType312_SV386_Combine(inputs[311], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV312_Extract_out0));
        ExtractorType312_SV386_Combine * extractor_311 = extractor_311_ptr.get();
        ULONG extractor_311_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType313_SV386_Combine;
        unique_ptr<ExtractorType313_SV386_Combine> extractor_312_ptr(new ExtractorType313_SV386_Combine(inputs[312], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV313_Extract_out0));
        ExtractorType313_SV386_Combine * extractor_312 = extractor_312_ptr.get();
        ULONG extractor_312_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType314_SV386_Combine;
        unique_ptr<ExtractorType314_SV386_Combine> extractor_313_ptr(new ExtractorType314_SV386_Combine(inputs[313], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV314_Extract_out0));
        ExtractorType314_SV386_Combine * extractor_313 = extractor_313_ptr.get();
        ULONG extractor_313_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType315_SV386_Combine;
        unique_ptr<ExtractorType315_SV386_Combine> extractor_314_ptr(new ExtractorType315_SV386_Combine(inputs[314], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV315_Extract_out0));
        ExtractorType315_SV386_Combine * extractor_314 = extractor_314_ptr.get();
        ULONG extractor_314_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType316_SV386_Combine;
        unique_ptr<ExtractorType316_SV386_Combine> extractor_315_ptr(new ExtractorType316_SV386_Combine(inputs[315], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV316_Extract_out0));
        ExtractorType316_SV386_Combine * extractor_315 = extractor_315_ptr.get();
        ULONG extractor_315_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType317_SV386_Combine;
        unique_ptr<ExtractorType317_SV386_Combine> extractor_316_ptr(new ExtractorType317_SV386_Combine(inputs[316], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV317_Extract_out0));
        ExtractorType317_SV386_Combine * extractor_316 = extractor_316_ptr.get();
        ULONG extractor_316_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType318_SV386_Combine;
        unique_ptr<ExtractorType318_SV386_Combine> extractor_317_ptr(new ExtractorType318_SV386_Combine(inputs[317], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV318_Extract_out0));
        ExtractorType318_SV386_Combine * extractor_317 = extractor_317_ptr.get();
        ULONG extractor_317_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType319_SV386_Combine;
        unique_ptr<ExtractorType319_SV386_Combine> extractor_318_ptr(new ExtractorType319_SV386_Combine(inputs[318], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV319_Extract_out0));
        ExtractorType319_SV386_Combine * extractor_318 = extractor_318_ptr.get();
        ULONG extractor_318_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType320_SV386_Combine;
        unique_ptr<ExtractorType320_SV386_Combine> extractor_319_ptr(new ExtractorType320_SV386_Combine(inputs[319], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV320_Extract_out0));
        ExtractorType320_SV386_Combine * extractor_319 = extractor_319_ptr.get();
        ULONG extractor_319_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType321_SV386_Combine;
        unique_ptr<ExtractorType321_SV386_Combine> extractor_320_ptr(new ExtractorType321_SV386_Combine(inputs[320], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV321_Extract_out0));
        ExtractorType321_SV386_Combine * extractor_320 = extractor_320_ptr.get();
        ULONG extractor_320_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType322_SV386_Combine;
        unique_ptr<ExtractorType322_SV386_Combine> extractor_321_ptr(new ExtractorType322_SV386_Combine(inputs[321], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV322_Extract_out0));
        ExtractorType322_SV386_Combine * extractor_321 = extractor_321_ptr.get();
        ULONG extractor_321_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType323_SV386_Combine;
        unique_ptr<ExtractorType323_SV386_Combine> extractor_322_ptr(new ExtractorType323_SV386_Combine(inputs[322], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV323_Extract_out0));
        ExtractorType323_SV386_Combine * extractor_322 = extractor_322_ptr.get();
        ULONG extractor_322_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType324_SV386_Combine;
        unique_ptr<ExtractorType324_SV386_Combine> extractor_323_ptr(new ExtractorType324_SV386_Combine(inputs[323], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV324_Extract_out0));
        ExtractorType324_SV386_Combine * extractor_323 = extractor_323_ptr.get();
        ULONG extractor_323_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType325_SV386_Combine;
        unique_ptr<ExtractorType325_SV386_Combine> extractor_324_ptr(new ExtractorType325_SV386_Combine(inputs[324], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV325_Extract_out0));
        ExtractorType325_SV386_Combine * extractor_324 = extractor_324_ptr.get();
        ULONG extractor_324_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType326_SV386_Combine;
        unique_ptr<ExtractorType326_SV386_Combine> extractor_325_ptr(new ExtractorType326_SV386_Combine(inputs[325], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV326_Extract_out0));
        ExtractorType326_SV386_Combine * extractor_325 = extractor_325_ptr.get();
        ULONG extractor_325_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType327_SV386_Combine;
        unique_ptr<ExtractorType327_SV386_Combine> extractor_326_ptr(new ExtractorType327_SV386_Combine(inputs[326], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV327_Extract_out0));
        ExtractorType327_SV386_Combine * extractor_326 = extractor_326_ptr.get();
        ULONG extractor_326_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType328_SV386_Combine;
        unique_ptr<ExtractorType328_SV386_Combine> extractor_327_ptr(new ExtractorType328_SV386_Combine(inputs[327], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV328_Extract_out0));
        ExtractorType328_SV386_Combine * extractor_327 = extractor_327_ptr.get();
        ULONG extractor_327_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType329_SV386_Combine;
        unique_ptr<ExtractorType329_SV386_Combine> extractor_328_ptr(new ExtractorType329_SV386_Combine(inputs[328], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV329_Extract_out0));
        ExtractorType329_SV386_Combine * extractor_328 = extractor_328_ptr.get();
        ULONG extractor_328_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType330_SV386_Combine;
        unique_ptr<ExtractorType330_SV386_Combine> extractor_329_ptr(new ExtractorType330_SV386_Combine(inputs[329], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV330_Extract_out0));
        ExtractorType330_SV386_Combine * extractor_329 = extractor_329_ptr.get();
        ULONG extractor_329_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType331_SV386_Combine;
        unique_ptr<ExtractorType331_SV386_Combine> extractor_330_ptr(new ExtractorType331_SV386_Combine(inputs[330], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV331_Extract_out0));
        ExtractorType331_SV386_Combine * extractor_330 = extractor_330_ptr.get();
        ULONG extractor_330_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType332_SV386_Combine;
        unique_ptr<ExtractorType332_SV386_Combine> extractor_331_ptr(new ExtractorType332_SV386_Combine(inputs[331], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV332_Extract_out0));
        ExtractorType332_SV386_Combine * extractor_331 = extractor_331_ptr.get();
        ULONG extractor_331_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType333_SV386_Combine;
        unique_ptr<ExtractorType333_SV386_Combine> extractor_332_ptr(new ExtractorType333_SV386_Combine(inputs[332], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV333_Extract_out0));
        ExtractorType333_SV386_Combine * extractor_332 = extractor_332_ptr.get();
        ULONG extractor_332_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType334_SV386_Combine;
        unique_ptr<ExtractorType334_SV386_Combine> extractor_333_ptr(new ExtractorType334_SV386_Combine(inputs[333], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV334_Extract_out0));
        ExtractorType334_SV386_Combine * extractor_333 = extractor_333_ptr.get();
        ULONG extractor_333_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType335_SV386_Combine;
        unique_ptr<ExtractorType335_SV386_Combine> extractor_334_ptr(new ExtractorType335_SV386_Combine(inputs[334], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV335_Extract_out0));
        ExtractorType335_SV386_Combine * extractor_334 = extractor_334_ptr.get();
        ULONG extractor_334_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType336_SV386_Combine;
        unique_ptr<ExtractorType336_SV386_Combine> extractor_335_ptr(new ExtractorType336_SV386_Combine(inputs[335], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV336_Extract_out0));
        ExtractorType336_SV386_Combine * extractor_335 = extractor_335_ptr.get();
        ULONG extractor_335_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType337_SV386_Combine;
        unique_ptr<ExtractorType337_SV386_Combine> extractor_336_ptr(new ExtractorType337_SV386_Combine(inputs[336], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV337_Extract_out0));
        ExtractorType337_SV386_Combine * extractor_336 = extractor_336_ptr.get();
        ULONG extractor_336_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType338_SV386_Combine;
        unique_ptr<ExtractorType338_SV386_Combine> extractor_337_ptr(new ExtractorType338_SV386_Combine(inputs[337], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV338_Extract_out0));
        ExtractorType338_SV386_Combine * extractor_337 = extractor_337_ptr.get();
        ULONG extractor_337_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType339_SV386_Combine;
        unique_ptr<ExtractorType339_SV386_Combine> extractor_338_ptr(new ExtractorType339_SV386_Combine(inputs[338], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV339_Extract_out0));
        ExtractorType339_SV386_Combine * extractor_338 = extractor_338_ptr.get();
        ULONG extractor_338_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType340_SV386_Combine;
        unique_ptr<ExtractorType340_SV386_Combine> extractor_339_ptr(new ExtractorType340_SV386_Combine(inputs[339], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV340_Extract_out0));
        ExtractorType340_SV386_Combine * extractor_339 = extractor_339_ptr.get();
        ULONG extractor_339_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType341_SV386_Combine;
        unique_ptr<ExtractorType341_SV386_Combine> extractor_340_ptr(new ExtractorType341_SV386_Combine(inputs[340], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV341_Extract_out0));
        ExtractorType341_SV386_Combine * extractor_340 = extractor_340_ptr.get();
        ULONG extractor_340_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType342_SV386_Combine;
        unique_ptr<ExtractorType342_SV386_Combine> extractor_341_ptr(new ExtractorType342_SV386_Combine(inputs[341], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV342_Extract_out0));
        ExtractorType342_SV386_Combine * extractor_341 = extractor_341_ptr.get();
        ULONG extractor_341_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType343_SV386_Combine;
        unique_ptr<ExtractorType343_SV386_Combine> extractor_342_ptr(new ExtractorType343_SV386_Combine(inputs[342], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV343_Extract_out0));
        ExtractorType343_SV386_Combine * extractor_342 = extractor_342_ptr.get();
        ULONG extractor_342_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType344_SV386_Combine;
        unique_ptr<ExtractorType344_SV386_Combine> extractor_343_ptr(new ExtractorType344_SV386_Combine(inputs[343], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV344_Extract_out0));
        ExtractorType344_SV386_Combine * extractor_343 = extractor_343_ptr.get();
        ULONG extractor_343_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType345_SV386_Combine;
        unique_ptr<ExtractorType345_SV386_Combine> extractor_344_ptr(new ExtractorType345_SV386_Combine(inputs[344], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV345_Extract_out0));
        ExtractorType345_SV386_Combine * extractor_344 = extractor_344_ptr.get();
        ULONG extractor_344_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType346_SV386_Combine;
        unique_ptr<ExtractorType346_SV386_Combine> extractor_345_ptr(new ExtractorType346_SV386_Combine(inputs[345], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV346_Extract_out0));
        ExtractorType346_SV386_Combine * extractor_345 = extractor_345_ptr.get();
        ULONG extractor_345_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType347_SV386_Combine;
        unique_ptr<ExtractorType347_SV386_Combine> extractor_346_ptr(new ExtractorType347_SV386_Combine(inputs[346], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV347_Extract_out0));
        ExtractorType347_SV386_Combine * extractor_346 = extractor_346_ptr.get();
        ULONG extractor_346_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType348_SV386_Combine;
        unique_ptr<ExtractorType348_SV386_Combine> extractor_347_ptr(new ExtractorType348_SV386_Combine(inputs[347], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV348_Extract_out0));
        ExtractorType348_SV386_Combine * extractor_347 = extractor_347_ptr.get();
        ULONG extractor_347_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType349_SV386_Combine;
        unique_ptr<ExtractorType349_SV386_Combine> extractor_348_ptr(new ExtractorType349_SV386_Combine(inputs[348], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV349_Extract_out0));
        ExtractorType349_SV386_Combine * extractor_348 = extractor_348_ptr.get();
        ULONG extractor_348_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType350_SV386_Combine;
        unique_ptr<ExtractorType350_SV386_Combine> extractor_349_ptr(new ExtractorType350_SV386_Combine(inputs[349], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV350_Extract_out0));
        ExtractorType350_SV386_Combine * extractor_349 = extractor_349_ptr.get();
        ULONG extractor_349_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType351_SV386_Combine;
        unique_ptr<ExtractorType351_SV386_Combine> extractor_350_ptr(new ExtractorType351_SV386_Combine(inputs[350], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV351_Extract_out0));
        ExtractorType351_SV386_Combine * extractor_350 = extractor_350_ptr.get();
        ULONG extractor_350_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType352_SV386_Combine;
        unique_ptr<ExtractorType352_SV386_Combine> extractor_351_ptr(new ExtractorType352_SV386_Combine(inputs[351], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV352_Extract_out0));
        ExtractorType352_SV386_Combine * extractor_351 = extractor_351_ptr.get();
        ULONG extractor_351_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType353_SV386_Combine;
        unique_ptr<ExtractorType353_SV386_Combine> extractor_352_ptr(new ExtractorType353_SV386_Combine(inputs[352], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV353_Extract_out0));
        ExtractorType353_SV386_Combine * extractor_352 = extractor_352_ptr.get();
        ULONG extractor_352_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType354_SV386_Combine;
        unique_ptr<ExtractorType354_SV386_Combine> extractor_353_ptr(new ExtractorType354_SV386_Combine(inputs[353], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV354_Extract_out0));
        ExtractorType354_SV386_Combine * extractor_353 = extractor_353_ptr.get();
        ULONG extractor_353_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType355_SV386_Combine;
        unique_ptr<ExtractorType355_SV386_Combine> extractor_354_ptr(new ExtractorType355_SV386_Combine(inputs[354], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV355_Extract_out0));
        ExtractorType355_SV386_Combine * extractor_354 = extractor_354_ptr.get();
        ULONG extractor_354_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType356_SV386_Combine;
        unique_ptr<ExtractorType356_SV386_Combine> extractor_355_ptr(new ExtractorType356_SV386_Combine(inputs[355], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV356_Extract_out0));
        ExtractorType356_SV386_Combine * extractor_355 = extractor_355_ptr.get();
        ULONG extractor_355_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType357_SV386_Combine;
        unique_ptr<ExtractorType357_SV386_Combine> extractor_356_ptr(new ExtractorType357_SV386_Combine(inputs[356], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV357_Extract_out0));
        ExtractorType357_SV386_Combine * extractor_356 = extractor_356_ptr.get();
        ULONG extractor_356_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType358_SV386_Combine;
        unique_ptr<ExtractorType358_SV386_Combine> extractor_357_ptr(new ExtractorType358_SV386_Combine(inputs[357], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV358_Extract_out0));
        ExtractorType358_SV386_Combine * extractor_357 = extractor_357_ptr.get();
        ULONG extractor_357_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType359_SV386_Combine;
        unique_ptr<ExtractorType359_SV386_Combine> extractor_358_ptr(new ExtractorType359_SV386_Combine(inputs[358], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV359_Extract_out0));
        ExtractorType359_SV386_Combine * extractor_358 = extractor_358_ptr.get();
        ULONG extractor_358_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType360_SV386_Combine;
        unique_ptr<ExtractorType360_SV386_Combine> extractor_359_ptr(new ExtractorType360_SV386_Combine(inputs[359], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV360_Extract_out0));
        ExtractorType360_SV386_Combine * extractor_359 = extractor_359_ptr.get();
        ULONG extractor_359_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType361_SV386_Combine;
        unique_ptr<ExtractorType361_SV386_Combine> extractor_360_ptr(new ExtractorType361_SV386_Combine(inputs[360], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV361_Extract_out0));
        ExtractorType361_SV386_Combine * extractor_360 = extractor_360_ptr.get();
        ULONG extractor_360_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType362_SV386_Combine;
        unique_ptr<ExtractorType362_SV386_Combine> extractor_361_ptr(new ExtractorType362_SV386_Combine(inputs[361], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV362_Extract_out0));
        ExtractorType362_SV386_Combine * extractor_361 = extractor_361_ptr.get();
        ULONG extractor_361_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType363_SV386_Combine;
        unique_ptr<ExtractorType363_SV386_Combine> extractor_362_ptr(new ExtractorType363_SV386_Combine(inputs[362], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV363_Extract_out0));
        ExtractorType363_SV386_Combine * extractor_362 = extractor_362_ptr.get();
        ULONG extractor_362_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType364_SV386_Combine;
        unique_ptr<ExtractorType364_SV386_Combine> extractor_363_ptr(new ExtractorType364_SV386_Combine(inputs[363], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV364_Extract_out0));
        ExtractorType364_SV386_Combine * extractor_363 = extractor_363_ptr.get();
        ULONG extractor_363_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType365_SV386_Combine;
        unique_ptr<ExtractorType365_SV386_Combine> extractor_364_ptr(new ExtractorType365_SV386_Combine(inputs[364], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV365_Extract_out0));
        ExtractorType365_SV386_Combine * extractor_364 = extractor_364_ptr.get();
        ULONG extractor_364_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType366_SV386_Combine;
        unique_ptr<ExtractorType366_SV386_Combine> extractor_365_ptr(new ExtractorType366_SV386_Combine(inputs[365], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV366_Extract_out0));
        ExtractorType366_SV386_Combine * extractor_365 = extractor_365_ptr.get();
        ULONG extractor_365_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType367_SV386_Combine;
        unique_ptr<ExtractorType367_SV386_Combine> extractor_366_ptr(new ExtractorType367_SV386_Combine(inputs[366], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV367_Extract_out0));
        ExtractorType367_SV386_Combine * extractor_366 = extractor_366_ptr.get();
        ULONG extractor_366_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType368_SV386_Combine;
        unique_ptr<ExtractorType368_SV386_Combine> extractor_367_ptr(new ExtractorType368_SV386_Combine(inputs[367], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV368_Extract_out0));
        ExtractorType368_SV386_Combine * extractor_367 = extractor_367_ptr.get();
        ULONG extractor_367_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType369_SV386_Combine;
        unique_ptr<ExtractorType369_SV386_Combine> extractor_368_ptr(new ExtractorType369_SV386_Combine(inputs[368], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV369_Extract_out0));
        ExtractorType369_SV386_Combine * extractor_368 = extractor_368_ptr.get();
        ULONG extractor_368_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType370_SV386_Combine;
        unique_ptr<ExtractorType370_SV386_Combine> extractor_369_ptr(new ExtractorType370_SV386_Combine(inputs[369], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV370_Extract_out0));
        ExtractorType370_SV386_Combine * extractor_369 = extractor_369_ptr.get();
        ULONG extractor_369_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType371_SV386_Combine;
        unique_ptr<ExtractorType371_SV386_Combine> extractor_370_ptr(new ExtractorType371_SV386_Combine(inputs[370], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV371_Extract_out0));
        ExtractorType371_SV386_Combine * extractor_370 = extractor_370_ptr.get();
        ULONG extractor_370_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType372_SV386_Combine;
        unique_ptr<ExtractorType372_SV386_Combine> extractor_371_ptr(new ExtractorType372_SV386_Combine(inputs[371], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV372_Extract_out0));
        ExtractorType372_SV386_Combine * extractor_371 = extractor_371_ptr.get();
        ULONG extractor_371_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType373_SV386_Combine;
        unique_ptr<ExtractorType373_SV386_Combine> extractor_372_ptr(new ExtractorType373_SV386_Combine(inputs[372], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV373_Extract_out0));
        ExtractorType373_SV386_Combine * extractor_372 = extractor_372_ptr.get();
        ULONG extractor_372_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType374_SV386_Combine;
        unique_ptr<ExtractorType374_SV386_Combine> extractor_373_ptr(new ExtractorType374_SV386_Combine(inputs[373], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV374_Extract_out0));
        ExtractorType374_SV386_Combine * extractor_373 = extractor_373_ptr.get();
        ULONG extractor_373_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType375_SV386_Combine;
        unique_ptr<ExtractorType375_SV386_Combine> extractor_374_ptr(new ExtractorType375_SV386_Combine(inputs[374], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV375_Extract_out0));
        ExtractorType375_SV386_Combine * extractor_374 = extractor_374_ptr.get();
        ULONG extractor_374_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType376_SV386_Combine;
        unique_ptr<ExtractorType376_SV386_Combine> extractor_375_ptr(new ExtractorType376_SV386_Combine(inputs[375], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV376_Extract_out0));
        ExtractorType376_SV386_Combine * extractor_375 = extractor_375_ptr.get();
        ULONG extractor_375_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType377_SV386_Combine;
        unique_ptr<ExtractorType377_SV386_Combine> extractor_376_ptr(new ExtractorType377_SV386_Combine(inputs[376], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV377_Extract_out0));
        ExtractorType377_SV386_Combine * extractor_376 = extractor_376_ptr.get();
        ULONG extractor_376_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType378_SV386_Combine;
        unique_ptr<ExtractorType378_SV386_Combine> extractor_377_ptr(new ExtractorType378_SV386_Combine(inputs[377], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV378_Extract_out0));
        ExtractorType378_SV386_Combine * extractor_377 = extractor_377_ptr.get();
        ULONG extractor_377_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType379_SV386_Combine;
        unique_ptr<ExtractorType379_SV386_Combine> extractor_378_ptr(new ExtractorType379_SV386_Combine(inputs[378], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV379_Extract_out0));
        ExtractorType379_SV386_Combine * extractor_378 = extractor_378_ptr.get();
        ULONG extractor_378_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType380_SV386_Combine;
        unique_ptr<ExtractorType380_SV386_Combine> extractor_379_ptr(new ExtractorType380_SV386_Combine(inputs[379], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV380_Extract_out0));
        ExtractorType380_SV386_Combine * extractor_379 = extractor_379_ptr.get();
        ULONG extractor_379_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType381_SV386_Combine;
        unique_ptr<ExtractorType381_SV386_Combine> extractor_380_ptr(new ExtractorType381_SV386_Combine(inputs[380], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV381_Extract_out0));
        ExtractorType381_SV386_Combine * extractor_380 = extractor_380_ptr.get();
        ULONG extractor_380_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType382_SV386_Combine;
        unique_ptr<ExtractorType382_SV386_Combine> extractor_381_ptr(new ExtractorType382_SV386_Combine(inputs[381], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV382_Extract_out0));
        ExtractorType382_SV386_Combine * extractor_381 = extractor_381_ptr.get();
        ULONG extractor_381_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType383_SV386_Combine;
        unique_ptr<ExtractorType383_SV386_Combine> extractor_382_ptr(new ExtractorType383_SV386_Combine(inputs[382], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV383_Extract_out0));
        ExtractorType383_SV386_Combine * extractor_382 = extractor_382_ptr.get();
        ULONG extractor_382_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_0_Data0, BinaryExtractPolicy<GetSStream_0_Data0>, BinaryInputStream, 0> ExtractorType384_SV386_Combine;
        unique_ptr<ExtractorType384_SV386_Combine> extractor_383_ptr(new ExtractorType384_SV386_Combine(inputs[383], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV384_Extract_out0));
        ExtractorType384_SV386_Combine * extractor_383 = extractor_383_ptr.get();
        ULONG extractor_383_count = 1;

        // Define extractor type and construct object
        typedef Extractor<GetSStream_769_Data0, BinaryExtractPolicy<GetSStream_769_Data0>, BinaryInputStream, 0> ExtractorType385_SV386_Combine;
        unique_ptr<ExtractorType385_SV386_Combine> extractor_384_ptr(new ExtractorType385_SV386_Combine(inputs[384], false, x_inputBufSize, x_inputBufCnt, x_inputVirtualMemoryLimit, nullptr, UID_SV385_Extract_out0));
        ExtractorType385_SV386_Combine * extractor_384 = extractor_384_ptr.get();
        ULONG extractor_384_count = 1;

        // Construct combined operator and initialize it
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_DBFE8B1063BF4CD9_array[384];
        delegate_DBFE8B1063BF4CD9_array[0].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_0));
        delegate_DBFE8B1063BF4CD9_array[1].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_1));
        delegate_DBFE8B1063BF4CD9_array[2].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_2));
        delegate_DBFE8B1063BF4CD9_array[3].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_3));
        delegate_DBFE8B1063BF4CD9_array[4].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_4));
        delegate_DBFE8B1063BF4CD9_array[5].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_5));
        delegate_DBFE8B1063BF4CD9_array[6].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_6));
        delegate_DBFE8B1063BF4CD9_array[7].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_7));
        delegate_DBFE8B1063BF4CD9_array[8].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_8));
        delegate_DBFE8B1063BF4CD9_array[9].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_9));
        delegate_DBFE8B1063BF4CD9_array[10].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_10));
        delegate_DBFE8B1063BF4CD9_array[11].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_11));
        delegate_DBFE8B1063BF4CD9_array[12].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_12));
        delegate_DBFE8B1063BF4CD9_array[13].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_13));
        delegate_DBFE8B1063BF4CD9_array[14].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_14));
        delegate_DBFE8B1063BF4CD9_array[15].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_15));
        delegate_DBFE8B1063BF4CD9_array[16].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_16));
        delegate_DBFE8B1063BF4CD9_array[17].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_17));
        delegate_DBFE8B1063BF4CD9_array[18].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_18));
        delegate_DBFE8B1063BF4CD9_array[19].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_19));
        delegate_DBFE8B1063BF4CD9_array[20].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_20));
        delegate_DBFE8B1063BF4CD9_array[21].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_21));
        delegate_DBFE8B1063BF4CD9_array[22].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_22));
        delegate_DBFE8B1063BF4CD9_array[23].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_23));
        delegate_DBFE8B1063BF4CD9_array[24].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_24));
        delegate_DBFE8B1063BF4CD9_array[25].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_25));
        delegate_DBFE8B1063BF4CD9_array[26].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_26));
        delegate_DBFE8B1063BF4CD9_array[27].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_27));
        delegate_DBFE8B1063BF4CD9_array[28].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_28));
        delegate_DBFE8B1063BF4CD9_array[29].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_29));
        delegate_DBFE8B1063BF4CD9_array[30].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_30));
        delegate_DBFE8B1063BF4CD9_array[31].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_31));
        delegate_DBFE8B1063BF4CD9_array[32].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_32));
        delegate_DBFE8B1063BF4CD9_array[33].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_33));
        delegate_DBFE8B1063BF4CD9_array[34].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_34));
        delegate_DBFE8B1063BF4CD9_array[35].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_35));
        delegate_DBFE8B1063BF4CD9_array[36].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_36));
        delegate_DBFE8B1063BF4CD9_array[37].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_37));
        delegate_DBFE8B1063BF4CD9_array[38].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_38));
        delegate_DBFE8B1063BF4CD9_array[39].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_39));
        delegate_DBFE8B1063BF4CD9_array[40].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_40));
        delegate_DBFE8B1063BF4CD9_array[41].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_41));
        delegate_DBFE8B1063BF4CD9_array[42].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_42));
        delegate_DBFE8B1063BF4CD9_array[43].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_43));
        delegate_DBFE8B1063BF4CD9_array[44].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_44));
        delegate_DBFE8B1063BF4CD9_array[45].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_45));
        delegate_DBFE8B1063BF4CD9_array[46].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_46));
        delegate_DBFE8B1063BF4CD9_array[47].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_47));
        delegate_DBFE8B1063BF4CD9_array[48].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_48));
        delegate_DBFE8B1063BF4CD9_array[49].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_49));
        delegate_DBFE8B1063BF4CD9_array[50].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_50));
        delegate_DBFE8B1063BF4CD9_array[51].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_51));
        delegate_DBFE8B1063BF4CD9_array[52].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_52));
        delegate_DBFE8B1063BF4CD9_array[53].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_53));
        delegate_DBFE8B1063BF4CD9_array[54].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_54));
        delegate_DBFE8B1063BF4CD9_array[55].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_55));
        delegate_DBFE8B1063BF4CD9_array[56].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_56));
        delegate_DBFE8B1063BF4CD9_array[57].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_57));
        delegate_DBFE8B1063BF4CD9_array[58].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_58));
        delegate_DBFE8B1063BF4CD9_array[59].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_59));
        delegate_DBFE8B1063BF4CD9_array[60].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_60));
        delegate_DBFE8B1063BF4CD9_array[61].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_61));
        delegate_DBFE8B1063BF4CD9_array[62].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_62));
        delegate_DBFE8B1063BF4CD9_array[63].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_63));
        delegate_DBFE8B1063BF4CD9_array[64].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_64));
        delegate_DBFE8B1063BF4CD9_array[65].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_65));
        delegate_DBFE8B1063BF4CD9_array[66].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_66));
        delegate_DBFE8B1063BF4CD9_array[67].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_67));
        delegate_DBFE8B1063BF4CD9_array[68].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_68));
        delegate_DBFE8B1063BF4CD9_array[69].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_69));
        delegate_DBFE8B1063BF4CD9_array[70].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_70));
        delegate_DBFE8B1063BF4CD9_array[71].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_71));
        delegate_DBFE8B1063BF4CD9_array[72].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_72));
        delegate_DBFE8B1063BF4CD9_array[73].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_73));
        delegate_DBFE8B1063BF4CD9_array[74].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_74));
        delegate_DBFE8B1063BF4CD9_array[75].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_75));
        delegate_DBFE8B1063BF4CD9_array[76].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_76));
        delegate_DBFE8B1063BF4CD9_array[77].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_77));
        delegate_DBFE8B1063BF4CD9_array[78].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_78));
        delegate_DBFE8B1063BF4CD9_array[79].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_79));
        delegate_DBFE8B1063BF4CD9_array[80].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_80));
        delegate_DBFE8B1063BF4CD9_array[81].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_81));
        delegate_DBFE8B1063BF4CD9_array[82].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_82));
        delegate_DBFE8B1063BF4CD9_array[83].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_83));
        delegate_DBFE8B1063BF4CD9_array[84].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_84));
        delegate_DBFE8B1063BF4CD9_array[85].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_85));
        delegate_DBFE8B1063BF4CD9_array[86].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_86));
        delegate_DBFE8B1063BF4CD9_array[87].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_87));
        delegate_DBFE8B1063BF4CD9_array[88].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_88));
        delegate_DBFE8B1063BF4CD9_array[89].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_89));
        delegate_DBFE8B1063BF4CD9_array[90].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_90));
        delegate_DBFE8B1063BF4CD9_array[91].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_91));
        delegate_DBFE8B1063BF4CD9_array[92].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_92));
        delegate_DBFE8B1063BF4CD9_array[93].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_93));
        delegate_DBFE8B1063BF4CD9_array[94].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_94));
        delegate_DBFE8B1063BF4CD9_array[95].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_95));
        delegate_DBFE8B1063BF4CD9_array[96].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_96));
        delegate_DBFE8B1063BF4CD9_array[97].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_97));
        delegate_DBFE8B1063BF4CD9_array[98].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_98));
        delegate_DBFE8B1063BF4CD9_array[99].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_99));
        delegate_DBFE8B1063BF4CD9_array[100].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_100));
        delegate_DBFE8B1063BF4CD9_array[101].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_101));
        delegate_DBFE8B1063BF4CD9_array[102].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_102));
        delegate_DBFE8B1063BF4CD9_array[103].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_103));
        delegate_DBFE8B1063BF4CD9_array[104].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_104));
        delegate_DBFE8B1063BF4CD9_array[105].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_105));
        delegate_DBFE8B1063BF4CD9_array[106].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_106));
        delegate_DBFE8B1063BF4CD9_array[107].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_107));
        delegate_DBFE8B1063BF4CD9_array[108].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_108));
        delegate_DBFE8B1063BF4CD9_array[109].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_109));
        delegate_DBFE8B1063BF4CD9_array[110].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_110));
        delegate_DBFE8B1063BF4CD9_array[111].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_111));
        delegate_DBFE8B1063BF4CD9_array[112].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_112));
        delegate_DBFE8B1063BF4CD9_array[113].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_113));
        delegate_DBFE8B1063BF4CD9_array[114].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_114));
        delegate_DBFE8B1063BF4CD9_array[115].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_115));
        delegate_DBFE8B1063BF4CD9_array[116].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_116));
        delegate_DBFE8B1063BF4CD9_array[117].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_117));
        delegate_DBFE8B1063BF4CD9_array[118].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_118));
        delegate_DBFE8B1063BF4CD9_array[119].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_119));
        delegate_DBFE8B1063BF4CD9_array[120].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_120));
        delegate_DBFE8B1063BF4CD9_array[121].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_121));
        delegate_DBFE8B1063BF4CD9_array[122].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_122));
        delegate_DBFE8B1063BF4CD9_array[123].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_123));
        delegate_DBFE8B1063BF4CD9_array[124].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_124));
        delegate_DBFE8B1063BF4CD9_array[125].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_125));
        delegate_DBFE8B1063BF4CD9_array[126].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_126));
        delegate_DBFE8B1063BF4CD9_array[127].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_127));
        delegate_DBFE8B1063BF4CD9_array[128].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_128));
        delegate_DBFE8B1063BF4CD9_array[129].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_129));
        delegate_DBFE8B1063BF4CD9_array[130].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_130));
        delegate_DBFE8B1063BF4CD9_array[131].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_131));
        delegate_DBFE8B1063BF4CD9_array[132].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_132));
        delegate_DBFE8B1063BF4CD9_array[133].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_133));
        delegate_DBFE8B1063BF4CD9_array[134].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_134));
        delegate_DBFE8B1063BF4CD9_array[135].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_135));
        delegate_DBFE8B1063BF4CD9_array[136].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_136));
        delegate_DBFE8B1063BF4CD9_array[137].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_137));
        delegate_DBFE8B1063BF4CD9_array[138].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_138));
        delegate_DBFE8B1063BF4CD9_array[139].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_139));
        delegate_DBFE8B1063BF4CD9_array[140].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_140));
        delegate_DBFE8B1063BF4CD9_array[141].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_141));
        delegate_DBFE8B1063BF4CD9_array[142].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_142));
        delegate_DBFE8B1063BF4CD9_array[143].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_143));
        delegate_DBFE8B1063BF4CD9_array[144].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_144));
        delegate_DBFE8B1063BF4CD9_array[145].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_145));
        delegate_DBFE8B1063BF4CD9_array[146].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_146));
        delegate_DBFE8B1063BF4CD9_array[147].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_147));
        delegate_DBFE8B1063BF4CD9_array[148].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_148));
        delegate_DBFE8B1063BF4CD9_array[149].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_149));
        delegate_DBFE8B1063BF4CD9_array[150].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_150));
        delegate_DBFE8B1063BF4CD9_array[151].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_151));
        delegate_DBFE8B1063BF4CD9_array[152].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_152));
        delegate_DBFE8B1063BF4CD9_array[153].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_153));
        delegate_DBFE8B1063BF4CD9_array[154].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_154));
        delegate_DBFE8B1063BF4CD9_array[155].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_155));
        delegate_DBFE8B1063BF4CD9_array[156].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_156));
        delegate_DBFE8B1063BF4CD9_array[157].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_157));
        delegate_DBFE8B1063BF4CD9_array[158].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_158));
        delegate_DBFE8B1063BF4CD9_array[159].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_159));
        delegate_DBFE8B1063BF4CD9_array[160].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_160));
        delegate_DBFE8B1063BF4CD9_array[161].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_161));
        delegate_DBFE8B1063BF4CD9_array[162].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_162));
        delegate_DBFE8B1063BF4CD9_array[163].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_163));
        delegate_DBFE8B1063BF4CD9_array[164].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_164));
        delegate_DBFE8B1063BF4CD9_array[165].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_165));
        delegate_DBFE8B1063BF4CD9_array[166].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_166));
        delegate_DBFE8B1063BF4CD9_array[167].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_167));
        delegate_DBFE8B1063BF4CD9_array[168].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_168));
        delegate_DBFE8B1063BF4CD9_array[169].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_169));
        delegate_DBFE8B1063BF4CD9_array[170].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_170));
        delegate_DBFE8B1063BF4CD9_array[171].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_171));
        delegate_DBFE8B1063BF4CD9_array[172].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_172));
        delegate_DBFE8B1063BF4CD9_array[173].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_173));
        delegate_DBFE8B1063BF4CD9_array[174].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_174));
        delegate_DBFE8B1063BF4CD9_array[175].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_175));
        delegate_DBFE8B1063BF4CD9_array[176].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_176));
        delegate_DBFE8B1063BF4CD9_array[177].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_177));
        delegate_DBFE8B1063BF4CD9_array[178].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_178));
        delegate_DBFE8B1063BF4CD9_array[179].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_179));
        delegate_DBFE8B1063BF4CD9_array[180].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_180));
        delegate_DBFE8B1063BF4CD9_array[181].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_181));
        delegate_DBFE8B1063BF4CD9_array[182].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_182));
        delegate_DBFE8B1063BF4CD9_array[183].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_183));
        delegate_DBFE8B1063BF4CD9_array[184].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_184));
        delegate_DBFE8B1063BF4CD9_array[185].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_185));
        delegate_DBFE8B1063BF4CD9_array[186].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_186));
        delegate_DBFE8B1063BF4CD9_array[187].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_187));
        delegate_DBFE8B1063BF4CD9_array[188].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_188));
        delegate_DBFE8B1063BF4CD9_array[189].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_189));
        delegate_DBFE8B1063BF4CD9_array[190].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_190));
        delegate_DBFE8B1063BF4CD9_array[191].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_191));
        delegate_DBFE8B1063BF4CD9_array[192].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_192));
        delegate_DBFE8B1063BF4CD9_array[193].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_193));
        delegate_DBFE8B1063BF4CD9_array[194].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_194));
        delegate_DBFE8B1063BF4CD9_array[195].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_195));
        delegate_DBFE8B1063BF4CD9_array[196].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_196));
        delegate_DBFE8B1063BF4CD9_array[197].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_197));
        delegate_DBFE8B1063BF4CD9_array[198].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_198));
        delegate_DBFE8B1063BF4CD9_array[199].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_199));
        delegate_DBFE8B1063BF4CD9_array[200].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_200));
        delegate_DBFE8B1063BF4CD9_array[201].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_201));
        delegate_DBFE8B1063BF4CD9_array[202].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_202));
        delegate_DBFE8B1063BF4CD9_array[203].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_203));
        delegate_DBFE8B1063BF4CD9_array[204].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_204));
        delegate_DBFE8B1063BF4CD9_array[205].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_205));
        delegate_DBFE8B1063BF4CD9_array[206].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_206));
        delegate_DBFE8B1063BF4CD9_array[207].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_207));
        delegate_DBFE8B1063BF4CD9_array[208].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_208));
        delegate_DBFE8B1063BF4CD9_array[209].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_209));
        delegate_DBFE8B1063BF4CD9_array[210].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_210));
        delegate_DBFE8B1063BF4CD9_array[211].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_211));
        delegate_DBFE8B1063BF4CD9_array[212].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_212));
        delegate_DBFE8B1063BF4CD9_array[213].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_213));
        delegate_DBFE8B1063BF4CD9_array[214].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_214));
        delegate_DBFE8B1063BF4CD9_array[215].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_215));
        delegate_DBFE8B1063BF4CD9_array[216].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_216));
        delegate_DBFE8B1063BF4CD9_array[217].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_217));
        delegate_DBFE8B1063BF4CD9_array[218].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_218));
        delegate_DBFE8B1063BF4CD9_array[219].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_219));
        delegate_DBFE8B1063BF4CD9_array[220].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_220));
        delegate_DBFE8B1063BF4CD9_array[221].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_221));
        delegate_DBFE8B1063BF4CD9_array[222].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_222));
        delegate_DBFE8B1063BF4CD9_array[223].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_223));
        delegate_DBFE8B1063BF4CD9_array[224].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_224));
        delegate_DBFE8B1063BF4CD9_array[225].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_225));
        delegate_DBFE8B1063BF4CD9_array[226].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_226));
        delegate_DBFE8B1063BF4CD9_array[227].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_227));
        delegate_DBFE8B1063BF4CD9_array[228].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_228));
        delegate_DBFE8B1063BF4CD9_array[229].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_229));
        delegate_DBFE8B1063BF4CD9_array[230].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_230));
        delegate_DBFE8B1063BF4CD9_array[231].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_231));
        delegate_DBFE8B1063BF4CD9_array[232].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_232));
        delegate_DBFE8B1063BF4CD9_array[233].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_233));
        delegate_DBFE8B1063BF4CD9_array[234].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_234));
        delegate_DBFE8B1063BF4CD9_array[235].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_235));
        delegate_DBFE8B1063BF4CD9_array[236].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_236));
        delegate_DBFE8B1063BF4CD9_array[237].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_237));
        delegate_DBFE8B1063BF4CD9_array[238].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_238));
        delegate_DBFE8B1063BF4CD9_array[239].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_239));
        delegate_DBFE8B1063BF4CD9_array[240].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_240));
        delegate_DBFE8B1063BF4CD9_array[241].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_241));
        delegate_DBFE8B1063BF4CD9_array[242].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_242));
        delegate_DBFE8B1063BF4CD9_array[243].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_243));
        delegate_DBFE8B1063BF4CD9_array[244].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_244));
        delegate_DBFE8B1063BF4CD9_array[245].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_245));
        delegate_DBFE8B1063BF4CD9_array[246].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_246));
        delegate_DBFE8B1063BF4CD9_array[247].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_247));
        delegate_DBFE8B1063BF4CD9_array[248].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_248));
        delegate_DBFE8B1063BF4CD9_array[249].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_249));
        delegate_DBFE8B1063BF4CD9_array[250].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_250));
        delegate_DBFE8B1063BF4CD9_array[251].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_251));
        delegate_DBFE8B1063BF4CD9_array[252].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_252));
        delegate_DBFE8B1063BF4CD9_array[253].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_253));
        delegate_DBFE8B1063BF4CD9_array[254].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_254));
        delegate_DBFE8B1063BF4CD9_array[255].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_255));
        delegate_DBFE8B1063BF4CD9_array[256].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_256));
        delegate_DBFE8B1063BF4CD9_array[257].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_257));
        delegate_DBFE8B1063BF4CD9_array[258].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_258));
        delegate_DBFE8B1063BF4CD9_array[259].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_259));
        delegate_DBFE8B1063BF4CD9_array[260].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_260));
        delegate_DBFE8B1063BF4CD9_array[261].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_261));
        delegate_DBFE8B1063BF4CD9_array[262].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_262));
        delegate_DBFE8B1063BF4CD9_array[263].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_263));
        delegate_DBFE8B1063BF4CD9_array[264].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_264));
        delegate_DBFE8B1063BF4CD9_array[265].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_265));
        delegate_DBFE8B1063BF4CD9_array[266].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_266));
        delegate_DBFE8B1063BF4CD9_array[267].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_267));
        delegate_DBFE8B1063BF4CD9_array[268].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_268));
        delegate_DBFE8B1063BF4CD9_array[269].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_269));
        delegate_DBFE8B1063BF4CD9_array[270].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_270));
        delegate_DBFE8B1063BF4CD9_array[271].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_271));
        delegate_DBFE8B1063BF4CD9_array[272].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_272));
        delegate_DBFE8B1063BF4CD9_array[273].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_273));
        delegate_DBFE8B1063BF4CD9_array[274].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_274));
        delegate_DBFE8B1063BF4CD9_array[275].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_275));
        delegate_DBFE8B1063BF4CD9_array[276].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_276));
        delegate_DBFE8B1063BF4CD9_array[277].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_277));
        delegate_DBFE8B1063BF4CD9_array[278].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_278));
        delegate_DBFE8B1063BF4CD9_array[279].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_279));
        delegate_DBFE8B1063BF4CD9_array[280].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_280));
        delegate_DBFE8B1063BF4CD9_array[281].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_281));
        delegate_DBFE8B1063BF4CD9_array[282].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_282));
        delegate_DBFE8B1063BF4CD9_array[283].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_283));
        delegate_DBFE8B1063BF4CD9_array[284].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_284));
        delegate_DBFE8B1063BF4CD9_array[285].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_285));
        delegate_DBFE8B1063BF4CD9_array[286].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_286));
        delegate_DBFE8B1063BF4CD9_array[287].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_287));
        delegate_DBFE8B1063BF4CD9_array[288].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_288));
        delegate_DBFE8B1063BF4CD9_array[289].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_289));
        delegate_DBFE8B1063BF4CD9_array[290].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_290));
        delegate_DBFE8B1063BF4CD9_array[291].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_291));
        delegate_DBFE8B1063BF4CD9_array[292].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_292));
        delegate_DBFE8B1063BF4CD9_array[293].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_293));
        delegate_DBFE8B1063BF4CD9_array[294].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_294));
        delegate_DBFE8B1063BF4CD9_array[295].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_295));
        delegate_DBFE8B1063BF4CD9_array[296].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_296));
        delegate_DBFE8B1063BF4CD9_array[297].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_297));
        delegate_DBFE8B1063BF4CD9_array[298].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_298));
        delegate_DBFE8B1063BF4CD9_array[299].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_299));
        delegate_DBFE8B1063BF4CD9_array[300].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_300));
        delegate_DBFE8B1063BF4CD9_array[301].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_301));
        delegate_DBFE8B1063BF4CD9_array[302].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_302));
        delegate_DBFE8B1063BF4CD9_array[303].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_303));
        delegate_DBFE8B1063BF4CD9_array[304].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_304));
        delegate_DBFE8B1063BF4CD9_array[305].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_305));
        delegate_DBFE8B1063BF4CD9_array[306].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_306));
        delegate_DBFE8B1063BF4CD9_array[307].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_307));
        delegate_DBFE8B1063BF4CD9_array[308].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_308));
        delegate_DBFE8B1063BF4CD9_array[309].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_309));
        delegate_DBFE8B1063BF4CD9_array[310].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_310));
        delegate_DBFE8B1063BF4CD9_array[311].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_311));
        delegate_DBFE8B1063BF4CD9_array[312].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_312));
        delegate_DBFE8B1063BF4CD9_array[313].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_313));
        delegate_DBFE8B1063BF4CD9_array[314].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_314));
        delegate_DBFE8B1063BF4CD9_array[315].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_315));
        delegate_DBFE8B1063BF4CD9_array[316].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_316));
        delegate_DBFE8B1063BF4CD9_array[317].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_317));
        delegate_DBFE8B1063BF4CD9_array[318].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_318));
        delegate_DBFE8B1063BF4CD9_array[319].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_319));
        delegate_DBFE8B1063BF4CD9_array[320].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_320));
        delegate_DBFE8B1063BF4CD9_array[321].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_321));
        delegate_DBFE8B1063BF4CD9_array[322].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_322));
        delegate_DBFE8B1063BF4CD9_array[323].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_323));
        delegate_DBFE8B1063BF4CD9_array[324].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_324));
        delegate_DBFE8B1063BF4CD9_array[325].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_325));
        delegate_DBFE8B1063BF4CD9_array[326].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_326));
        delegate_DBFE8B1063BF4CD9_array[327].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_327));
        delegate_DBFE8B1063BF4CD9_array[328].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_328));
        delegate_DBFE8B1063BF4CD9_array[329].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_329));
        delegate_DBFE8B1063BF4CD9_array[330].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_330));
        delegate_DBFE8B1063BF4CD9_array[331].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_331));
        delegate_DBFE8B1063BF4CD9_array[332].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_332));
        delegate_DBFE8B1063BF4CD9_array[333].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_333));
        delegate_DBFE8B1063BF4CD9_array[334].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_334));
        delegate_DBFE8B1063BF4CD9_array[335].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_335));
        delegate_DBFE8B1063BF4CD9_array[336].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_336));
        delegate_DBFE8B1063BF4CD9_array[337].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_337));
        delegate_DBFE8B1063BF4CD9_array[338].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_338));
        delegate_DBFE8B1063BF4CD9_array[339].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_339));
        delegate_DBFE8B1063BF4CD9_array[340].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_340));
        delegate_DBFE8B1063BF4CD9_array[341].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_341));
        delegate_DBFE8B1063BF4CD9_array[342].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_342));
        delegate_DBFE8B1063BF4CD9_array[343].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_343));
        delegate_DBFE8B1063BF4CD9_array[344].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_344));
        delegate_DBFE8B1063BF4CD9_array[345].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_345));
        delegate_DBFE8B1063BF4CD9_array[346].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_346));
        delegate_DBFE8B1063BF4CD9_array[347].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_347));
        delegate_DBFE8B1063BF4CD9_array[348].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_348));
        delegate_DBFE8B1063BF4CD9_array[349].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_349));
        delegate_DBFE8B1063BF4CD9_array[350].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_350));
        delegate_DBFE8B1063BF4CD9_array[351].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_351));
        delegate_DBFE8B1063BF4CD9_array[352].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_352));
        delegate_DBFE8B1063BF4CD9_array[353].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_353));
        delegate_DBFE8B1063BF4CD9_array[354].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_354));
        delegate_DBFE8B1063BF4CD9_array[355].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_355));
        delegate_DBFE8B1063BF4CD9_array[356].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_356));
        delegate_DBFE8B1063BF4CD9_array[357].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_357));
        delegate_DBFE8B1063BF4CD9_array[358].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_358));
        delegate_DBFE8B1063BF4CD9_array[359].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_359));
        delegate_DBFE8B1063BF4CD9_array[360].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_360));
        delegate_DBFE8B1063BF4CD9_array[361].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_361));
        delegate_DBFE8B1063BF4CD9_array[362].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_362));
        delegate_DBFE8B1063BF4CD9_array[363].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_363));
        delegate_DBFE8B1063BF4CD9_array[364].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_364));
        delegate_DBFE8B1063BF4CD9_array[365].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_365));
        delegate_DBFE8B1063BF4CD9_array[366].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_366));
        delegate_DBFE8B1063BF4CD9_array[367].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_367));
        delegate_DBFE8B1063BF4CD9_array[368].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_368));
        delegate_DBFE8B1063BF4CD9_array[369].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_369));
        delegate_DBFE8B1063BF4CD9_array[370].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_370));
        delegate_DBFE8B1063BF4CD9_array[371].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_371));
        delegate_DBFE8B1063BF4CD9_array[372].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_372));
        delegate_DBFE8B1063BF4CD9_array[373].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_373));
        delegate_DBFE8B1063BF4CD9_array[374].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_374));
        delegate_DBFE8B1063BF4CD9_array[375].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_375));
        delegate_DBFE8B1063BF4CD9_array[376].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_376));
        delegate_DBFE8B1063BF4CD9_array[377].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_377));
        delegate_DBFE8B1063BF4CD9_array[378].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_378));
        delegate_DBFE8B1063BF4CD9_array[379].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_379));
        delegate_DBFE8B1063BF4CD9_array[380].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_380));
        delegate_DBFE8B1063BF4CD9_array[381].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_381));
        delegate_DBFE8B1063BF4CD9_array[382].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_382));
        delegate_DBFE8B1063BF4CD9_array[383].reset(new OperatorDelegate<GetSStream_0_Data0>(extractor_383));
        OperatorDelegate<GetSStream_0_Data0> ** delegate_DBFE8B1063BF4CD9 = (OperatorDelegate<GetSStream_0_Data0> **)delegate_DBFE8B1063BF4CD9_array;
        // Define the type of the operator
        typedef Merger<OperatorDelegate<GetSStream_0_Data0>, GetSStream_0_Data0, ScopeLoserTree<OperatorDelegate<GetSStream_0_Data0>, UID_Aggregate_768>, UID_Aggregate_768> AggregateType_Aggregate_768;
        // Construct operator object and initialize it
        unique_ptr<AggregateType_Aggregate_768> aggregate_Aggregate_768_ptr(new AggregateType_Aggregate_768(delegate_DBFE8B1063BF4CD9 + 0, 384, UID_Aggregate_768));
        AggregateType_Aggregate_768 * aggregate_Aggregate_768 = aggregate_Aggregate_768_ptr.get();
        ULONG aggregate_Aggregate_768_count = 1; 

        // Define the combiner operator
        typedef NativeCombinerWrapper<AggregateType_Aggregate_768, ExtractorType385_SV386_Combine, GetSStream_0_Data0, InnerJoiner, UID_Join_773> CombinerType_Join_773;
        unique_ptr<CombinerType_Join_773> combiner_Join_773_ptr;
        combiner_Join_773_ptr.reset(new CombinerType_Join_773(aggregate_Aggregate_768, extractor_384, UID_Join_773, 0, nullptr));
 
        CombinerType_Join_773 * combiner_Join_773 = combiner_Join_773_ptr.get();
        ULONG combiner_Join_773_count = 1;
        // Define hash aggregator type
        typedef LocalHashAggregator<CombinerType_Join_773, GetSStream_0_Data0, UID_Process_774> LocalHashAggregatorType_Process_774;
        // Construct operator and initialize it.
        unique_ptr<LocalHashAggregatorType_Process_774> localHashAggregator_Process_774_ptr (new LocalHashAggregatorType_Process_774(combiner_Join_773, UID_Process_774));
        LocalHashAggregatorType_Process_774 * localHashAggregator_Process_774 = localHashAggregator_Process_774_ptr.get();
        ULONG localHashAggregator_Process_774_count = 1;
        // Construct operator and initialize it.
        unique_ptr<OperatorDelegate<GetSStream_0_Data0>> delegate_localHashAggregator_Process_774_ptr (new OperatorDelegate<GetSStream_0_Data0>(OperatorDelegate<GetSStream_0_Data0>::FromOperator(localHashAggregator_Process_774)));
        OperatorDelegate<GetSStream_0_Data0> * delegate_localHashAggregator_Process_774 = delegate_localHashAggregator_Process_774_ptr.get();
        ULONG delegate_localHashAggregator_Process_774_count = 1;
        // Define sorter type
        typedef Sorter<GetSStream_0_Data0> SorterType_Process_775;
        // Construct operator and initialize it.
        unique_ptr<SorterType_Process_775> sorter_Process_775_ptr (new SorterType_Process_775(delegate_localHashAggregator_Process_774, &StdSort<GetSStream_0_Data0>::Sort<KeyComparePolicy<GetSStream_0_Data0, UID_Process_775>, (sizeof(GetSStream_0_Data0)<=CACHELINE_SIZE)>, ScopeLoserTreeDelegate<GetSStream_0_Data0>::CreateDelegate<UID_Process_775>(), false, UID_Process_775));
        SorterType_Process_775 * sorter_Process_775 = sorter_Process_775_ptr.get();
        ULONG sorter_Process_775_count = 1;
        // Define stream aggregator type
        typedef StreamAggregator<SorterType_Process_775, GetSStream_0_Data0, UID_Process_776> StreamAggregatorType_Process_776;
        // Construct operator and initialize it.
        unique_ptr<StreamAggregatorType_Process_776> streamAggregator_Process_776_ptr (new StreamAggregatorType_Process_776(sorter_Process_775, false, UID_Process_776));
        StreamAggregatorType_Process_776 * streamAggregator_Process_776 = streamAggregator_Process_776_ptr.get();
        ULONG streamAggregator_Process_776_count = 1;
        // Define outputer type
        typedef Outputer<StreamAggregatorType_Process_776, TextOutputPolicy<typename StreamAggregatorType_Process_776::Schema, UID_SV386_Combine_out0>, TextOutputStream<TextOutputStreamTraitsConst<'\t', 1, false, true, false, false, false, Default>>, false> OutputerType386_SV386_Combine;
        // Construct operator and initialize it
        unique_ptr<OutputerType386_SV386_Combine> outputer_SV386_Combine_out0_ptr(new OutputerType386_SV386_Combine(streamAggregator_Process_776, outputFileNames[0], x_outputBufSize, x_outputBufCnt, OutputStreamParameters('\t', 1, false, true, false, false, NULL, Default), UID_SV386_Combine_out0));
        OutputerType386_SV386_Combine * outputer_SV386_Combine_out0 = outputer_SV386_Combine_out0_ptr.get();

        try
        {
            // Init operator chain
            outputer_SV386_Combine_out0->Init();
    
            // Execute the whole vertex by calling the GetNextRow on top operator
            StreamAggregatorType_Process_776::Schema row;
            outputer_SV386_Combine_out0->GetNextRow(row);
    
            // Close operator chain
            outputer_SV386_Combine_out0->Close();
        }
        catch(ExceptionWithStack & ex)
        {
            if (vertexExecutionInfo->m_reportStatusFunc != NULL)
            {
                ErrorManager::GetGlobal()->SetError(ex.GetErrorNumber(), ex.what(), ex.GetDetails(), "");
                vertexExecutionInfo->m_reportStatusFunc(vertexExecutionInfo->m_statusReportContext);
            }
            throw;
        }


        // Write out execution stats
        {
 
            MemoryManager::GetGlobal()->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
            outputer_SV386_Combine_out0->WriteRuntimeStats(vertexExecutionInfo->m_statsRoot);
        }        
    }
}
#endif // defined(COMPILE_NATIVE)

#if defined(COMPILE_MANAGED)
#endif // defined(COMPILE_MANAGED)

#endif
#pragma endregion SV386_Combine
// Empty footer
