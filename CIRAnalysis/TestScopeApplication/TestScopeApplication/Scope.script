//Script GUID:33448824-ea29-4584-bfb4-a3fc2a656c23
//Used for tracking history

//Script GUID:da3a2360-5677-41bd-9924-6b62aa0e8ea3
//Used for tracking history


a = 
    SSTREAM
    SPARSE STREAMSET @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/VmAvailabilityDataHourly"
    PATTERN @"/%Y/%m/%d/%h/Data_%Y_%m_%d_%h.ss"
    RANGE __date = ["2015-01-01","2015-02-01"],
          __hour =["0","23"];

b = 

    SELECT a.LogicalContainerId, a.TenantId, a.RCAEngineCategory, COUNT(*) AS CountDownTime
    FROM a
    GROUP BY LogicalContainerId, TenantId, RCAEngineCategory;

c =
    REDUCE b
    ON LogicalContainerId
    PRODUCE LogicalContainerId,
            TenantId,
            CustomerInitiated,
            Planned,
            Unplanned
    USING SampleReducer
    PRESORT LogicalContainerId;

OUTPUT c TO @"/my/jobs/test.txt" USING DefaultTextOutputter();

#CS

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class SampleReducer : Reducer
{

     public override Schema Produces(string[] columns, string[] args, Schema input)

     {

          return new Schema("LogicalContainerId:string, TenantId:string, CustomerInitiated: int, Planned: int, Unplanned: int");  

     }

 

    public override IEnumerable<Row> Reduce(RowSet input, Row output, string[] args)
    {
        
          bool newID = true;

          string LogicalContainerId = "";

          string TenantId="";

          int CustomerInitiated=0;

          int Planned=0;

          int Unplanned=0;

          foreach (Row row in input.Rows)

          {

              if (newID)

              {
                   LogicalContainerId=row[0].String;

                   TenantId=row[1].String;

                   CustomerInitiated=0;

                   Planned=0;

                   Unplanned=0;

                   if (row[2].String == "CustomerInitiated")  {
                        CustomerInitiated=row[3].Integer;
                   }
                   else if (row[2].String == "Planned") {
                        Planned=row[3].Integer;
                   }
                   else if (row[2].String == "Unplanned"){
                        Unplanned=row[3].Integer;
                   }
                   newID = false;


              }

              else

               {

                   if (row[2].String == "CustomerInitiated")  {
                        CustomerInitiated=row[3].Integer;
                   }
                   else if (row[2].String == "Planned") {
                        Planned=row[3].Integer;
                   }
                   else if (row[2].String == "Unplanned"){
                        Unplanned=row[3].Integer;
                   }
                   newID = false;

              }
          }

          output[0].Set(LogicalContainerId);

          output[1].Set(TenantId);

          output[2].Set(CustomerInitiated);

          output[3].Set(Planned);

          output[4].Set(Unplanned);

          yield return output;

     }

}
#ENDCS


/* Test Code */

/*
VM_DTcounting =
    SELECT a.LogicalContainerId, a.TenantId, a.RCAEngineCategory, COUNT(*) AS CountDownTime
    FROM a
    WHERE a.RCAEngineCategory == "CustomerInitiated";

DTcounting = SELECT a.TenantId,  COUNT(*) AS CountDownTime
    FROM a;

VMcounting=
    SELECT VM_DTcounting.TenantId, COUNT(*) AS VMcounts
    FROM VM_DTcounting;
*/
/*

b = SELECT a.TenantId, a.RCAEngineCategory, COUNT(*) AS CountDownTime
    FROM a
    WHERE a.RCAEngineCategory == "CustomerInitiated";
//    ORDER BY CountDownTime DESC;

c = SELECT a.TenantId, a.RCAEngineCategory, COUNT(*) AS CountDownTime
    FROM a
    WHERE a.RCAEngineCategory == "Unplanned";
//    ORDER BY CountDownTime DESC;

d = 
    SELECT b.TenantId AS TenantID, b.CountDownTime AS CustomerDownTime, c.CountDownTime AS UnplannedDownTime
    FROM b
    INNER JOIN c
    ON b.TenantId == c.TenantId
    ORDER BY UnplannedDownTime DESC;
*/
/*
c = SELECT a.RCAEngineCategory, COUNT(*) AS CountUserReason
    FROM a
    GROUP BY RCAEngineCategory
    ORDER BY CountUserReason;
*/
/*c =
    REDUCE b
    ON ContainerId
    PRODUCE ContainerId, DowntimeCounts
    USING SampleReducer
    PRESORT ContainerId;
*/    


